<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王玉略的个人网站</title>
  
  <subtitle>Stay Hungry, Stay Foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-20T08:15:23.765Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王二</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS中通过指定大小来压缩图片</title>
    <link href="http://yoursite.com/2018/12/20/JS%E4%B8%AD%E9%80%9A%E8%BF%87%E6%8C%87%E5%AE%9A%E5%A4%A7%E5%B0%8F%E6%9D%A5%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2018/12/20/JS中通过指定大小来压缩图片/</id>
    <published>2018-12-20T07:39:23.000Z</published>
    <updated>2018-12-20T08:15:23.765Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在实际开发中，我们可能会有这样的需求：<strong>指定图片大小来压缩图片</strong>,如果你也有这样的需求，这篇文章可能会帮到你 </p></blockquote><a id="more"></a><h1 id="JS中通过指定大小来压缩图片"><a href="#JS中通过指定大小来压缩图片" class="headerlink" title="JS中通过指定大小来压缩图片"></a>JS中通过指定大小来压缩图片</h1><p>前不久王二写了一个<a href="https://juejin.im/post/5a097b2ff265da43231a79fa" target="_blank" rel="noopener">图片处理库</a>，可以指定图片质量压缩图片，调用的是javaScript的原生方法 <code>toDataURL</code> 和 <code>toBlob</code>，库里有如下这些方法：</p><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1812/2.png?raw=true" alt="Alt text"></p><p>但是通过质量压缩图片有一些不足之处：<strong>无法确定压缩后图片的大小</strong>；</p><p>比如下图，王二随机选了三张图片做测试(感兴趣的小伙伴可以<a href="http://www.wangyulue.com/assets/image-comversion/example/test.html" target="_blank" rel="noopener">戳这里</a>自行测试)，图中x轴是图片压缩质量，取值0~1,y轴是图片的压缩比：</p><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1812/1.png?raw=true" alt="Alt text"></p><p>可以看到，在设置相同的压缩图片质量下，每张图片的压缩比率都有所不同；</p><p>而在实际开发中，我们可能会有这样的需求：<strong>指定图片大小来压缩图片</strong>。王二在github找了一圈，没发现有实现此方法的js库,于是王二在原来库的基础上又做了一些修改，实现了这个功能。</p><p>下图是新库的方法地图：</p><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1812/3.png?raw=true" alt="Alt text"></p><p>新库做了如下优化：</p><ul><li>支持png,gif,jpeg类型图片压缩</li><li>添加<code>downloadFile()</code>方法</li><li>可以设置压缩后图片的长宽，图片比例</li><li>可以设置压缩后图片旋转方向</li><li><strong>通过指定大小来压缩文件</strong></li><li>eslint</li><li>用promise，sync/await异步调用</li></ul><p>这时候指定大小来压缩图片的方法就会变的非常简单，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将图片压缩到100KB</span></span><br><span class="line">imageConversion.compressAccurately(file,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以加上其他选项，指定压缩图片的精确度、类型、宽度、高度、旋转方向、缩放</span></span><br><span class="line">imageConversion.compressAccurately(file,&#123;</span><br><span class="line">  size: <span class="number">100</span>,    <span class="comment">//The compressed image size is 100kb</span></span><br><span class="line">  accuracy: <span class="number">0.9</span>,<span class="comment">//the accuracy of image compression size,range 0.8-0.99,default 0.95;</span></span><br><span class="line">                <span class="comment">//this means if the picture size is set to 1000Kb and the</span></span><br><span class="line">                <span class="comment">//accuracy is 0.9, the image with the compression result</span></span><br><span class="line">                <span class="comment">//of 900Kb-1100Kb is considered acceptable;</span></span><br><span class="line">  type: <span class="string">"image/png"</span>,</span><br><span class="line">  width: <span class="number">300</span>,</span><br><span class="line">  height: <span class="number">200</span>,</span><br><span class="line">  orientation:<span class="number">2</span>,</span><br><span class="line">  scale: <span class="number">0.5</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以参考<a href="https://github.com/WangYuLue/image-conversion" target="_blank" rel="noopener">github</a>了解更加详细的使用方法。</p><p>实现<code>compressAccurately</code>方法的原理其实很简单，就是 <strong>通过二分法来找到最接近指定大小的那个图片质量</strong>。</p><p>如果想亲手体验一下，可以<a href="http://www.wangyulue.com/assets/image-comversion/example/index.html" target="_blank" rel="noopener">戳这里</a>在线体验。如果使用有什么问题，及时提issue给我。</p><p>如果觉得还不错，别忘了来<a href="https://github.com/WangYuLue/image-conversion" target="_blank" rel="noopener">github</a>star一下哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;在实际开发中，我们可能会有这样的需求：&lt;strong&gt;指定图片大小来压缩图片&lt;/strong&gt;,如果你也有这样的需求，这篇文章可能会帮到你 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="图片压缩" scheme="http://yoursite.com/tags/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>每周分享第 1 期</title>
    <link href="http://yoursite.com/2018/11/02/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
    <id>http://yoursite.com/2018/11/02/每周分享第一期/</id>
    <published>2018-11-02T12:30:32.000Z</published>
    <updated>2018-11-13T10:33:12.333Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p><h2 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h2><h3 id="1、离太阳最近的探测器器"><a href="#1、离太阳最近的探测器器" class="headerlink" title="1、离太阳最近的探测器器"></a>1、<a href="https://www.universal-sci.com/headlines/2018/10/29/parker-solar-probe-breaks-record-becomes-closest-spacecraft-to-sun" target="_blank" rel="noopener">离太阳最近的探测器器</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/fkhkfjhkhfs.2018-11-02%2015_14_29.gif" alt=""></p><p>2018年10月29日美国东部时间下午1点04分，帕克太阳探测器创造了仅距太阳表面2655万英里的记录，使其成为最接近太阳的人造物体。</p><h3 id="2、AI胜过人类律师"><a href="#2、AI胜过人类律师" class="headerlink" title="2、AI胜过人类律师"></a>2、<a href="http://phgxcuckd.bkt.clouddn.com/2018-10-31-image-17.jpg" target="_blank" rel="noopener">AI胜过人类律师</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/2018-10-31-image-16.jpg" alt=""></p><p>人工智能在某些非核心法律业务上比律师工作得更快。但公众普遍认为，在日常更复杂的法律业务中，机器无法胜任人类的工作。</p><p>但是在最近的一个拟议法律问题的比赛中（这被认为是一项高度专业并且相当复杂的工作），律师们平均花了92分钟完成任务，平均准确率达到85％。而LawGeex的神经网络只用了26秒就审查了所有五份合同，准确率为94％。</p><a id="more"></a><h3 id="3、9900万年前的甲虫"><a href="#3、9900万年前的甲虫" class="headerlink" title="3、9900万年前的甲虫"></a>3、<a href="https://www.livescience.com/63966-beetle-amber-continental-shift.html?utm_content=bufferca3f8&amp;utm_medium=social&amp;utm_source=twitter" target="_blank" rel="noopener">9900万年前的甲虫</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/120.webp" alt=""></p><p>这只甲虫在从缅甸北部一个山谷的琥珀中被发现，它是是现代碎屑栖息的甲虫的祖先，但是这种甲虫目前只生活在南美洲，</p><p><img src="http://phgxcuckd.bkt.clouddn.com/ss.webp" alt=""></p><p>这发现可能显示了南半球与缅甸之间的一些惊人联系，或许与今天不同，缅甸曾经位于南半球。</p><h3 id="4、太阳能食品"><a href="#4、太阳能食品" class="headerlink" title="4、太阳能食品"></a>4、<a href="http://www.solarfoods.fi/" target="_blank" rel="noopener">太阳能食品</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/image/blog/Solar_Foods_Pic2-768x512.jpg" alt=""></p><p>芬兰公司Solar Foods，仅使用二氧化碳，水和电，并加入少量微量元素作为生产蛋白质的原材料，Solar Foods致力于开发一种生产用于太空飞往火星的蛋白质的系统。目前Solar Foods已被欧洲航天局（ESA）的企业孵化计划选中。</p><h3 id="5、ipad-Pro"><a href="#5、ipad-Pro" class="headerlink" title="5、ipad Pro"></a>5、<a href="https://www.ifanr.com/1120532" target="_blank" rel="noopener">ipad Pro</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/dims%20%281%29.jpeg" alt=""></p><p>2018年10月30日，苹果在纽约发布第三代iPad Pro。第三代iPad Pro采用了全新设计，其最大的特点是全面屏设计的引进。屏幕尺寸共有两种规格，分别是 11 英寸以及 12.9 英寸。由于全面屏设计的引进，屏幕尺寸得到增大的同时，机身也得到了「瘦身」。根据苹果的介绍，12.9 英寸款的机身厚度从 6.9mm 削减到了 5.9mm， 总体积减少 25%。</p><p><img src="http://phgxcuckd.bkt.clouddn.com/dims%20%282%29.jpeg" alt=""></p><p>在机身设计方面，新款 iPad Pro 也一改之前的圆润，变得更加的方正，大概就类似于早前 iPhone 5 的设计。</p><h3 id="6、港珠澳大桥"><a href="#6、港珠澳大桥" class="headerlink" title="6、港珠澳大桥"></a>6、<a href="https://zh.wikipedia.org/zh/%E6%B8%AF%E7%8F%A0%E6%BE%B3%E5%A4%A7%E6%A9%8B" target="_blank" rel="noopener">港珠澳大桥</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/640.webp" alt=""></p><p>港珠澳大桥是连接香港大屿山、澳门半岛和广东省珠海市的大型跨海通道，于2009年12月15日动工，2018年5月23日完工，2018年10月24日上午9时通车；设计寿命为120年。现为世界上最长的沉管隧道及世界跨海距离最长的桥隧组合公路。</p><h3 id="7、从眼角膜的反射中提取可识别的图像"><a href="#7、从眼角膜的反射中提取可识别的图像" class="headerlink" title="7、从眼角膜的反射中提取可识别的图像"></a>7、<a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0083325" target="_blank" rel="noopener">从眼角膜的反射中提取可识别的图像</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/journal.pone.0083325.g002.png" alt=""></p><p>结合强大的人脸感知和高分辨率摄影，调查者可以挖掘隐藏的面部信息。通过放大高分辨率的脸部照片，我们能够从受试者眼睛的反射中恢复看不见的旁观者的图像。这可能有助于识别犯罪者。</p><p>以上图为例，图A的宽度为5412像素，高度为7,216像素（总共39,052,922像素）。整个面部区域（不包括头发）平均约为1200万像素，图B虹膜区域平均约占54,000像素，占整个面部区域的0.5％。图c角膜反射的人物图像宽27到36像素，高42到56像素。反射旁观者的整个面部区域平均为322个像素，或者为摄影对象的整个面部区域的约0.003％。</p><h3 id="8、月球岩石拍卖"><a href="#8、月球岩石拍卖" class="headerlink" title="8、月球岩石拍卖"></a>8、<a href="https://www.reuters.com/article/us-space-moon-auction/soviet-era-moon-fragments-could-reach-1-million-at-n-y-auction-idUSKCN1N41J9" target="_blank" rel="noopener">月球岩石拍卖</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/181102_1.jpeg" alt=""></p><p>苏富比拍卖行将要拍卖的三个月球样本，据说，这是目前已知私人手中唯一的月球岩石，有着34亿年的历史。它们来自1970年返回地球的无人苏维埃Luna-16任务。在纽约拍摄的这张照片中，它们显示在可调节镜头的玻璃下面。</p><p>这些月球岩石尺寸大约在2 x 2毫米到1 x 1毫米，在拍卖会上它们将被拍卖70万至100万美元。</p><h3 id="9、重新定义公斤"><a href="#9、重新定义公斤" class="headerlink" title="9、重新定义公斤"></a>9、<a href="https://www.scientificamerican.com/article/redefining-the-kilogram/" target="_blank" rel="noopener">重新定义公斤</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/67F7EEE7-9DEE-4794-9B4A21A34A06FD14_source.jpg" alt=""></p><p>目前我们使用的公斤是根据一个有着139年历史的铂金和铱的小圆柱来定义的，它位于巴黎附近的一个三重锁定的拱顶中。它非常重要，因此科学家几乎从不把它拿出来; 但是每次拿出来，放在秤上都会留下几个金属原子，这就意味着它不再准确。</p><p>因此，公斤以后将会通过基于基本常数的计算重新定义。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="1、30分钟理解经济机器运行原理"><a href="#1、30分钟理解经济机器运行原理" class="headerlink" title="1、30分钟理解经济机器运行原理"></a>1、<a href="https://zhuanlan.zhihu.com/p/47616503?utm_source=ZHShareTargetIDMore&amp;utm_medium=social&amp;utm_oi=50987309989888" target="_blank" rel="noopener">30分钟理解经济机器运行原理</a></h3><p>作者认为，经济虽然看起来很复杂，但其实是以简单机械的运动方式运行的。经济由几个简单的零部件，和无数次重复的简单交易组成。这些交易首先是由人的天性所驱动，因此形成了三股主要的经济动力：生产率的提高、短期债务周期、长期债务周期。</p><h3 id="2、WebAssembly-现状与实战"><a href="#2、WebAssembly-现状与实战" class="headerlink" title="2、WebAssembly 现状与实战"></a>2、<a href="https://www.ibm.com/developerworks/cn/web/wa-lo-webassembly-status-and-reality/index.html" target="_blank" rel="noopener">WebAssembly 现状与实战</a></h3><p>WebAssembly是一种新的编码方式,它提供了一条途径，以使得以各种语言编写的代码都可以以接近原生的速度在Web中运行。</p><p>本文介绍了为什么需要 WebAssembly，其原理，以及如何编写WebAssembly。</p><h3 id="3、深度学习500问"><a href="#3、深度学习500问" class="headerlink" title="3、深度学习500问"></a>3、<a href="https://github.com/scutan90/DeepLearning-500-questions" target="_blank" rel="noopener">深度学习500问</a></h3><p>这个github库以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="1、MarginNote"><a href="#1、MarginNote" class="headerlink" title="1、MarginNote"></a>1、<a href="https://www.marginnote.com/" target="_blank" rel="noopener">MarginNote</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/image/blog/marginnote.jpg" alt=""></p><p>MarginNote 是由国人开发者 Min 独立完成的一款笔记 App，其将书籍标注与思维导图和抽认卡相结合，使学习过程更加灵活。</p><h3 id="2、visualgo"><a href="#2、visualgo" class="headerlink" title="2、visualgo"></a>2、<a href="https://visualgo.net" target="_blank" rel="noopener">visualgo</a></h3><p>visualgo是一个数据结构和算法动态可视化网站，在这里你可以可视化的观察例如排序、二叉树算法的执行过程。</p><h3 id="3、ptpb"><a href="#3、ptpb" class="headerlink" title="3、ptpb"></a>3、<a href="https://ptpb.pw/" target="_blank" rel="noopener">ptpb</a></h3><p>可以在命令行终端分享文本给你的好友。</p><h3 id="4、cheat"><a href="#4、cheat" class="headerlink" title="4、cheat"></a>4、<a href="https://cheat.sh/" target="_blank" rel="noopener">cheat</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/image/blog/cheat.gif" alt=""></p><p>cheat.sh 是一个网站，更是一个实用的速查工具。</p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><h3 id="1、浅谈网络安全–xss、csrf、csp"><a href="#1、浅谈网络安全–xss、csrf、csp" class="headerlink" title="1、浅谈网络安全–xss、csrf、csp"></a>1、<a href="http://www.wangyulue.com/2018/10/25/%E6%B5%85%E8%B0%88%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-xss%E3%80%81csrf%E3%80%81csp/#more" target="_blank" rel="noopener">浅谈网络安全–xss、csrf、csp</a></h3><p>本文帮你快速了解前端网络安全的一些基础概念。</p><h2 id="新奇"><a href="#新奇" class="headerlink" title="新奇"></a>新奇</h2><h3 id="1、机械二进制的工作原理"><a href="#1、机械二进制的工作原理" class="headerlink" title="1、机械二进制的工作原理"></a>1、<a href="https://twitter.com/ThingsWork/status/1051219022988173312" target="_blank" rel="noopener">机械二进制的工作原理</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/DpauHwQWwAYLpHp.gif" alt=""></p><h3 id="2、三趾树懒"><a href="#2、三趾树懒" class="headerlink" title="2、三趾树懒"></a>2、<a href="https://www.instagram.com/p/BpgjgGNDDEJ/?utm_source=ig_web_button_share_sheet" target="_blank" rel="noopener">三趾树懒</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/image/blog/181101_1.jpg" alt=""></p><p>这些家伙8天才下树排一次便，因为在地面上它们容易遭受老虎以及鹰的袭击，所幸的是，树懒的新陈代谢非常缓慢，所以8天排一次便对他们来说不是问题。</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="1、77％的威尼斯被水淹没"><a href="#1、77％的威尼斯被水淹没" class="headerlink" title="1、77％的威尼斯被水淹没"></a>1、<a href="https://www.instagram.com/p/BplEj_lA__6/?utm_source=ig_web_button_share_sheet" target="_blank" rel="noopener">77％的威尼斯被水淹没</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/image/blog/44341446_134554794185008_8335939179629622725_n.jpg" alt=""><br>游客们在圣马可广场的洪水中跋涉，这是水城威尼斯十年来最严重的洪水；</p><h3 id="2、世界上最大的雕像"><a href="#2、世界上最大的雕像" class="headerlink" title="2、世界上最大的雕像"></a>2、<a href="https://www.instagram.com/p/Bpmzet_F64d/?utm_source=ig_web_button_share_sheet" target="_blank" rel="noopener">世界上最大的雕像</a></h3><p><img src="http://phgxcuckd.bkt.clouddn.com/image/blog/44207512_714348095601626_651976763205511483_n.jpg" alt=""><br>印度周三揭幕了这座世界上最大的雕像：古吉拉特邦一座182米高的Sardar Patel雕塑。 这座纪念碑被称为团结雕像，几乎是自由女神像的两倍。</p><h2 id="欢迎订阅"><a href="#欢迎订阅" class="headerlink" title="欢迎订阅"></a>欢迎订阅</h2><p>这篇文章同步更新在的<a href="http://www.wangyulue.com/" target="_blank" rel="noopener">个人网站</a>、<a href="https://zhuanlan.zhihu.com/wangyulue" target="_blank" rel="noopener">知乎专栏</a>、和微信公众号上，<br>微信搜索 <strong>“聪聪写字的地方”</strong> 或者扫描二维码，即可订阅。</p><p><img src="http://phgxcuckd.bkt.clouddn.com/wechat-qcode.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录过去一周，我看到的值得分享的东西。&lt;/p&gt;
&lt;h2 id=&quot;新闻&quot;&gt;&lt;a href=&quot;#新闻&quot; class=&quot;headerlink&quot; title=&quot;新闻&quot;&gt;&lt;/a&gt;新闻&lt;/h2&gt;&lt;h3 id=&quot;1、离太阳最近的探测器器&quot;&gt;&lt;a href=&quot;#1、离太阳最近的探测器器&quot; class=&quot;headerlink&quot; title=&quot;1、离太阳最近的探测器器&quot;&gt;&lt;/a&gt;1、&lt;a href=&quot;https://www.universal-sci.com/headlines/2018/10/29/parker-solar-probe-breaks-record-becomes-closest-spacecraft-to-sun&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;离太阳最近的探测器器&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://phgxcuckd.bkt.clouddn.com/fkhkfjhkhfs.2018-11-02%2015_14_29.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2018年10月29日美国东部时间下午1点04分，帕克太阳探测器创造了仅距太阳表面2655万英里的记录，使其成为最接近太阳的人造物体。&lt;/p&gt;
&lt;h3 id=&quot;2、AI胜过人类律师&quot;&gt;&lt;a href=&quot;#2、AI胜过人类律师&quot; class=&quot;headerlink&quot; title=&quot;2、AI胜过人类律师&quot;&gt;&lt;/a&gt;2、&lt;a href=&quot;http://phgxcuckd.bkt.clouddn.com/2018-10-31-image-17.jpg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AI胜过人类律师&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://phgxcuckd.bkt.clouddn.com/2018-10-31-image-16.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;人工智能在某些非核心法律业务上比律师工作得更快。但公众普遍认为，在日常更复杂的法律业务中，机器无法胜任人类的工作。&lt;/p&gt;
&lt;p&gt;但是在最近的一个拟议法律问题的比赛中（这被认为是一项高度专业并且相当复杂的工作），律师们平均花了92分钟完成任务，平均准确率达到85％。而LawGeex的神经网络只用了26秒就审查了所有五份合同，准确率为94％。&lt;/p&gt;
    
    </summary>
    
      <category term="每周分享" scheme="http://yoursite.com/categories/%E6%AF%8F%E5%91%A8%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈网络安全--xss、csrf、csp</title>
    <link href="http://yoursite.com/2018/10/25/%E6%B5%85%E8%B0%88%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-xss%E3%80%81csrf%E3%80%81csp/"/>
    <id>http://yoursite.com/2018/10/25/浅谈网络安全-xss、csrf、csp/</id>
    <published>2018-10-25T13:54:39.000Z</published>
    <updated>2018-10-25T15:20:18.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>浅谈网络安全–xss、csrf、csp </p></blockquote><a id="more"></a><h2 id="一、XSS"><a href="#一、XSS" class="headerlink" title="一、XSS"></a>一、XSS</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>跨网站指令码（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程式的安全漏洞攻击，是代码注入的一种。它允许恶意使用者将程式码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含了HTML以及使用者端脚本语言。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>我们知道留言板通常的任务就是把用户留言的内容展示出来。正常情况下，用户的留言都是正常的语言文字，留言板显示的内容也就没毛病。然而这个时候如果有人不按套路出牌，在留言内容中丢进去一行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">"hey!you are attacked"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么留言板界面的网页代码就会变成形如以下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>留言板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"board"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">"hey!you are attacked"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么别的用户加载到留言板的时候，就会出现这个弹出框；</p><h3 id="其他可以干的事情"><a href="#其他可以干的事情" class="headerlink" title="其他可以干的事情"></a>其他可以干的事情</h3><p>攻击者当然不会仅仅弹出一个alert框，既然可以插入脚本，那么也可以做一些其他的事情，例如：</p><p>1、窃取网页浏览中的cookie值，为接下来的CSRF做准备<br>2、劫持流量实现恶意跳转<br>3、注入脚本获得其他信息</p><h3 id="如何绕过一般网站的过滤规则"><a href="#如何绕过一般网站的过滤规则" class="headerlink" title="如何绕过一般网站的过滤规则"></a>如何绕过一般网站的过滤规则</h3><p>实际应用中web程序往往会通过一些过滤规则来组织代有恶意代码的用户输入被显示，以下是一些常用的xss攻击绕过过滤的一些方法：</p><p>1、大小写绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.102/xss/example2.php?name=&lt;sCript&gt;alert(&quot;hey!&quot;)&lt;/scRipt&gt;</span><br></pre></td></tr></table></figure></p><p>2、利用过滤后返回语句再次构成攻击语句来绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.102/xss/example3.php?name=&lt;sCri&lt;script&gt;pt&gt;alert(&quot;hey!&quot;)&lt;/scRi&lt;/script&gt;pt&gt;</span><br></pre></td></tr></table></figure></p><p>发现问题了吧，这个利用原理在于只过滤了一个script标签。<br>3、并不是只有script标签才可以插入代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.102/xss/example4.php?name=&lt;img src=&apos;w.123&apos; onerror=&apos;alert(&quot;hey!&quot;)&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>其他绕过方式可以参考知乎用户<a href="https://www.zhihu.com/people/90snake" target="_blank" rel="noopener">Snake</a>的<a href="https://zhuanlan.zhihu.com/p/26177815" target="_blank" rel="noopener">专栏文章</a>;</p><h3 id="防范手段"><a href="#防范手段" class="headerlink" title="防范手段"></a>防范手段</h3><p>1、既然是代码注入攻击，那我们可以对敏感字符做转义，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    str = str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>);</span><br><span class="line">    str = str.replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>);</span><br><span class="line">    str = str.replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line">    str = str.replace(<span class="regexp">/"/g</span>, <span class="string">"&amp;quto;"</span>);</span><br><span class="line">    str = str.replace(<span class="regexp">/'/g</span>, <span class="string">"&amp;##39;"</span>);</span><br><span class="line">    str = str.replace(<span class="regexp">/`/g</span>, <span class="string">"&amp;##96;"</span>);</span><br><span class="line">    str = str.replace(<span class="regexp">/\//g</span>, <span class="string">"&amp;##x2F;"</span>);</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、CSP（接下来会谈到）</p><p>3、过滤诸如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;a&gt;</code> 标签</p><p>3、为防止cookie盗用，我们还可以在Http响应头设置<code>HttpOnly</code></p><h2 id="二、CSP"><a href="#二、CSP" class="headerlink" title="二、CSP"></a>二、CSP</h2><p>上文提到了可以用CSP来防止XSS攻击，那CSP到底是什么呢？</p><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>内容安全策略 (CSP) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段；</p><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p>前段时间王二想在知乎控制台下插入一段脚本，如下：</p><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1810/2.png?raw=true" alt="Alt text"></p><p>则会提示报错，而在有些网站(百度，Google)不会报错；</p><p>这是因为在知乎遵循了<code>CSP</code>,在网站的http头部定义了 <code>Content-Security-Policy</code>：</p><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1810/1.png?raw=true" alt="Alt text"></p><p><strong>CSP 本质上是建立白名单，规定了浏览器只能够执行特定来源的代码;</strong>那么即使发生了xss攻击，也不会加载来源不明的第三方脚本；</p><h2 id="三、CSRF"><a href="#三、CSRF" class="headerlink" title="三、CSRF"></a>三、CSRF</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。跟跨网站指令码（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p><h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><h4 id="1、同一个浏览器下"><a href="#1、同一个浏览器下" class="headerlink" title="1、同一个浏览器下"></a>1、同一个浏览器下</h4><p>假如一家银行用以执行转帐操作的URL地址如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</span><br></pre></td></tr></table></figure><p>那么，一个恶意攻击者可以在另一个网站上放置如下代码： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。</p><h4 id="2、结合xss使用"><a href="#2、结合xss使用" class="headerlink" title="2、结合xss使用"></a>2、结合xss使用</h4><p>上文说了xss可以结合csrf使用；</p><p>在通过xss获得目标用户的cookie后，打开目标网站的登录界面，调出Chrome控制台的Application面板，调至cookie选项卡：</p><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1810/3.png?raw=true" alt="Alt text"></p><p>再把目标用户的cookie填进去，再把过期时间调长一些，</p><p>完成之后再次刷新页面，发现已经不是之前的登录界面了，而是登录后的界面。至此，一个从cookie窃取到利用的过程就已完成。</p><h3 id="防范手段-1"><a href="#防范手段-1" class="headerlink" title="防范手段"></a>防范手段</h3><p>对于上面说的第一个例子：</p><p>1、检查Referer字段：HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。<br>2、添加校验token</p><p>对于上面说的第二个例子，则做好防止xss攻击的相应措施。</p><p>参考文章：</p><p>知乎用户<a href="https://www.zhihu.com/people/90snake" target="_blank" rel="noopener">Snake</a>的<a href="https://zhuanlan.zhihu.com/p/26177815" target="_blank" rel="noopener">专栏文章</a></p><p><a href="https://www.wikiwand.com/zh-hans/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC" target="_blank" rel="noopener">wikiwand xss</a></p><p><a href="https://www.wikiwand.com/zh-hans/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="noopener">wikiwand csrf</a></p><p><a href="https://yuchengkai.cn/docs/zh/frontend/safety.html#xss" target="_blank" rel="noopener">InterviewMap</a></p><p><a href="https://div.io/topic/1669" target="_blank" rel="noopener">‘Coocier’的开发小记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;浅谈网络安全–xss、csrf、csp &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>爱笑的宝宝</title>
    <link href="http://yoursite.com/2018/10/02/%E7%88%B1%E7%AC%91%E7%9A%84%E5%AE%9D%E5%AE%9D/"/>
    <id>http://yoursite.com/2018/10/02/爱笑的宝宝/</id>
    <published>2018-10-01T17:16:30.000Z</published>
    <updated>2018-10-25T13:48:50.994Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>爱笑的宝宝，心善的宝宝，可爱的宝宝 </p></blockquote><a id="more"></a><p>偶尔也不能快乐的生活着，<br>偶尔也会有木讷，<br>失眠快成常态。</p><p>或许生活的本色如此，<br>或许应该静下来沉淀浮杂。</p><p>这些都太糟糕，<br>全不是我想要。</p><p>我想要每天有所收获，<br>我想要每天生机勃勃，<br>我想要湛蓝的天，……</p><p>慢着，<br>干脆什么都不要，<br>什么都别想，<br>任生命燃烧，<br>任时光流逝，<br>任天气变幻莫测，<br>抓不住的就不去抓，<br>得不到的就不去想，<br>一路走来，花自然会开</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;爱笑的宝宝，心善的宝宝，可爱的宝宝 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="王二说" scheme="http://yoursite.com/categories/%E7%8E%8B%E4%BA%8C%E8%AF%B4/"/>
    
    
      <category term="她" scheme="http://yoursite.com/tags/%E5%A5%B9/"/>
    
  </entry>
  
  <entry>
    <title>《醉汉的脚步》中有趣的概率问题</title>
    <link href="http://yoursite.com/2018/08/06/%E3%80%8A%E9%86%89%E6%B1%89%E7%9A%84%E8%84%9A%E6%AD%A5%E3%80%8B%E4%B8%AD%E6%9C%89%E8%B6%A3%E7%9A%84%E6%A6%82%E7%8E%87%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/08/06/《醉汉的脚步》中有趣的概率问题/</id>
    <published>2018-08-06T15:12:40.000Z</published>
    <updated>2018-08-10T07:27:25.682Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有些概率上的问题，直觉上不可能，但却切切实实的发生。以下王二将分享一些书中有趣的概率问题。 </p></blockquote><a id="more"></a><p>1、生日问题</p><p>如果希望一群人中有某两个人在同一天生日的可能性大于50%，这个群体需要多少人？事实上，只需要23个人就够了。</p><p>2、两女儿问题</p><p>假设一名母亲怀上了一对双胞胎，则两个小孩都是女孩的概率是多少？概率是1/4。</p><p>3、两女儿问题（进阶一）</p><p>假设一名母亲怀上了一对双胞胎，其中一名是女孩，则另一名小孩都是女孩的概率是多少？概率是1/3。</p><p>4、三门问题</p><p>你参加一场活动，面对三张门，一张后面是iPhoneX，另外两张后面是一个西瓜，你有机会选中一张门并获得其背后的东西。当你选定一扇门后，主持人将打开另外两张门的一张门（主持人知道各个门后面是什么东西），门后是一个西瓜，然后问你：“你要更换你的选择，去选另外一张没打开的门吗？”</p><p>请问：现在是更换选择获得iPhoneX的概率大，还是不更换选择获得iPhoneX的概率大，还是一样大？答案是更换选择获得iPhoneX的概率大，其概率是2/3；</p><p>5、两女儿问题（进阶二）</p><p>假设一名母亲怀上了一对双胞胎，其中一名是叫王美丽的女孩，则另一名小孩都是女孩的概率是多少？概率是1/2。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;有些概率上的问题，直觉上不可能，但却切切实实的发生。以下王二将分享一些书中有趣的概率问题。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="王二说" scheme="http://yoursite.com/categories/%E7%8E%8B%E4%BA%8C%E8%AF%B4/"/>
    
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>JS 检测网络带宽</title>
    <link href="http://yoursite.com/2018/07/17/JS-%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C%E5%B8%A6%E5%AE%BD/"/>
    <id>http://yoursite.com/2018/07/17/JS-检测网络带宽/</id>
    <published>2018-07-17T10:27:34.000Z</published>
    <updated>2018-07-20T15:45:51.209Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近项目上有需求要检测网络的带宽，网上找了不少解决方案，以下王二来做一个整理 </p></blockquote><a id="more"></a><h3 id="1、方法一"><a href="#1、方法一" class="headerlink" title="1、方法一"></a>1、方法一</h3><p>第一种思路是 <strong>加载一张图片，通过的加载时长和图片的大小来计算出网络带宽</strong> </p><p>有了这个思路，我们可以参考如下代码（部分参考自 github 上的<a href="https://gist.github.com/debloper/7296289" target="_blank" rel="noopener">debloper/bandwidth.js</a>）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">measureBW</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> startTime, endTime, fileSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState === <span class="number">2</span>)&#123;</span><br><span class="line">            startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">            endTime = <span class="built_in">Date</span>.now();</span><br><span class="line">            fileSize = xhr.responseText.length;</span><br><span class="line">            <span class="keyword">var</span> speed = fileSize  / ((endTime - startTime)/<span class="number">1000</span>) / <span class="number">1024</span>;</span><br><span class="line">            fn &amp;&amp; fn(<span class="built_in">Math</span>.floor(speed))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.open(<span class="string">"GET"</span>, <span class="string">"https://upload.wikimedia.org/wikipedia/commons/5/51/Google.png"</span>, <span class="literal">true</span>);</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">measureBW(<span class="function">(<span class="params">speed</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(speed + <span class="string">" KB/sec"</span>);  <span class="comment">//215 KB/sec</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2、方法二"><a href="#2、方法二" class="headerlink" title="2、方法二"></a>2、方法二</h3><p>但是考虑到http请求需要建立连接，以及等待响应，这些过程也会消耗一些时间，所以以上的方法可能不会准确的检测出网络带宽。</p><p>我们可以同时发出多次请求，来减少http请求建立连接，等待响应的影响，参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">measureBW</span>(<span class="params">fn,time</span>) </span>&#123;</span><br><span class="line">    time = time || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> startTime, endTime, fileSize;</span><br><span class="line">    <span class="keyword">var</span> count = time ;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">measureBWSimple</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!fileSize)&#123;</span><br><span class="line">                    fileSize = xhr.responseText.length;</span><br><span class="line">                &#125;</span><br><span class="line">                count --;</span><br><span class="line">                <span class="keyword">if</span>(count&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    endTime = <span class="built_in">Date</span>.now();</span><br><span class="line">                    <span class="keyword">var</span> speed = fileSize * time  / ((endTime - startTime)/<span class="number">1000</span>) / <span class="number">1024</span>;</span><br><span class="line">                    fn &amp;&amp; fn(<span class="built_in">Math</span>.floor(speed));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.open(<span class="string">"GET"</span>, <span class="string">"https://upload.wikimedia.org/wikipedia/commons/5/51/Google.png"</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125;</span><br><span class="line">    startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x = time;x&gt;<span class="number">0</span>;x--)&#123;</span><br><span class="line">        measureBWSimple()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">measureBW(<span class="function">(<span class="params">speed</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(speed + <span class="string">" KB/sec"</span>);  <span class="comment">//913 KB/sec</span></span><br><span class="line">&#125;,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>经王二测试，第二种方法得到的结果要比方法一得到的结果明显高出不少。</p><blockquote><p>事实上，前两种还要额外设置 http 请求头来禁止使用本地缓存（开发测试下可以在控制台Network面板下点击禁用缓存），要不然图片加载一次后就不会在去服务器加载，自然也测不出网络的带宽.</p></blockquote><h3 id="3、方法三"><a href="#3、方法三" class="headerlink" title="3、方法三"></a>3、方法三</h3><p>在 <a href="https://www.chromestatus.com/feature/6338383617982464" target="_blank" rel="noopener">Chrome65+</a> 的版本中，添加了一些原生的方法可以检测有关设备正在使用的连接与网络进行通信的信息。</p><p>参考如下代码，我们就可以检测到网络带宽：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">measureBW</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigator.connection.downlink;</span><br><span class="line">&#125;</span><br><span class="line">measureBW() ;</span><br></pre></td></tr></table></figure><p><code>navigator.connection.downlink</code> 会返回以（兆比特/秒）为单位的有效带宽估计值(参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation" target="_blank" rel="noopener">MDN</a>),这和我们常用的（KB/sec）有所差别，所以我们需要再做一下单位换算，参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">measureBW</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> navigator.connection.downlink * <span class="number">1024</span> /<span class="number">8</span>;   <span class="comment">//单位为KB/sec</span></span><br><span class="line">&#125;</span><br><span class="line">measureBW() ;</span><br></pre></td></tr></table></figure><p>我们还可以通过 <code>navigator.connection</code> 上的 <code>change</code> 事件来监听网络带宽的变化：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.connection.addEventListener(<span class="string">'change'</span>, measureBW());</span><br></pre></td></tr></table></figure></p><p>参考文章：</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation" target="_blank" rel="noopener">MDN NetworkInformation</a><br><a href="https://googlechrome.github. io/samples/network-information/" target="_blank" rel="noopener">Network Information API Sample</a><br><a href="https://blog.csdn.net/foart/article/details/8193288" target="_blank" rel="noopener">Kbps、KB、Mbps单位换算</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;最近项目上有需求要检测网络的带宽，网上找了不少解决方案，以下王二来做一个整理 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端备忘" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>奥斯本检核表法</title>
    <link href="http://yoursite.com/2018/06/03/%E5%A5%A5%E6%96%AF%E6%9C%AC%E6%A3%80%E6%A0%B8%E8%A1%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/03/奥斯本检核表法/</id>
    <published>2018-06-03T02:54:45.000Z</published>
    <updated>2018-12-26T09:08:51.445Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近看到一个很有意思的的思考问题的方法–奥斯本检核表法</p></blockquote><a id="more"></a><h2 id="奥斯本检核表法是以该方法的发明者奥斯本命名的，它会引导个人在创新的过程中对照9个维度75个问题进行思考，启迪思路，开拓想象空间，打破固有的思维模式。"><a href="#奥斯本检核表法是以该方法的发明者奥斯本命名的，它会引导个人在创新的过程中对照9个维度75个问题进行思考，启迪思路，开拓想象空间，打破固有的思维模式。" class="headerlink" title="奥斯本检核表法是以该方法的发明者奥斯本命名的，它会引导个人在创新的过程中对照9个维度75个问题进行思考，启迪思路，开拓想象空间，打破固有的思维模式。"></a>奥斯本检核表法是以该方法的发明者奥斯本命名的，它会引导个人在创新的过程中对照9个维度75个问题进行思考，启迪思路，开拓想象空间，打破固有的思维模式。</h2><p>以下是奥斯本的检核表</p><h3 id="一、能否他用"><a href="#一、能否他用" class="headerlink" title="一、能否他用"></a>一、能否他用</h3><p>现有的事物有无其他用途；保持不变能否扩大用途；稍加改变有无其他用途。</p><p>包括三个问题：</p><ol><li>有无新的用途？</li><li>是否有新的使用方法？</li><li>可否改变现有的使用方法？</li></ol><h3 id="二、能否借用"><a href="#二、能否借用" class="headerlink" title="二、能否借用"></a>二、能否借用</h3><p>能否引入其他的创造性设想；能否模仿别的东西；能否从其他领域、产品、方案中引入新的元素、材料、造型、原理、工艺、思路。</p><p>包括五个问题：</p><ol><li>有无类似的东西？</li><li>利用类比能否产生新观念？</li><li>过去有无类似的问题？</li><li>可否模仿？</li><li>能否超越？</li></ol><h3 id="三、能否改变"><a href="#三、能否改变" class="headerlink" title="三、能否改变"></a>三、能否改变</h3><p>现有事物能否做些改变，如颜色、声音、味道、样式、花色、音响、品种、意义、制造方法；改变后效果如何？</p><p>包括八个问题：</p><ol><li>可否改变功能？</li><li>可否改变颜色？</li><li>可否改变形状？</li><li>可否改变运动？</li><li>可否改变气味？</li><li>可否改变音响？</li><li>可否改变外形？</li><li>是否还有其他改变的可能性？</li></ol><h3 id="四、能否扩大"><a href="#四、能否扩大" class="headerlink" title="四、能否扩大"></a>四、能否扩大</h3><p>1、现有的事物可否扩大适用范围；能否增加使用功能；能否添加零部件，延长它的使用寿命，增加长度、厚度、强度、频率、速度、数量、价值。</p><p>包括十二个问题：</p><ol><li>可否增加些什么？</li><li>可否附加些什么？</li><li>可否增加使用时间？</li><li>可否增加频率？</li><li>可否增加尺寸？</li><li>可否增加强度？</li><li>可否提高性能？</li><li>可否增加新成分？</li><li>可否加倍？</li><li>可否扩大若干倍？</li><li>可否放大？</li><li>可否夸大？</li></ol><p>五、能否缩小</p><p>现有事物能否体积变小、长度变短、重量变轻、厚度变薄以及拆分或省略某些部分（简单化）？能否浓缩化、省力化、方便化。</p><p>包括十二个问题：</p><ol><li>可否减少些什么？</li><li>可否密集？</li><li>可否压缩？</li><li>可否浓缩？</li><li>可否聚合？</li><li>可否微型化？</li><li>可否缩短？</li><li>可否变窄？</li><li>可否去掉？</li><li>可否分割？</li><li>可否减轻？</li><li>可否变成流线型？</li></ol><p>六、能否代替</p><p>现有事物能否用其他材料、元件、结构、力、设备、方法、符号、声音等代替。</p><p>包括十个问题：</p><ol><li>可否代替？</li><li>用什么代替？</li><li>还有什么其他的排列？</li><li>还有什么其他的成分？</li><li>还有什么其他的材料？</li><li>还有什么其他的过程？</li><li>还有什么其他的能源？</li><li>还有什么其他的颜色？</li><li>还有什么其他的音响？</li><li>还有什么其他的照明？</li></ol><p>七、能否变换</p><p>现有事物能否变换排列顺序、位置、时间、速度、计划、型号；内部元件可否交换。</p><p>包括八个问题：</p><ol><li>可否变换？</li><li>有无可互换的成分？</li><li>可否变换模式？</li><li>可否变换布置顺序？</li><li>可否变换操作工序？</li><li>可否变换因果关系？</li><li>可否变换速度或者频率？</li><li>可否变换工作规范？</li></ol><h3 id="八、能否颠倒"><a href="#八、能否颠倒" class="headerlink" title="八、能否颠倒"></a>八、能否颠倒</h3><p>现有的事物能否从内外、上下、左右、前后、横竖、主次、正负、因果等相反的角度颠倒过来用。</p><p>包括七个问题：</p><ol><li>可否颠倒？</li><li>可否颠倒正负？</li><li>可否颠倒正反？</li><li>可否前后颠倒？</li><li>可否上下颠倒？</li><li>可否颠倒位置？</li><li>可否颠倒作用？</li></ol><h3 id="九、能否组合"><a href="#九、能否组合" class="headerlink" title="九、能否组合"></a>九、能否组合</h3><p>能否进行原理组合、材料组合、部件组合、形状组合、功能组合、目的组合。</p><p>包括十个问题：</p><ol><li>可否重新组合？</li><li>可否尝试混合？</li><li>可否尝试合成？</li><li>可否尝试配合？</li><li>可否尝试协调？</li><li>可否尝试配套？</li><li>可否把物体组合？</li><li>可否把目的组合？</li><li>可否把特性组合？</li><li>可否把观念组合？</li></ol><p>如何思考问题的方法，这到了元知识的范畴。</p><p>就王二自身而言，把现在一些事情套进奥斯本检核表里来思考，脑子里确实能够蹦出不少全新而且巧妙的点子，让王二能够全面的发散的思考一个问题。希望这对你也会有一些帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;最近看到一个很有意思的的思考问题的方法–奥斯本检核表法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="文学" scheme="http://yoursite.com/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="读书" scheme="http://yoursite.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>《你不知道的Javascript中卷》中有趣的知识点一</title>
    <link href="http://yoursite.com/2018/04/25/%E3%80%8A%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript%E4%B8%AD%E5%8D%B7%E3%80%8B%E4%B8%AD%E6%9C%89%E8%B6%A3%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80/"/>
    <id>http://yoursite.com/2018/04/25/《你不知道的javascript中卷》中有趣的知识点一/</id>
    <published>2018-04-25T06:05:58.000Z</published>
    <updated>2018-04-27T09:18:04.245Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近在看《你不知道的Javascript中卷》，里面有不少有趣的知识点和新鲜货，在这里做一个分享 </p></blockquote><a id="more"></a><h3 id="一、类数组转换"><a href="#一、类数组转换" class="headerlink" title="一、类数组转换"></a>一、类数组转换</h3><p>一些 DOM 查询操作会返回 DOM 元素列表，它们并非真正意义上的数组，但十分类似。另一个例子是通过 <code>arguments</code> 对象（类数组）将函数的参数,这时候我们可以通过如下方式将这些类数组转换为数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过工具函数slice();</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call( <span class="built_in">arguments</span> );</span><br><span class="line"><span class="comment">//或者ES6语法Array.from();</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from( <span class="built_in">arguments</span> );</span><br></pre></td></tr></table></figure><h3 id="二、-运算符"><a href="#二、-运算符" class="headerlink" title="二、 . 运算符"></a>二、 <code>.</code> 运算符</h3><p>对于 <code>.</code> 运算符我们需要给予特别注意，因为它是一个有效的数字字符，会被优先识别为数字常量的一部分，然后才是对象属性访问运算符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无效语法：</span></span><br><span class="line"><span class="number">42.</span>toFixed( <span class="number">3</span> ); <span class="comment">// SyntaxError</span></span><br><span class="line"><span class="comment">// 下面的语法都有效：</span></span><br><span class="line">(<span class="number">42</span>).toFixed( <span class="number">3</span> ); <span class="comment">// "42.000" </span></span><br><span class="line"><span class="number">0.42</span>.toFixed( <span class="number">3</span> ); <span class="comment">// "0.420"</span></span><br><span class="line"><span class="number">42.</span>.toFixed( <span class="number">3</span> ); <span class="comment">// "42.000"</span></span><br><span class="line"><span class="number">42</span> .toFixed(<span class="number">3</span>); <span class="comment">// "42.000"（注意其中的空格）</span></span><br></pre></td></tr></table></figure><h3 id="三、0-1-0-2-0-3-？"><a href="#三、0-1-0-2-0-3-？" class="headerlink" title="三、0.1 + 0.2 === 0.3 ？"></a>三、0.1 + 0.2 === 0.3 ？</h3><p>在js中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>关于这个问题，感兴趣的同学可以读读王二的转载的一篇文章<a href="http://www.wangyulue.com/2017/11/06/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E6%8A%93%E4%BD%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%B0%8F%E5%B0%BE%E5%B7%B4-JS%E6%B5%AE%E7%82%B9%E6%95%B0%E9%99%B7%E9%98%B1%E5%8F%8A%E8%A7%A3%E6%B3%95/" target="_blank" rel="noopener">抓住数据的小尾巴 - JS浮点数陷阱及解法</a>，由于 JavaScript 中的数字类型是基于 IEEE754 标准来实现的，所以二进制浮点数中的 0.1 和 0.2 相加并不是十分精确，这时候可以使用 <code>Number.EPSILON</code> 来比较两个数字是否相等（在指定的误差范围内）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numbersCloseEnoughToEqual</span>(<span class="params">n1,n2</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs( n1 - n2 ) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.3</span>;</span><br><span class="line">numbersCloseEnoughToEqual( a, b );   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="四、null-与-undefined"><a href="#四、null-与-undefined" class="headerlink" title="四、null 与 undefined"></a>四、<code>null</code> 与 <code>undefined</code></h3><p><code>null</code> 是一个特殊关键字，不是标识符，我们不能将其当作变量来使用和赋值。然而 <code>undefined</code> 却是一个标识符，可以被当作变量来使用和赋值。</p><h3 id="五、isNaN"><a href="#五、isNaN" class="headerlink" title="五、isNaN()"></a>五、<code>isNaN()</code></h3><p>我们可以使用全局工具函数 <code>window.isNaN()</code> 和 ES6中的 <code>Number.isNaN()</code> 来判断一个值是不是 <code>NaN</code>,但这两者也有区别，参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isNaN( <span class="literal">NaN</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN( <span class="string">"wanger"</span> ); <span class="comment">// false </span></span><br><span class="line"><span class="built_in">Number</span>.isNaN( <span class="number">5</span> ); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.isNaN( <span class="literal">NaN</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">window</span>.isNaN( <span class="string">"wanger"</span> ); <span class="comment">// true </span></span><br><span class="line"><span class="built_in">window</span>.isNaN( <span class="number">5</span> ); <span class="comment">// false</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">很明显 "wanger" 不是一个数字 ，它也不是 NaN 。但是 `</span><span class="built_in">window</span>.isNaN( <span class="string">"wanger"</span> )<span class="string">`显示为true, 这个 bug自 JavaScript 问世以来就一直存在。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 六、`</span><span class="built_in">Object</span>.prototype.toString<span class="string">` 可以查看类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] ); <span class="comment">// "[object Array]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call( <span class="regexp">/regex-literal/i</span> ); <span class="comment">// "[object RegExp]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call( <span class="literal">null</span> ); <span class="comment">// "[object Null]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call( <span class="literal">undefined</span> ); <span class="comment">//"[object Undefined]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call( <span class="string">"abc"</span> ); <span class="comment">// "[object String]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call( <span class="number">42</span> ); <span class="comment">// "[object Number]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call( <span class="literal">true</span> ); <span class="comment">// "[object Boolean]"</span></span><br></pre></td></tr></table></figure><h3 id="七、JSON-字符串化"><a href="#七、JSON-字符串化" class="headerlink" title="七、JSON 字符串化"></a>七、JSON 字符串化</h3><p><code>undefined</code> 、<code>function</code> 、<code>symbol</code> （ES6+）和包含循环引用（对象之间相互引用，形成一个无限循环）的对象都不符合 JSON 结构标准，支持 JSON 的语言无法处理它们。<br>JSON.stringify(..) 在对象中遇到 <code>undefined</code> 、<code>function</code> 和 <code>symbol</code> 时会自动将其忽略，在数组中则会返回 <code>null</code>（以保证单元位置不变）。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify([<span class="number">1</span>,<span class="literal">undefined</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">4</span>]);   <span class="comment">// "[1,null,null,4]"</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">a</span>:<span class="number">2</span>, <span class="attr">b</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; &#125;);  <span class="comment">// "&#123;"a":2&#125;"</span></span><br></pre></td></tr></table></figure><h3 id="八、假值对象"><a href="#八、假值对象" class="headerlink" title="八、假值对象"></a>八、假值对象</h3><p>先看一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.all)  <span class="comment">//会返回页面上的所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.all)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"test"</span>)    <span class="comment">//不会答应 "test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最常见的假值对象是 <code>document.all</code> ，它是一个类数组对象，包含了页面上的所有元素，由 DOM（而不是 JavaScript 引擎）提供<br>给 JavaScript 程序使用。它以前曾是一个真正意义上的对象，布尔强制类型转换结果为 <code>true</code> ，不过现在它是一个假值对象。</p><p>虽然 JavaScript 代码中会出现假值对象，但它实际上并不属于 JavaScript 语言的范畴。但这里仍然有必要注意一下。</p><p>需要注意的是，为我们经常通过将 <code>document.all</code> 强制类型转换为布尔值（比如在 if 语句中）来判断浏览器是<br>否是老版本的 IE，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.all) &#123; <span class="comment">/* it's IE */</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="九、显式解析数字字符串"><a href="#九、显式解析数字字符串" class="headerlink" title="九、显式解析数字字符串"></a>九、显式解析数字字符串</h3><p>解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字。但解析和转换两者之间还是有明显的差别，参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"42"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"42px"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>( a ); <span class="comment">// 42</span></span><br><span class="line"><span class="built_in">parseInt</span>( a ); <span class="comment">// 42</span></span><br><span class="line"><span class="built_in">Number</span>( b ); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>( b ); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>解析允许字符串中含有非数字字符，解析按从左到右的顺序，如果遇到非数字字符就停止。而转换不允许出现非数字字符，否则会失败并返回 <code>NaN</code> 。</p><p>需要注意的是 <code>parseInt()</code> 针对的是字符串值。向 <code>parseInt()</code> 传递数字和其他类型的参数是没有用的，比如 <code>true</code>、<code>function(){...}</code> 和 <code>[1,2,3]</code>，因为非字符串参数会首先被强制类型转换为字符串，所以如下的代码就没有问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>( <span class="keyword">new</span> <span class="built_in">String</span>( <span class="string">"42"</span>) );  <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><h3 id="十、-和-amp-amp"><a href="#十、-和-amp-amp" class="headerlink" title="十、|| 和 &amp;&amp;"></a>十、<code>||</code> 和 <code>&amp;&amp;</code></h3><p><code>||</code> 和 <code>&amp;&amp;</code> 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值，参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"abc"</span>; </span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">a || b; <span class="comment">// 42 </span></span><br><span class="line">a &amp;&amp; b; <span class="comment">// "abc"</span></span><br><span class="line">c || b; <span class="comment">// "abc"</span></span><br><span class="line">c &amp;&amp; b; <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>在 C 和 PHP 中，上例的结果是 <code>true</code> 或 <code>false</code> ，在 JavaScript（以及 Python和 Ruby）中却是某个操作数的值。</p><h3 id="十一、假值的相等比较"><a href="#十一、假值的相等比较" class="headerlink" title="十一、假值的相等比较"></a>十一、假值的相等比较</h3><p><code>==</code> 中的隐式强制类型转换最为人诟病的地方是假值的相等比较。</p><p>下面分别列出了常规和非常规的情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"0"</span> == <span class="literal">null</span>; <span class="comment">// false</span></span><br><span class="line"><span class="string">"0"</span> == <span class="literal">undefined</span>; <span class="comment">// false </span></span><br><span class="line"><span class="string">"0"</span> == <span class="literal">false</span>; <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="string">"0"</span> == <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line"><span class="string">"0"</span> == <span class="number">0</span>; <span class="comment">// true </span></span><br><span class="line"><span class="string">"0"</span> == <span class="string">""</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">null</span>; <span class="comment">// false </span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">undefined</span>; <span class="comment">// false </span></span><br><span class="line"><span class="literal">false</span> == <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line"><span class="literal">false</span> == <span class="number">0</span>; <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">""</span>; <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="literal">false</span> == []; <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="literal">false</span> == &#123;&#125;; <span class="comment">// false</span></span><br><span class="line"><span class="string">""</span> == <span class="literal">null</span>; <span class="comment">// false</span></span><br><span class="line"><span class="string">""</span> == <span class="literal">undefined</span>; <span class="comment">// false </span></span><br><span class="line"><span class="string">""</span> == <span class="literal">NaN</span>; <span class="comment">// false </span></span><br><span class="line"><span class="string">""</span> == <span class="number">0</span>; <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="string">""</span> == []; <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="string">""</span> == &#123;&#125;; <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">null</span>; <span class="comment">// false </span></span><br><span class="line"><span class="number">0</span> == <span class="literal">undefined</span>; <span class="comment">// false </span></span><br><span class="line"><span class="number">0</span> == <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == []; <span class="comment">// true -- 晕！</span></span><br><span class="line"><span class="number">0</span> == &#123;&#125;; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>为了更详尽的展现假值的相等比较的一些特殊情况，github 上的<a href="https://github.com/dorey" target="_blank" rel="noopener">@dorey</a>做了一个<a href="https://dorey.github.io/JavaScript-Equality-Table/" target="_blank" rel="noopener">JavaScript-Equality-Table</a>如下图：</p><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1804/3.png?raw=true" alt="Alt text"></p><p>其中绿色表示为 <code>true</code> ,白色表示为 <code>false</code>;</p><p>资源地址<a href="https://pan.baidu.com/s/1PTYTPYN10Vl46k6wl8WWqQ" target="_blank" rel="noopener">戳这里</a>  密码:j9gp</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;最近在看《你不知道的Javascript中卷》，里面有不少有趣的知识点和新鲜货，在这里做一个分享 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>记一次ios9的适配bug</title>
    <link href="http://yoursite.com/2018/04/25/%E8%AE%B0%E4%B8%80%E6%AC%A1ios9%E7%9A%84%E9%80%82%E9%85%8Dbug/"/>
    <id>http://yoursite.com/2018/04/25/记一次ios9的适配bug/</id>
    <published>2018-04-25T01:08:54.000Z</published>
    <updated>2018-04-25T02:11:45.050Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近项目要上线，客户五月初等着要用，然后用ipad的ios9测试兼容性的时候又出了一些问题 </p></blockquote><a id="more"></a><p>然后排查发现是因为项目代码里使用了 <code>es2017</code> 的语法 <code>Object.entries()</code>,而 vue cli 配置的 <code>.babelrc</code> 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [<span class="string">"env"</span>, &#123;</span><br><span class="line">      <span class="attr">"modules"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"targets"</span>: &#123;</span><br><span class="line">        <span class="attr">"browsers"</span>: [<span class="string">"&gt; 1%"</span>, <span class="string">"last 2 versions"</span>, <span class="string">"not ie &lt;= 8"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">"stage-2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"transform-vue-jsx"</span>, <span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这并不会处理 <code>es2017</code> 的语法。</p><p>经过王二一番分析，于是有了如下五种解决方案：</p><h3 id="1、改变遍历语法"><a href="#1、改变遍历语法" class="headerlink" title="1、改变遍历语法"></a>1、改变遍历语法</h3><p>后台给我的数据结构类似如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">'姓名'</span>:<span class="string">'王二'</span>,</span><br><span class="line">    <span class="string">'年龄'</span>:<span class="number">23</span>,</span><br><span class="line">    <span class="string">'爱好'</span>:<span class="string">'敲代码'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我需要将这组对象的 key 和 value 都遍历出来：</p><p>我开始在vue里是这样遍历的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"i in data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;Object.entries(i)[0][0]&#125;&#125;:<span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;Object.entries(i)[0][1]&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改成如下遍历：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"i in data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"(j,k) in i"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;k&#125;&#125;:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;j&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题也就解决了。</p><h3 id="2、让后台改变数据结构"><a href="#2、让后台改变数据结构" class="headerlink" title="2、让后台改变数据结构"></a>2、让后台改变数据结构</h3><p>王二认为，其实以上的数据结构并不合理，如果改成如下这种写法的话，前端遍历就方便多了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    key: <span class="string">'姓名'</span>,</span><br><span class="line">    value: <span class="string">'王二'</span>   </span><br><span class="line">&#125;,&#123;</span><br><span class="line">    key: <span class="string">'年龄'</span>,</span><br><span class="line">    value: <span class="number">23</span>   </span><br><span class="line">&#125;&#123;</span><br><span class="line">    key: <span class="string">'爱好'</span>,</span><br><span class="line">    value: <span class="string">'敲代码'</span>   </span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="3、写一个-Object-entries-的polyfill"><a href="#3、写一个-Object-entries-的polyfill" class="headerlink" title="3、写一个 Object.entries() 的polyfill"></a>3、写一个 <code>Object.entries()</code> 的polyfill</h3><p>没有 <code>Object.entries()</code> 这个语法，我们就来创造一个呗，方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.entries = <span class="function"><span class="params">x</span> =&gt;</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(x).reduce(<span class="function">(<span class="params">y, z</span>) =&gt;</span></span><br><span class="line">        y.push([z, x[z]]) &amp;&amp; y, []);</span><br></pre></td></tr></table></figure><p>此方法参考自 stackoverflow 下 Randy 的<a href="https://stackoverflow.com/questions/35090153/babel-support-for-object-entries" target="_blank" rel="noopener">回答</a></p><h3 id="4、修改-babelrc-配置文件"><a href="#4、修改-babelrc-配置文件" class="headerlink" title="4、修改 .babelrc 配置文件"></a>4、修改 <code>.babelrc</code> 配置文件</h3><p>听 <code>stackoverflow</code> 里的大神<a href="https://stackoverflow.com/questions/35090153/babel-support-for-object-entries" target="_blank" rel="noopener">说</a>，我们可以修改 <code>.babelrc</code> 配置文件来解决这个问题，修改如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"transform-runtime"</span>],</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2017"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是王二尝试了一下，没有成功。后来在github上发现了这个<a href="https://github.com/bettiolo/babel-preset-es2017/issues/37" target="_blank" rel="noopener">issue</a>，似乎 <code>babel-preset-es2017</code> 也不会支持 <code>Object.entries()</code> ，于是就此打住。</p><h3 id="5、引用-core-js-fn-object-entries"><a href="#5、引用-core-js-fn-object-entries" class="headerlink" title="5、引用 core-js/fn/object/entries"></a>5、引用 <code>core-js/fn/object/entries</code></h3><p>经 <code>stackoverflow</code> 里的大神<a href="https://stackoverflow.com/questions/35090153/babel-support-for-object-entries" target="_blank" rel="noopener">提醒</a>，加上 <code>require(&#39;core-js/fn/object/entries&#39;);</code> 就能使用 <code>Object.entries</code> 了，试了试，还真管用。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;最近项目要上线，客户五月初等着要用，然后用ipad的ios9测试兼容性的时候又出了一些问题 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端备忘" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>通过js动态插入js和css代码</title>
    <link href="http://yoursite.com/2018/04/23/js%E5%8A%A8%E6%80%81%E6%8F%92%E5%85%A5js%E5%92%8Ccss/"/>
    <id>http://yoursite.com/2018/04/23/js动态插入js和css/</id>
    <published>2018-04-23T00:41:31.000Z</published>
    <updated>2018-04-25T02:05:08.728Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近遇到一个需求，不同的客户需要不同的定制登录页，但是又在同一个域名下。王二想了想，这或许可以通过js动态插入js和css代码来实现 </p></blockquote><a id="more"></a><p>大致思路是这样：</p><p>1、在登录页地址栏传一个参数，例如oid（不同客户的oid）不同；</p><p>2、js获取这个参数，然后再请求后台接口获得动态的js和css地址；</p><p>3、然后再加载相应的地址，加载方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//url是要加载的js地址，fn是加载完成后的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertScript</span> (<span class="params">url,fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> heads = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>),</span><br><span class="line">        script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.setAttribute(<span class="string">"type"</span>, <span class="string">"text/javascript"</span>);</span><br><span class="line">    script.setAttribute(<span class="string">'src'</span>, url);</span><br><span class="line">    script.onload = script.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        fn &amp;&amp; fn();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(heads.length)&#123;</span><br><span class="line">        heads[<span class="number">0</span>].appendChild(script);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.documentElement.appendChild(script);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//url是要加载的css地址，fn是加载完成后的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertCss</span> (<span class="params">url,fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> heads = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>),</span><br><span class="line">        link = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">    link.setAttribute(<span class="string">"rel"</span>, <span class="string">"stylesheet"</span>);</span><br><span class="line">    link.setAttribute(<span class="string">"type"</span>, <span class="string">"text/css"</span>);</span><br><span class="line">    link.setAttribute(<span class="string">"href"</span>, url);</span><br><span class="line">    link.onload = link.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        fn &amp;&amp; fn();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(heads.length)&#123;</span><br><span class="line">        heads[<span class="number">0</span>].appendChild(link);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.documentElement.appendChild(link);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、注意到js和css加载完成后页面会重绘，这时候页面会一闪一下，很不美观。于是我们可以暂时先将页面隐藏起来，然后在加载完成后回调里再将页面显示出来，这样来看是比较好的解决方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;最近遇到一个需求，不同的客户需要不同的定制登录页，但是又在同一个域名下。王二想了想，这或许可以通过js动态插入js和css代码来实现 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>小记一个简单的样式布局二</title>
    <link href="http://yoursite.com/2018/04/12/%E5%B0%8F%E8%AE%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%B7%E5%BC%8F%E5%B8%83%E5%B1%80%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/04/12/小记一个简单的样式布局二/</id>
    <published>2018-04-12T13:29:35.000Z</published>
    <updated>2018-04-12T14:30:13.496Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>开发中遇到一个样式布局，值得留意，王二在这里小计一下 </p></blockquote><a id="more"></a><p>开发时列表显示遇到这样两个需求：</p><ul><li>表格的列数是动态的，管理后台设置几列，页面上就显示几列；</li><li>每一列的显示文字如果超出这一列则显示点点点</li></ul><p>动态设置宽度，可以用弹性盒子 <code>flex</code> 来解决；显示点点点，可以用样式 <code>text-overflow:ellipsis;</code> 来搞定，</p><p>但是两个同时使用会出现一些问题，因为用 <code>text-overflow:ellipsis;</code> 显示点点点需要固定盒子的宽度，而恰好这里又是弹性盒子，所以这里用到了绝对定位来固定盒子的宽度，</p><p>于是有如下的示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        width: 300px;</span></span><br><span class="line"><span class="undefined">        height: 80px;</span></span><br><span class="line"><span class="undefined">        border: 1px dashed gray;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span>&gt;*&#123;</span></span><br><span class="line"><span class="undefined">        border: 1px dashed orange;</span></span><br><span class="line"><span class="undefined">        flex: 1;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.aa</span>&#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.bb</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>; </span></span><br><span class="line"><span class="css">        <span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bb"</span>&gt;</span>显示点点点显示点点点显示点点点显示点点点<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bb"</span>&gt;</span>正常显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aa"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bb"</span>&gt;</span>正常显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1804/2.png?raw=true" alt="Alt text"></p><p>后来发现以上样式在 Safiri 上显示有一些问题，于是将 <code>aa</code> 的样式修改如下，就兼容了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aa</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;开发中遇到一个样式布局，值得留意，王二在这里小计一下 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端备忘" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>vue生产环境清除打印</title>
    <link href="http://yoursite.com/2018/04/09/vue%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%B8%85%E9%99%A4%E6%89%93%E5%8D%B0/"/>
    <id>http://yoursite.com/2018/04/09/vue生产环境清除打印/</id>
    <published>2018-04-09T08:31:26.000Z</published>
    <updated>2018-04-10T01:08:44.935Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在生产环境显示打印很不好，而且会影响性能，那怎么去除生产环境的打印呢？王二这里有两个方法，感兴趣的同学可以进来看看 </p></blockquote><a id="more"></a><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>我们可以直接在 <code>src/main.js</code> 里添加如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.log = <span class="built_in">console</span>.log;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;    </span><br><span class="line">  <span class="built_in">window</span>.log = <span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它会判断当前环境是开发环境还是生产环境，如果是生产环境，则将<code>window.log</code> 赋值给一个空函数。</p><p>需要注意的是，为了不影响生产环境原生<code>window.console.log</code>的使用，所以这里定义了一个<code>window.log</code>方法用来打印，所以以后代码里的打印用 <code>log</code> 而不是用 <code>console.log</code>。</p><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>第二种方法则更加简单，其实在vue的手脚架中可以添加相应的配置项，</p><p>在 <code>build/webpack.config.js</code> 的 <code>plugins</code> 的 <code>UglifyJsPlugin</code> 里面添加如下配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">  compress:&#123;</span><br><span class="line">    warnings: <span class="literal">false</span>,</span><br><span class="line">    drop_console: <span class="literal">true</span>    <span class="comment">//添加这行配置项</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>问题就被顺利搞定了</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;在生产环境显示打印很不好，而且会影响性能，那怎么去除生产环境的打印呢？王二这里有两个方法，感兴趣的同学可以进来看看 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端备忘" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="易面打分端重构" scheme="http://yoursite.com/tags/%E6%98%93%E9%9D%A2%E6%89%93%E5%88%86%E7%AB%AF%E9%87%8D%E6%9E%84/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小记一个简单的样式布局</title>
    <link href="http://yoursite.com/2018/04/08/%E5%B0%8F%E8%AE%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%B7%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/04/08/小记一个简单的样式布局/</id>
    <published>2018-04-08T07:38:44.000Z</published>
    <updated>2018-04-10T01:08:44.936Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>开发中遇到一个样式布局，值得留意，王二在这里小计一下 </p></blockquote><a id="more"></a><p>以下代码的效果是：在一行中，一块的宽度是固定的，剩下的一块的内部是滑动的；</p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.z</span>&#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        border: 1 dashed gray;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 50px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.b</span>&#123;</span></span><br><span class="line"><span class="undefined">        flex: 1;</span></span><br><span class="line"><span class="undefined">        white-space: nowrap;</span></span><br><span class="line"><span class="undefined">        background-color: orange;</span></span><br><span class="line"><span class="undefined">        overflow-x: auto;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.c</span>&#123;</span></span><br><span class="line"><span class="undefined">        margin: 5px;</span></span><br><span class="line"><span class="undefined">        border: 1px dashed gray</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"z"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">        固定宽度</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span>滚动栏1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span>滚动栏2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span>滚动栏3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span>滚动栏4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span>滚动栏5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1804/1.png?raw=true" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;开发中遇到一个样式布局，值得留意，王二在这里小计一下 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端备忘" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>如何设置父元素透明度但不影响子元素透明度</title>
    <link href="http://yoursite.com/2018/04/02/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%88%B6%E5%85%83%E7%B4%A0%E9%80%8F%E6%98%8E%E5%BA%A6%E4%BD%86%E4%B8%8D%E5%BD%B1%E5%93%8D%E5%AD%90%E5%85%83%E7%B4%A0%E9%80%8F%E6%98%8E%E5%BA%A6/"/>
    <id>http://yoursite.com/2018/04/02/如何设置父元素透明度但不影响子元素透明度/</id>
    <published>2018-04-02T05:08:26.000Z</published>
    <updated>2018-04-06T08:20:39.167Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近要画一个页面，需要设置父盒子有透明度，但是子盒子没有透明度，王二之前遇到过类似的因此遇到了点麻烦 </p></blockquote><a id="more"></a><p>王二一开始是类似下面这样写的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.75</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样写的话,子元素会受到父元素 <code>opacity</code> 的影响，也会有0.5的透明度。这时候哪怕子元素的 <code>opacity</code> 设置为一也没有用，因为子元素的 <code>opacity:1</code> 也是在父元素的 <code>opacity:0.5</code> 的基础上设置的，因此子元素的 <code>opacity</code> 还是0.5。</p><p>后来的解决的方法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(255,255,255,0.75);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;最近要画一个页面，需要设置父盒子有透明度，但是子盒子没有透明度，王二之前遇到过类似的因此遇到了点麻烦 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端备忘" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS实现复制到粘贴板</title>
    <link href="http://yoursite.com/2018/04/02/JS%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%88%B0%E7%B2%98%E8%B4%B4%E6%9D%BF/"/>
    <id>http://yoursite.com/2018/04/02/JS实现复制到粘贴板/</id>
    <published>2018-04-02T04:55:30.000Z</published>
    <updated>2018-04-06T08:20:33.759Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最先项目上要实现点击一个按钮要复制一段内容到粘贴板上的功能，之前没有做过，上网查查浏览器还真有这样的API,以下做一个备忘 </p></blockquote><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">copyUrl</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="undefined">    &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Url2=<span class="built_in">document</span>.getElementById(<span class="string">"biao"</span>);</span></span><br><span class="line"><span class="javascript">    Url2.select(); <span class="comment">// 选择对象</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.execCommand(<span class="string">"Copy"</span>); <span class="comment">// 执行浏览器复制命令</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"20"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">id</span>=<span class="string">"biao"</span>&gt;</span>用户定义的代码区域<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"copyUrl()"</span> <span class="attr">value</span>=<span class="string">"点击复制代码"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;最先项目上要实现点击一个按钮要复制一段内容到粘贴板上的功能，之前没有做过，上网查查浏览器还真有这样的API,以下做一个备忘 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端备忘" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>vue-router 实现验证登录</title>
    <link href="http://yoursite.com/2018/04/01/vue-router-%E5%AE%9E%E7%8E%B0%E9%AA%8C%E8%AF%81%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2018/04/01/vue-router-实现验证登录/</id>
    <published>2018-04-01T15:24:37.000Z</published>
    <updated>2018-04-06T08:20:24.887Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近改版的项目上有一个需求，如果用户没有登录，则不能跳转到除登录页外的其他页面 </p></blockquote><a id="more"></a><p>刚开始王二打算用 <code>vue-router</code> 的全局前置守卫来判断是否允许用户跳转，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但用全局前置守卫需要进行很多判断，处理不好还很容易导致递归调用，王二调试了很长时间都没有处理好，很是苦恼。</p><p>后来王二试了试 <code>vue-router</code> 的全局后置守卫来进行跳转，处理起来还真他娘的简单，比全局前置守卫好用多了，那么就用它了，代码参考如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;    <span class="comment">//如果未登录，则直接跳转到login页面</span></span><br><span class="line">  <span class="keyword">if</span>(!store.state.isLogin)&#123;    <span class="comment">//从vuex里读取登录状态    </span></span><br><span class="line">    router.push(&#123;<span class="attr">name</span>: <span class="string">'Login'</span>&#125;) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;最近改版的项目上有一个需求，如果用户没有登录，则不能跳转到除登录页外的其他页面 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端备忘" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>理解JS中的this</title>
    <link href="http://yoursite.com/2018/03/15/%E7%90%86%E8%A7%A3JS%E4%B8%AD%E7%9A%84this/"/>
    <id>http://yoursite.com/2018/03/15/理解JS中的this/</id>
    <published>2018-03-15T14:34:22.000Z</published>
    <updated>2018-08-02T09:05:07.107Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>今天来啃一个硬骨头，<code>this</code> </p></blockquote><a id="more"></a><h3 id="一、开始"><a href="#一、开始" class="headerlink" title="一、开始"></a>一、开始</h3><p>最近阅读《你不知道的javascript》，里面有关于 <code>this</code> 的详细介绍，王二受益匪浅，于是在这里做一个分享。</p><p>关于JS中的 <code>this</code> 到底是什么，知乎中轮子哥这样说到：</p><blockquote><p><code>this</code> 在js的函数里面只是一个参数，是通过 <code>Fuck.Shit(Bitches)</code> 这种语法来传递的，点号前面的表达式就算 <code>this</code>。</p></blockquote><p>轮子哥说的没错，通常来说，想要确定 <code>this</code> 就是寻找“函数被调用的位置”，但是这做起来并没有这么简单，因为某些编程模式可能会隐藏真正的调用位置。</p><p>划分到具体，js中有四条绑定规则来确定 <code>this</code> 的绑定对象。</p><h3 id="二、四条绑定规则"><a href="#二、四条绑定规则" class="headerlink" title="二、四条绑定规则"></a>二、四条绑定规则</h3><p>假设我们已经找到函数的被调用位置，我们还要确定用下面四条绑定规则中的哪一条，来确定 <code>this</code> 的绑定对象。在这里，王二首先会分别解释这四条规则，然后解释多条规则都可用时它们的优先级如何排列。</p><h4 id="第一条规则：默认绑定"><a href="#第一条规则：默认绑定" class="headerlink" title="第一条规则：默认绑定"></a>第一条规则：默认绑定</h4><p>1、默认绑定下 <code>this</code> 会指向全局对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;     </span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>; </span><br><span class="line">foo(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>2、但是如果使用严格模式（strict mode），那么全局对象将无法使用默认绑定，<code>this</code> 会绑定到 <code>undefined</code>,因此以上的代码会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;     </span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>; </span><br><span class="line">foo(); <span class="comment">// TypeError: this is undefined</span></span><br></pre></td></tr></table></figure><p>3、但是如果我们显式地用 <code>window</code> 调用 <code>foo</code> 函数，则以上代码不会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;     </span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>; </span><br><span class="line"><span class="built_in">window</span>.foo(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>这是因为我们应用了第二条规则——隐式绑定</p><h4 id="第二条规则：隐式绑定"><a href="#第二条规则：隐式绑定" class="headerlink" title="第二条规则：隐式绑定"></a>第二条规则：隐式绑定</h4><p>如果一个函数中有 <code>this</code> ，这个函数有被<strong>上一级</strong>的对象所调用，那么 <code>this</code> 指向的就是<strong>上一级</strong>的对象；<code>this</code> 是在运行时被确定，而不是在定义时被确定。</p><p>1、参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,     </span><br><span class="line">    foo: foo </span><br><span class="line">&#125;;</span><br><span class="line">obj.foo(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>2、<code>this</code> 指向的是被调用方法的<strong>上一级</strong>对象，而不是它的最外层对象，</p><p>参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">22</span>,     </span><br><span class="line">    foo: foo </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;     </span><br><span class="line">    a: <span class="number">12</span>,     </span><br><span class="line">    obj2: obj2 </span><br><span class="line">&#125;; </span><br><span class="line">obj1.obj2.foo(); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure><p>3、<code>this</code> 是在运行时被确定，而不是在定义时被确定，</p><p>参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj = &#123;     </span><br><span class="line">    a: <span class="number">2</span>,     </span><br><span class="line">    foo: foo </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> bar = obj.foo; <span class="comment">// 函数别名！ </span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"oops, global"</span>; <span class="comment">// a是全局对象的属性</span></span><br><span class="line">bar(); <span class="comment">// "oops, global"</span></span><br></pre></td></tr></table></figure><p>4、在方法的参数中传入函数时也需要特别注意，传入函数的 <code>this</code> 也指向其方法被调用的上一级对象</p><p>参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a ); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doFoo</span>(<span class="params">fn</span>) </span>&#123;     <span class="comment">// fn其实引用的是foo     </span></span><br><span class="line">    fn(); <span class="comment">// &lt;-- 调用位置！ </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj = &#123;     </span><br><span class="line">    a: <span class="number">2</span>,     </span><br><span class="line">    foo: foo </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"oops, global"</span>; <span class="comment">// a是全局对象的属性</span></span><br><span class="line">doFoo( obj.foo ); <span class="comment">// "oops, global"</span></span><br></pre></td></tr></table></figure><p>再例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj = &#123;     </span><br><span class="line">    a: <span class="number">2</span>,     </span><br><span class="line">    foo: foo </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"oops, global"</span>; <span class="comment">// a是全局对象的属性</span></span><br><span class="line">setTimeout( obj.foo, <span class="number">100</span> ); <span class="comment">// "oops, global"</span></span><br></pre></td></tr></table></figure><p>在上面的的代码片段中，有时候我们就想打印 <code>obj</code> 中的 <code>a</code> 属性，这时候我们应该怎么修改呢？</p><p>这就需要我们应用第三条规则——显式绑定</p><h4 id="第三条规则：显式绑定"><a href="#第三条规则：显式绑定" class="headerlink" title="第三条规则：显式绑定"></a>第三条规则：显式绑定</h4><p>以上的代码可以如下修改来访问到 <code>obj</code> 中的 <code>a</code> 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.a ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj = &#123;     </span><br><span class="line">    a: <span class="number">2</span>,     </span><br><span class="line">    foo: foo </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"oops, global"</span>; <span class="comment">// a是全局对象的属性</span></span><br><span class="line">setTimeout( obj.foo.bind(obj), <span class="number">100</span> ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>这个代码片段中用了 <code>bind（）</code> 方法来显式修改 <code>this</code> 的指向，与 <code>bind（）</code> 方法有类似功能的还有 <code>call（）</code> 方法和 <code>apply（）</code> 方法，他们都可以改变 <code>this</code>的指向；</p><p>但是它们之间也有重要的区别：<code>bind（）</code> 是返回对应函数，便于稍后调用；<code>call（）</code> 、<code>apply（）</code> 则是立即调用 。关于这三个方法更详细的介绍，感兴趣的同学可以参考王二之前写过的一篇文章——<a href="http://www.wangyulue.com/2017/09/20/JS%E4%B8%ADapply%E3%80%81call%E3%80%81bind%E7%9A%84%E7%94%A8%E6%B3%95/" target="_blank" rel="noopener">JS中apply、call、bind的用法</a></p><h4 id="第四条规则：new绑定"><a href="#第四条规则：new绑定" class="headerlink" title="第四条规则：new绑定"></a>第四条规则：new绑定</h4><p>参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log( bar.a ); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>使用 <code>new</code> 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。</p><ol><li>创建（或者说构造）一个全新的对象。</li><li>这个新对象会被执行[[原型]]连接。</li><li>这个新对象会绑定到函数调用的 <code>this</code> 上。</li><li>如果函数没有返回其他对象，那么 <code>new</code> 表达式中的函数调用会自动返回这个新对象。</li></ol><p>其中第二步操作，王二这里暂不讨论。</p><p>更具第一步和第三部操作，我们可以知道<strong>使用 <code>new</code> 来调用 <code>foo(..)</code> 时，我们会构造一个新对象并把它绑定到 <code>foo(..)</code> 调用中的 <code>this</code> 上。</strong></p><p>关于第四步操作，我们需要额外注意，王二接下来提供一些示例代码以供参考（此代码来自<a href="https://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="noopener">‘追梦子’的博客</a>）：</p><p>示例代码一:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'追梦子'</span>;  </span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>示例代码二:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'追梦子'</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>示例代码三:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'追梦子'</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//追梦子</span></span><br></pre></td></tr></table></figure><p>示例代码四:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.user = <span class="string">'追梦子'</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn;  </span><br><span class="line"><span class="built_in">console</span>.log(a.user); <span class="comment">//追梦子</span></span><br></pre></td></tr></table></figure><p>也就是说：<strong>如果返回值是一个对象，那么 <code>this</code> 指向的就是那个返回的对象，如果返回值不是一个对象那么 <code>this</code> 还是指向函数的实例。</strong></p><h3 id="三、四条绑定规则的优先级"><a href="#三、四条绑定规则的优先级" class="headerlink" title="三、四条绑定规则的优先级"></a>三、四条绑定规则的优先级</h3><p>现在我们可以根据优先级来判断函数在某个调用位置应用的是哪条规则。可以按照下面的顺序来进行判断：</p><p>1、 函数是否在 <code>new</code> 中调用（<code>new</code>绑定）？如果是的话this绑定的是新创建的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo()</span><br></pre></td></tr></table></figure><p>2、 函数是否通过 <code>call</code>、<code>apply</code>、<code>bind</code>（显式绑定）调用？如果是的话，<code>this</code> 绑定的是指定的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = foo.call(obj)</span><br></pre></td></tr></table></figure><p>3、函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，<code>this</code> 绑定的是那个上下文对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = obj.foo()</span><br></pre></td></tr></table></figure><p>4、如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 <code>undefined</code> ，否则绑定到全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = foo()</span><br></pre></td></tr></table></figure><h3 id="四、箭头函数里的this"><a href="#四、箭头函数里的this" class="headerlink" title="四、箭头函数里的this"></a>四、箭头函数里的this</h3><p>箭头函数不使用 <code>this</code> 的四种标准规则，而是根据外层（函数或者全局）作用域来决定 <code>this</code> 。</p><p>参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;      <span class="comment">// 返回一个箭头函数     </span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;   <span class="comment">//this继承自foo()       </span></span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );     </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a:<span class="number">2</span> </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a:<span class="number">3</span> </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> bar = foo.call( obj1 ); </span><br><span class="line">bar.call( obj2 ); <span class="comment">// 2, 不是3！</span></span><br></pre></td></tr></table></figure><p>如果将箭头函数换为普通函数，则打印的是3:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;       </span><br><span class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span>.a );     </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a:<span class="number">2</span> </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    a:<span class="number">3</span> </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">var</span> bar = foo.call( obj1 ); </span><br><span class="line">bar.call( obj2 ); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>也就是说，<strong>箭头函数中的<code>this</code> 是函数在定义时被确定，而不是函数在运行时被确定的;</strong> 而普通方法中的 <code>this</code> 是在运行时被确定，而不是在定义时被确定的。</p><h3 id="五、参考阅读"><a href="#五、参考阅读" class="headerlink" title="五、参考阅读"></a>五、参考阅读</h3><p><a href="https://pan.baidu.com/s/1fXBzt-NUdVXQe_gHSGk4cA" target="_blank" rel="noopener">你不知道的Javascript(上)（中文版）</a>  密码:x7ge</p><p><a href="https://github.com/ruanyf/es6tutorial/issues/150" target="_blank" rel="noopener">阮一峰 es6tutorial 下的issue</a></p><p><a href="https://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="noopener">“追梦子”的博客</a></p><p><a href="https://www.zhihu.com/question/25842198" target="_blank" rel="noopener">知乎关于this的问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;今天来啃一个硬骨头，&lt;code&gt;this&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JS解出最近比较火的刑侦推理题</title>
    <link href="http://yoursite.com/2018/03/15/JS%E8%A7%A3%E5%87%BA%E6%9C%80%E8%BF%91%E6%AF%94%E8%BE%83%E7%81%AB%E7%9A%84%E5%88%91%E4%BE%A6%E6%8E%A8%E7%90%86%E9%A2%98/"/>
    <id>http://yoursite.com/2018/03/15/JS解出最近比较火的刑侦推理题/</id>
    <published>2018-03-14T16:46:53.000Z</published>
    <updated>2018-04-27T09:07:40.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>晚上闲着无聊，来做一做最近比较火的刑侦推理题 </p></blockquote><a id="more"></a><p>最近网上出了一个比较火的刑侦推理题，王二比较感兴趣，于是抽空做了做。</p><h3 id="一、推理题如下"><a href="#一、推理题如下" class="headerlink" title="一、推理题如下"></a>一、推理题如下</h3><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1803/2.jpg?raw=true" alt="Alt text"></p><h3 id="二、遇到的问题"><a href="#二、遇到的问题" class="headerlink" title="二、遇到的问题"></a>二、遇到的问题</h3><p>刚开始，王二写下了如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>).fill(<span class="string">"A"</span>);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    recursion(); </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a1</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a2</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">1</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"C"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"D"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"A"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"B"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a3</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">2</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">5</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">5</span>] === arr[<span class="number">3</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">2</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">2</span>] === arr[<span class="number">3</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">5</span>] === arr[<span class="number">2</span>] &amp;&amp; arr[<span class="number">5</span>] === arr[<span class="number">3</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">5</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">5</span>] === arr[<span class="number">2</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a4</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> f1 = arr[<span class="number">0</span>] === arr[<span class="number">4</span>] ,</span></span><br><span class="line"><span class="undefined">            f2 = arr[1] === arr[6] ,</span></span><br><span class="line"><span class="undefined">            f3 = arr[0] === arr[8] ,</span></span><br><span class="line"><span class="undefined">            f4 = arr[5] === arr[9] ;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">3</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a5</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">4</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">7</span>] === <span class="string">"A"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">3</span>] === <span class="string">"B"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">8</span>] === <span class="string">"C"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">6</span>] === <span class="string">"D"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a6</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> f1 = arr[<span class="number">7</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">7</span>] === arr[<span class="number">3</span>] ,</span></span><br><span class="line"><span class="undefined">            f2 = arr[7] === arr[0] &amp;&amp; arr[7] === arr[5] ,</span></span><br><span class="line"><span class="undefined">            f3 = arr[7] === arr[2] &amp;&amp; arr[7] === arr[9] ,</span></span><br><span class="line"><span class="undefined">            f4 = arr[7] === arr[4] &amp;&amp; arr[7] === arr[8] ;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">5</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a7</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> c1 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"A"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c2 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"B"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c3 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"C"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c4 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"D"</span>&#125;).length ;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">6</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c3</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c2</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c1</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a8</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">7</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">6</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">4</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">1</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">9</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a9</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> flag = arr[<span class="number">0</span>] === arr[<span class="number">5</span>],</span></span><br><span class="line"><span class="undefined">            f1 = (arr[4] === arr[5]) === !flag ,</span></span><br><span class="line"><span class="undefined">            f2 = (arr[4] === arr[9]) === !flag ,</span></span><br><span class="line"><span class="undefined">            f3 = (arr[4] === arr[1]) === !flag ,</span></span><br><span class="line"><span class="undefined">            f4 = (arr[4] === arr[8]) === !flag ;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">8</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a10</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> c1 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"A"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c2 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"B"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c3 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"C"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c4 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"D"</span>&#125;).length ;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">9</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">3</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">4</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">vali</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> a1() &amp;&amp; a2() &amp;&amp; a3() &amp;&amp; a4() &amp;&amp; a5() &amp;&amp; a6() &amp;&amp; a7() &amp;&amp; a8() &amp;&amp; a9() &amp;&amp; a10() ;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//递归遍历arr的所有排列组合</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">recursion</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(vali())&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span> ; x&lt;arr.length ; x++)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">switch</span>(arr[x])</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">                arr[x] = <span class="string">"B"</span> ;</span></span><br><span class="line"><span class="undefined">                recursion () ;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> ;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">                arr[x] = <span class="string">"C"</span> </span></span><br><span class="line"><span class="undefined">                recursion () ;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> ;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">                arr[x] = <span class="string">"D"</span> ;</span></span><br><span class="line"><span class="undefined">                recursion () ;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> ;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(x===<span class="number">9</span>) <span class="keyword">return</span> ;</span></span><br><span class="line"><span class="javascript">                arr[x] = <span class="string">"A"</span> ;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">continue</span> ;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> ;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的代码逻辑上没有问题，但是还是报了个错——栈溢出</p><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1803/3.png?raw=true" alt="Alt text"></p><p>虽然王二也试着用尾递归优化来尝试解决问题，但依然报错</p><h3 id="三、解决方法"><a href="#三、解决方法" class="headerlink" title="三、解决方法"></a>三、解决方法</h3><p>后来王二躺床上又寻思怎么才能解决这恶心的报错，然后想到<code>try</code> <code>catch</code> 可以捕获错误，或许我们能递归调用 <code>try</code> <code>catch</code> 来解决这个问题。按照这个思路王二又在代码片段中添加了如下的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span> ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            flag = <span class="literal">false</span> ;</span><br><span class="line">            recursion() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思是如果栈溢出报错，则在 <code>catch</code> 再次调用 <code>run()</code> 方法 ，直到它不报错为止，不报错也就意味着<code>arr</code>数组所有排列组合的可能性都被遍历完了。</p><p>执行后，还真他娘的起作用了。</p><p>完整的代码片段如下所示（可以拷贝下来尝试运行）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>).fill(<span class="string">"A"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> flag = <span class="literal">true</span> ;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    run(); <span class="comment">// ["B", "C", "A", "C", "A", "C", "D", "A", "B", "A"]</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="javascript">                flag = <span class="literal">false</span> ;</span></span><br><span class="line"><span class="undefined">                recursion() ;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">catch</span> (err) &#123;</span></span><br><span class="line"><span class="javascript">            flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">            run();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a1</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a2</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">1</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"C"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"D"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"A"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"B"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a3</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">2</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">5</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">5</span>] === arr[<span class="number">3</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">2</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">2</span>] === arr[<span class="number">3</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">5</span>] === arr[<span class="number">2</span>] &amp;&amp; arr[<span class="number">5</span>] === arr[<span class="number">3</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">5</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">5</span>] === arr[<span class="number">2</span>]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a4</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> f1 = arr[<span class="number">0</span>] === arr[<span class="number">4</span>] ,</span></span><br><span class="line"><span class="undefined">            f2 = arr[1] === arr[6] ,</span></span><br><span class="line"><span class="undefined">            f3 = arr[0] === arr[8] ,</span></span><br><span class="line"><span class="undefined">            f4 = arr[5] === arr[9] ;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">3</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a5</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">4</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">7</span>] === <span class="string">"A"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">3</span>] === <span class="string">"B"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">8</span>] === <span class="string">"C"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> arr[<span class="number">6</span>] === <span class="string">"D"</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a6</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> f1 = arr[<span class="number">7</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">7</span>] === arr[<span class="number">3</span>] ,</span></span><br><span class="line"><span class="undefined">            f2 = arr[7] === arr[0] &amp;&amp; arr[7] === arr[5] ,</span></span><br><span class="line"><span class="undefined">            f3 = arr[7] === arr[2] &amp;&amp; arr[7] === arr[9] ,</span></span><br><span class="line"><span class="undefined">            f4 = arr[7] === arr[4] &amp;&amp; arr[7] === arr[8] ;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">5</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a7</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> c1 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"A"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c2 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"B"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c3 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"C"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c4 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"D"</span>&#125;).length ;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">6</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c3</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c2</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c1</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a8</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">7</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">6</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">4</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">1</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">9</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a9</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> flag = arr[<span class="number">0</span>] === arr[<span class="number">5</span>],</span></span><br><span class="line"><span class="undefined">            f1 = (arr[4] === arr[5]) === !flag ,</span></span><br><span class="line"><span class="undefined">            f2 = (arr[4] === arr[9]) === !flag ,</span></span><br><span class="line"><span class="undefined">            f3 = (arr[4] === arr[1]) === !flag ,</span></span><br><span class="line"><span class="undefined">            f4 = (arr[4] === arr[8]) === !flag ;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">8</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; f2 &amp;&amp; !f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; f3 &amp;&amp; !f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; f4</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">a10</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> c1 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"A"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c2 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"B"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c3 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"C"</span>&#125;).length ,</span></span><br><span class="line"><span class="javascript">            c4 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"D"</span>&#125;).length ;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span>(arr[<span class="number">9</span>])</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">3</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">2</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">4</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">vali</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> a1() &amp;&amp; a2() &amp;&amp; a3() &amp;&amp; a4() &amp;&amp; a5() &amp;&amp; a6() &amp;&amp; a7() &amp;&amp; a8() &amp;&amp; a9() &amp;&amp; a10() ;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//递归遍历arr的所有排列组合</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">recursion</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(vali())&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(arr);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span> ; x&lt;arr.length ; x++)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">switch</span>(arr[x])</span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">"A"</span>:</span></span><br><span class="line"><span class="javascript">                arr[x] = <span class="string">"B"</span> ;</span></span><br><span class="line"><span class="undefined">                recursion () ;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> ;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">"B"</span>:</span></span><br><span class="line"><span class="javascript">                arr[x] = <span class="string">"C"</span> </span></span><br><span class="line"><span class="undefined">                recursion () ;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> ;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">"C"</span>:</span></span><br><span class="line"><span class="javascript">                arr[x] = <span class="string">"D"</span> ;</span></span><br><span class="line"><span class="undefined">                recursion () ;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> ;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="string">"D"</span>:</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(x===<span class="number">9</span>) <span class="keyword">return</span> ;</span></span><br><span class="line"><span class="javascript">                arr[x] = <span class="string">"A"</span> ;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">continue</span> ;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> ;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样的写话栈溢出的问题似乎就比较完美的被解决了。</p><hr><p>2018年04月27日补充：</p><p>其实那天晚上王二脑子进水了，其实这里没有必要用到递归调用，现修改代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>).fill(<span class="string">"A"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(recursion(arr)!==<span class="string">'done'</span>)&#123;</span><br><span class="line">    vali() &amp;&amp; <span class="built_in">console</span>.log(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a1</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a2</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(arr[<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"C"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"D"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">4</span>] === <span class="string">"B"</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a3</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(arr[<span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">5</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">5</span>] === arr[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">2</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">2</span>] === arr[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">5</span>] === arr[<span class="number">2</span>] &amp;&amp; arr[<span class="number">5</span>] === arr[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">5</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">5</span>] === arr[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a4</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f1 = arr[<span class="number">0</span>] === arr[<span class="number">4</span>] ,</span><br><span class="line">        f2 = arr[<span class="number">1</span>] === arr[<span class="number">6</span>] ,</span><br><span class="line">        f3 = arr[<span class="number">0</span>] === arr[<span class="number">8</span>] ,</span><br><span class="line">        f4 = arr[<span class="number">5</span>] === arr[<span class="number">9</span>] ;</span><br><span class="line">    <span class="keyword">switch</span>(arr[<span class="number">3</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        <span class="keyword">return</span> f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; !f4</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> !f1 &amp;&amp; f2 &amp;&amp; !f3 &amp;&amp; !f4</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; f3 &amp;&amp; !f4</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; f4</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a5</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(arr[<span class="number">4</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">7</span>] === <span class="string">"A"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">3</span>] === <span class="string">"B"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">8</span>] === <span class="string">"C"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">6</span>] === <span class="string">"D"</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a6</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f1 = arr[<span class="number">7</span>] === arr[<span class="number">1</span>] &amp;&amp; arr[<span class="number">7</span>] === arr[<span class="number">3</span>] ,</span><br><span class="line">        f2 = arr[<span class="number">7</span>] === arr[<span class="number">0</span>] &amp;&amp; arr[<span class="number">7</span>] === arr[<span class="number">5</span>] ,</span><br><span class="line">        f3 = arr[<span class="number">7</span>] === arr[<span class="number">2</span>] &amp;&amp; arr[<span class="number">7</span>] === arr[<span class="number">9</span>] ,</span><br><span class="line">        f4 = arr[<span class="number">7</span>] === arr[<span class="number">4</span>] &amp;&amp; arr[<span class="number">7</span>] === arr[<span class="number">8</span>] ;</span><br><span class="line">    <span class="keyword">switch</span>(arr[<span class="number">5</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        <span class="keyword">return</span> f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; !f4</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> !f1 &amp;&amp; f2 &amp;&amp; !f3 &amp;&amp; !f4</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; f3 &amp;&amp; !f4</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; f4</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a7</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c1 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"A"</span>&#125;).length ,</span><br><span class="line">        c2 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"B"</span>&#125;).length ,</span><br><span class="line">        c3 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"C"</span>&#125;).length ,</span><br><span class="line">        c4 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"D"</span>&#125;).length ;</span><br><span class="line">    <span class="keyword">switch</span>(arr[<span class="number">6</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c3</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c2</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c1</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.min(c1,c2,c3,c4) === c4</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a8</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(arr[<span class="number">7</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">6</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">4</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">1</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.abs(arr[<span class="number">0</span>].charCodeAt(<span class="number">0</span>) - arr[<span class="number">9</span>].charCodeAt(<span class="number">0</span>))&gt;=<span class="number">2</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a9</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = arr[<span class="number">0</span>] === arr[<span class="number">5</span>],</span><br><span class="line">        f1 = (arr[<span class="number">4</span>] === arr[<span class="number">5</span>]) === !flag ,</span><br><span class="line">        f2 = (arr[<span class="number">4</span>] === arr[<span class="number">9</span>]) === !flag ,</span><br><span class="line">        f3 = (arr[<span class="number">4</span>] === arr[<span class="number">1</span>]) === !flag ,</span><br><span class="line">        f4 = (arr[<span class="number">4</span>] === arr[<span class="number">8</span>]) === !flag ;</span><br><span class="line">    <span class="keyword">switch</span>(arr[<span class="number">8</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        <span class="keyword">return</span> f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; !f4</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> !f1 &amp;&amp; f2 &amp;&amp; !f3 &amp;&amp; !f4</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; f3 &amp;&amp; !f4</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="keyword">return</span> !f1 &amp;&amp; !f2 &amp;&amp; !f3 &amp;&amp; f4</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a10</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c1 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"A"</span>&#125;).length ,</span><br><span class="line">        c2 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"B"</span>&#125;).length ,</span><br><span class="line">        c3 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"C"</span>&#125;).length ,</span><br><span class="line">        c4 = arr.filter(<span class="function">(<span class="params">i</span>)=&gt;</span>&#123;<span class="keyword">return</span> i === <span class="string">"D"</span>&#125;).length ;</span><br><span class="line">    <span class="keyword">switch</span>(arr[<span class="number">9</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">3</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">4</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(c1,c2,c3,c4) - <span class="built_in">Math</span>.min(c1,c2,c3,c4) === <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vali</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a1() &amp;&amp; a2() &amp;&amp; a3() &amp;&amp; a4() &amp;&amp; a5() &amp;&amp; a6() &amp;&amp; a7() &amp;&amp; a8() &amp;&amp; a9() &amp;&amp; a10() ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursion</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span> ; x&lt;arr.length ; x++)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(arr[x])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">            arr[x] = <span class="string">"B"</span> ;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">            arr[x] = <span class="string">"C"</span> </span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"C"</span>:</span><br><span class="line">            arr[x] = <span class="string">"D"</span> ;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">            <span class="keyword">if</span>(x===<span class="number">9</span>) <span class="keyword">return</span> <span class="string">'done'</span>;</span><br><span class="line">            arr[x] = <span class="string">"A"</span> ;</span><br><span class="line">            <span class="keyword">continue</span> ;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'error'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此简单的问题王二那天想的那么复杂，也是醉了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;晚上闲着无聊，来做一做最近比较火的刑侦推理题 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>vue单页应用如何在页面刷新时保留状态数据</title>
    <link href="http://yoursite.com/2018/03/13/Vue%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%97%B6%E4%BF%9D%E7%95%99%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/03/13/Vue单页应用如何在页面刷新时保留状态数据/</id>
    <published>2018-03-13T06:34:37.000Z</published>
    <updated>2018-03-14T12:38:02.159Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在Vue单页应用中，如果在某一个具体路由的具体页面下点击刷新，那么刷新后，页面的状态信息可能就会丢失掉。这时候应该怎么处理呢？如果你也有这个疑惑，这篇文章或许能够帮助到你 </p></blockquote><a id="more"></a><h3 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h3><p>现在产品上有个需求：单页应用走到某个具体的页面，然后点击刷新后，刷新的页面要与刷新前的页面要保持一致。</p><p>这时候就需要我们保存刷新之前页面的状态。</p><h3 id="二、一种解决方案"><a href="#二、一种解决方案" class="headerlink" title="二、一种解决方案"></a>二、一种解决方案</h3><p>在这个Vue单页应用中，王二是用Vuex作为状态管理的，一开始王二的思路是将Vuex里的数据同步更新到localStorage里。</p><p>即：一改变vuex里的数据,便触发<code>localStorage.setItem</code> 方法，参考如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">storeLocalStore</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.localStorage.setItem(<span class="string">"userMsg"</span>,<span class="built_in">JSON</span>.stringify(state));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        username: <span class="string">"王二"</span>,</span><br><span class="line">        schedulename: <span class="string">"标题"</span>,</span><br><span class="line">        scheduleid: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        storeUsername (state,name) &#123;</span><br><span class="line">            state.username = name</span><br><span class="line">            storeLocalStore (state)</span><br><span class="line">        &#125;,</span><br><span class="line">        storeSchedulename (state,name) &#123;</span><br><span class="line">            state.schedulename = name</span><br><span class="line">            storeLocalStore (state)</span><br><span class="line">        &#125;,</span><br><span class="line">        storeScheduleid (state,id) &#123;</span><br><span class="line">            state.scheduleid = <span class="built_in">Number</span>(id)</span><br><span class="line">            storeLocalStore (state)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后在页面加载时再从localStorage里将数据取回来放到vuex里，于是王二在 <code>App.vue</code> 的 <code>created</code> 钩子函数里写下了如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localStorage.getItem(<span class="string">"userMsg"</span>) &amp;&amp; <span class="keyword">this</span>.$store.replaceState(<span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"userMsg"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//考虑到第一次加载项目时localStorage里没有userMsg的信息，所以在前面要先做判断</span></span><br></pre></td></tr></table></figure><p>这样就能比较圆满的解决问题了。</p><h3 id="三、另一种解决方案"><a href="#三、另一种解决方案" class="headerlink" title="三、另一种解决方案"></a>三、另一种解决方案</h3><p>以上的解决方法由于要频繁地触发 <code>localStorage.setItem</code> 方法，所以对性能很不友好。而且如果一直同步vuex里的数据到localStorage里，我们直接用localStorage做状态管理好了，似乎也没有必要再用vuex。</p><p>这时候王二想，如果有什么方法能够监听到页面的刷新事件，然后在那个监听方法里将Vuex里的数据储存到localStorage里，那该多好。</p><p>很幸运，还真有这样的监听事件，我们可以用 <code>beforeunload</code> 来达到以上目的，于是王二在 <code>App.vue</code> 的 <code>created</code> 钩子函数里写下了如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在页面加载时读取localStorage里的状态信息</span></span><br><span class="line">localStorage.getItem(<span class="string">"userMsg"</span>) &amp;&amp; <span class="keyword">this</span>.$store.replaceState(<span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">"userMsg"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//在页面刷新时将vuex里的信息保存到localStorage里</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"beforeunload"</span>,()=&gt;&#123;</span><br><span class="line">    localStorage.setItem(<span class="string">"userMsg"</span>,<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.$store.state))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样的话，似乎就比较完美了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;在Vue单页应用中，如果在某一个具体路由的具体页面下点击刷新，那么刷新后，页面的状态信息可能就会丢失掉。这时候应该怎么处理呢？如果你也有这个疑惑，这篇文章或许能够帮助到你 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端备忘" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="易面打分端重构" scheme="http://yoursite.com/tags/%E6%98%93%E9%9D%A2%E6%89%93%E5%88%86%E7%AB%AF%E9%87%8D%E6%9E%84/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>简单实现函数去抖与函数节流</title>
    <link href="http://yoursite.com/2018/03/13/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E5%8E%BB%E6%8A%96%E4%B8%8E%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/"/>
    <id>http://yoursite.com/2018/03/13/简单实现函数去抖与函数节流/</id>
    <published>2018-03-13T02:53:15.000Z</published>
    <updated>2018-08-21T09:15:11.751Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>输入框里的值需要事实提交到后台，为了避免频繁发送请求，给服务端压力，王二使用了函数去抖 </p></blockquote><a id="more"></a><h3 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h3><p>以下场景往往由于事件频繁被触发，因而频繁执行DOM操作、资源加载等重行为，导致UI停顿甚至浏览器崩溃。</p><ul><li><p>window对象的 <code>resize</code>、<code>scroll</code>事件</p></li><li><p>拖拽时的 <code>mousemove</code>事件</p></li><li><p>射击游戏中的 <code>mousedown</code>、<code>keydown</code>事件</p></li><li><p>文字输入、自动完成的 <code>keyup</code> 事件</p></li></ul><p>实际上对于 <code>window</code> 的 <code>resize</code>事件，实际需求大多为停止改变大小n毫秒后执行后续处理；而其他事件大多的需求是以一定的频率执行后续处理。针对这两种需求就出现了<code>debounce</code> 和 <code>throttle</code> 两种解决办法。</p><h3 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h3><p>在函数库 <a href="http://underscorejs.org/#debounce" target="_blank" rel="noopener">underscore</a> 里有函数去抖的实现方法，但是王二认为没有必要因此引用一个库，于是结合网上资料写了一个简单的函数去抖与函数节流的实现，参考如下代码(可以直接运行)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /**</span></span><br><span class="line"><span class="undefined">    * 空闲控制 返回函数连续调用时，空闲时间必须大于或等于 delay，func 才会执行</span></span><br><span class="line"><span class="undefined">    * @param delay &#123;number&#125;    空闲时间，单位毫秒</span></span><br><span class="line"><span class="javascript">    * @param func  &#123;<span class="function"><span class="keyword">function</span>&#125;  请求关联函数，实际应用需要调用的函数</span></span></span><br><span class="line"><span class="javascript">    * @<span class="keyword">return</span> &#123;<span class="function"><span class="keyword">function</span>&#125;    返回客户调用函数</span></span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">func, delay</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timer</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            timer &amp;&amp; clearTimeout(timer)</span></span><br><span class="line"><span class="javascript">            timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                func.apply(<span class="keyword">this</span>, args)</span></span><br><span class="line"><span class="undefined">            &#125;, delay)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /**</span></span><br><span class="line"><span class="undefined">    * 频率控制 返回函数连续调用时，func 执行频率限定为 delay 毫秒一次</span></span><br><span class="line"><span class="undefined">    * @param delay  &#123;number&#125;    延迟时间，单位毫秒</span></span><br><span class="line"><span class="javascript">    * @param func &#123;<span class="function"><span class="keyword">function</span>&#125;  请求关联函数，实际应用需要调用的函数</span></span></span><br><span class="line"><span class="javascript">    * @<span class="keyword">return</span> &#123;<span class="function"><span class="keyword">function</span>&#125;    返回客户调用函数</span></span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">func,delay</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> last = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> curr = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (curr - last &gt; delay)&#123;</span></span><br><span class="line"><span class="javascript">                func.apply(<span class="keyword">this</span>, args)</span></span><br><span class="line"><span class="undefined">                last = curr </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"a"</span>).addEventListener(<span class="string">"input"</span>,debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"函数去抖"</span>)</span></span><br><span class="line"><span class="undefined">    &#125;, 500))</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"b"</span>).addEventListener(<span class="string">"input"</span>,throttle(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"函数节流"</span>)</span></span><br><span class="line"><span class="undefined">    &#125;, 500))</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、参考文章"><a href="#三、参考文章" class="headerlink" title="三、参考文章"></a>三、参考文章</h3><p><a href="https://www.cnblogs.com/fsjohnhuang/p/4147810.html" target="_blank" rel="noopener">“^_^肥仔John”的博客圆文章</a><br><a href="https://segmentfault.com/a/1190000012751237" target="_blank" rel="noopener">“anetin”的segmentfault文章</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;输入框里的值需要事实提交到后台，为了避免频繁发送请求，给服务端压力，王二使用了函数去抖 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端备忘" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="易面打分端重构" scheme="http://yoursite.com/tags/%E6%98%93%E9%9D%A2%E6%89%93%E5%88%86%E7%AB%AF%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
</feed>
