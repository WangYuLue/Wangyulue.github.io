<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[《动物农场》读后感]]></title>
      <url>/2017/12/15/%E3%80%8A%E5%8A%A8%E7%89%A9%E5%86%9C%E5%9C%BA%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>这是一本先知书 </p>
</blockquote>
<a id="more"></a>
<p>上个礼拜读了一遍乔冶・奥威尔的《动物农场》，今天又读了另一个翻译版本，感触良多。</p>
<p>《动物农场》是一则入木三分的反乌托的政治讽喻寓言。农场的一群动物成功地进行了一场“革命”，将压榨他们的人类东家赶出农场，建立起一个平等的动物社会。然而，动物领袖，那些聪明的猪们最终却篡夺了革命的果实，成为比人类东家更加独裁和极权的统治者。“多一个人看奥威尔，就多了一分自由的保障，”有论家如是说。</p>
<p>这本书似乎有一种魔力，让王二情不自禁的以当代视角带入进去，而且没有什么突兀感，仿佛王二就置身于动物农场之中。</p>
<p>或许正如豆瓣评论里所说：这是一本先知书。</p>
<p>这里王二摘抄一些豆瓣上关于《动物农场》的书评，作为引子：</p>
<p>一、</p>
<blockquote>
<p>革命的都是无产阶级，所以一开始不想平等都难。一穷二白的时候最容易产生共识，所以能够行动一致。但是对社会理论（也就是老猪少校那一套论述）的理解和发展，并不是每个动物都能做到。从动物们后来对“七诫”的掌握来看，智力水平的参差不齐明白摆在那里。有的连字母表都背不齐,所以不要指望他们把老少校的教导发展成系统的思想体系。</p>
</blockquote>
<p>二、</p>
<blockquote>
<p>如果领导只有拿破仑一个了，而且它又掌握了武装力量。它是不是就可以建立阶级统治了？不，经验告诉它如果其他动物感受到专制独裁的话，会再次革命的。所以它需要找到可以为自己可能引起其它动物反抗的做法辩解的方法：<br>   （1）、少出现。它出现的次数越多，时间越长，和其他动物接触越多，就越有可能暴露自己的弱点。而这些弱点肯定存在，也肯定跟他英明形象背道而驰。而他出现的少，每次才珍贵。<br>   （2）、找到一个更高的舌头。这个自然是嘎吱的角色。自己亲自说的话会让人不信服。至于说辞，更多的就是永远告诉群众他们有多蠢，领导者想的比他们复杂。比他们深刻，领导者是对的。<br>   （3）、一群傻瓜和一个傻瓜。需要找一匹马，用它的淳朴和忠诚来作正面的、明确的宣传，从而把independent thoughts各个击破。需要找一群羊，来唱些简单而上口的歌，用打太极的方式调和不和谐因素，从而把浑噩浑浊的其他同志们搅和成没有立场的，就更容易改造成正果。<br>   （4）、树立一个敌人。在任何情况下，凝聚力的产生都是在对外的时候。只有树立一个敌人（不管它存在不存在），把大家的仇恨转移到敌人的身上，把所有的苦难都归于敌人的错。才能使人们万众一心，不会怀疑你的领导，而只会默默接受你的领导。</p>
</blockquote>
<p>三、</p>
<blockquote>
<p>极权不是在我们与资本主义决裂的时候被同时抛弃了， 而是任何制度都会产生的一种东西。作为不能影响政治的人，在你吃不饱、穿不暖、自由受到限制的时候，要相信自己的感官，而不是官方的宣传。并确信，出现这种状况绝对是不正常的。这个时候，极权很可能已经形成了。</p>
</blockquote>
<p>四、</p>
<blockquote>
<p>你一再批判的所谓的社会不公平，只是因为你没有站在天平翘起的那一端。当我们总是在批判现在制度的腐败时，我们也在为自己认识位高权重的人并为此得利而沾沾自喜。“我上边有人”，并非只是调侃的笑话。每个人在面对利益取舍时都成了不许他人点灯，只许自己放火的独裁者。<br>    中国的历史是能最好地诠释人性潜力的含义的，而《动物农场》在当时则相当精确地预言了中国的未来。这本书虽然不是为了中国而写，却是活生生地在中国铺展开。</p>
</blockquote>
<p>如果以上的评价能勾起读者你的兴趣，王二推荐读一下原著，六十多页，不算长，两个小时就能读完，你会得到很多感悟、脑子里会蹦出很多想法。</p>
<p>不过，读完不要乱讲话，老大哥在看着你。</p>
<p>相关推荐阅读：<br><a href="https://book.douban.com/subject/2035179/" target="_blank" rel="external">豆瓣读书《动物农场》</a><br><a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E7%89%A9%E5%BA%84%E5%9B%AD" target="_blank" rel="external">维基百科《动物农场》</a>(需科学上网)<br><a href="https://www.zhihu.com/search?type=content&amp;q=%E5%8A%A8%E7%89%A9%E5%86%9C%E5%9C%BA" target="_blank" rel="external">知乎关于《动物农场》的话题</a></p>
<p>电子书：<br><a href="https://pan.baidu.com/s/1mizNoLi" target="_blank" rel="external">百度云</a>  秘钥 ：zkq5</p>
]]></content>
      
        <categories>
            
            <category> 王二说 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js实现等待wait函数]]></title>
      <url>/2017/12/14/js%E5%AE%9E%E7%8E%B0%E7%AD%89%E5%BE%85wait%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>以我以前的认知，JS是不能实现阻塞的，除非是alert()、confirm()这样的函数；不过通道巧妙地利用whlie关键字，我们还是可以实现类似JAVA中wait()函数的功能 </p>
</blockquote>
<a id="more"></a>
<p>废话就不多说了，直接上代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//具体实现方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">ms</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">    <span class="keyword">var</span> end = start;</div><div class="line">    <span class="keyword">while</span>(end &lt; start + ms) &#123;</div><div class="line">        end = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello wanger"</span>);</div><div class="line">    wait(<span class="number">1000</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello World ！"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">demo()</div></pre></td></tr></table></figure>
<p>以上代码中，打印 <code>Hello wanger</code> 一秒后,才会再打印 <code>Hello World ！</code> </p>
<p>以上的 <code>wait</code> 方法还有一个更精简的实现方式，参考如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait</span>(<span class="params">ms</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &lt; start + ms);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[扩展运算符的简单用法]]></title>
      <url>/2017/12/05/%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>这篇文章简单介绍一下扩展运算符的一些使用场景 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、获取-arguments-中的参数"><a href="#一、获取-arguments-中的参数" class="headerlink" title="一、获取 arguments 中的参数"></a>一、获取 arguments 中的参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo1</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>)) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo2</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log([...arguments]) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、合并数组"><a href="#二、合并数组" class="headerlink" title="二、合并数组"></a>二、合并数组</h3><p>例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>].concat(more)</div><div class="line"><span class="comment">// ES6</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more]</div></pre></td></tr></table></figure>
<p>再比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</div><div class="line"><span class="keyword">let</span> arr2 = [<span class="string">'c'</span>];</div><div class="line"><span class="keyword">let</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</div><div class="line"></div><div class="line"><span class="comment">// ES5的合并数组</span></div><div class="line">arr1.concat(arr2, arr3);</div><div class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div><div class="line"></div><div class="line"><span class="comment">// ES6的合并数组</span></div><div class="line">[...arr1, ...arr2, ...arr3]</div><div class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div></pre></td></tr></table></figure>
<h3 id="三、字符串反转"><a href="#三、字符串反转" class="headerlink" title="三、字符串反转"></a>三、字符串反转</h3><p>扩展运算符可以正确识别四个字节的 <code>Unicode</code> 字符,参考如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">'x\uD83D\uDE80y'</span>;</div><div class="line"></div><div class="line"><span class="comment">//ES5</span></div><div class="line">str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line"><span class="comment">// 'y\uDE80\uD83Dx'</span></div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line">[...str].reverse().join(<span class="string">''</span>)</div><div class="line"><span class="comment">// 'y\uD83D\uDE80x'</span></div></pre></td></tr></table></figure>
<h3 id="四、合并对象"><a href="#四、合并对象" class="headerlink" title="四、合并对象"></a>四、合并对象</h3><p>扩展运算符可以用于合并对象，参考如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = &#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">c</span>:<span class="number">4</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> ab = &#123; ...a, ...b &#125;;</div><div class="line"><span class="comment">// &#123;a: 3, b: 2, c: 4&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">var</span> ab = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</div></pre></td></tr></table></figure></p>
<p>参考文档：<br><a href="http://es6.ruanyifeng.com/#docs/array" target="_blank" rel="external">阮一峰的”ECMAScript 6 入门”</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="external">MDN文档</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解构赋值的简单用法]]></title>
      <url>/2017/12/04/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候，ES6中的解构赋值用起来会很方便，这里简单分享一下平时开发中会使用到解构赋值的三个场景 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、交换变量的值"><a href="#一、交换变量的值" class="headerlink" title="一、交换变量的值"></a>一、交换变量的值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</div><div class="line"></div><div class="line">[x, y] = [y, x];</div></pre></td></tr></table></figure>
<h3 id="二、对象的解构赋值，可以很方便地将现有对象的属性、值或方法，赋值到某个变量。"><a href="#二、对象的解构赋值，可以很方便地将现有对象的属性、值或方法，赋值到某个变量。" class="headerlink" title="二、对象的解构赋值，可以很方便地将现有对象的属性、值或方法，赋值到某个变量。"></a>二、对象的解构赋值，可以很方便地将现有对象的属性、值或方法，赋值到某个变量。</h3><p>例如，下面的代码会将 <code>Math</code> 对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; floor, round, random &#125; = <span class="built_in">Math</span>;</div></pre></td></tr></table></figure>
<p>在提取 <code>JSON</code> 对象中的数据时，也会方便很多，参考如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> jsonData = &#123;</div><div class="line">  id: <span class="number">42</span>,</div><div class="line">  status: <span class="string">"OK"</span>,</div><div class="line">  data: [<span class="number">867</span>, <span class="number">5309</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; id, status, data &#125; = jsonData;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(id, status, data);</div><div class="line"><span class="comment">// 42, "OK", [867, 5309]</span></div></pre></td></tr></table></figure>
<p>需要注意的是，在以上代码中，如果变量名与属性名不一致，需要写成下面这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> jsonData = &#123;</div><div class="line">  id: <span class="number">42</span>,</div><div class="line">  status: <span class="string">"OK"</span>,</div><div class="line">  data: [<span class="number">867</span>, <span class="number">5309</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(id, status, number);</div><div class="line"><span class="comment">// 42, "OK", [867, 5309]</span></div></pre></td></tr></table></figure>
<h3 id="三、函数参数的默认值"><a href="#三、函数参数的默认值" class="headerlink" title="三、函数参数的默认值"></a>三、函数参数的默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">jQuery.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">url, &#123;</span></span></div><div class="line"><span class="function"><span class="params">  async = true,</span></span></div><div class="line"><span class="function"><span class="params">  beforeSend = function (</span>) </span>&#123;&#125;,</div><div class="line">  cache = <span class="literal">true</span>,</div><div class="line">  complete = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">  crossDomain = <span class="literal">false</span>,</div><div class="line">  global = <span class="literal">true</span>,</div><div class="line">  <span class="comment">// ... more config</span></div><div class="line">&#125;) &#123;</div><div class="line">  <span class="comment">// ... do stuff</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>指定参数的默认值，这样就避免了在函数体内部再写类似 <code>var foo = config.foo || &#39;default foo&#39;;</code> 的语句。</p>
<p>参考文档：<br><a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="external">阮一峰的”ECMAScript 6 入门”</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue中正确配置并使用scss]]></title>
      <url>/2017/11/23/vue%E4%B8%AD%E6%AD%A3%E7%A1%AE%E9%85%8D%E7%BD%AE%E5%B9%B6%E4%BD%BF%E7%94%A8scss/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>scss是个好东西，写起css来很爽，不过vue的脚手架默认没装scss，这时候需要我们额外配置，配置虽然简单，但难免有有时候会出错，于是索性在这里记录一下。如果之前还没有了解过scss,可以先看看<a href="http://www.wangyulue.com/2017/10/30/sass%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/" target="_blank" rel="external">这篇博文</a> </p>
</blockquote>
<a id="more"></a>
<h3 id="一、安装依赖"><a href="#一、安装依赖" class="headerlink" title="一、安装依赖"></a>一、安装依赖</h3><p>正确加载scss文件需要安装 <code>node-sass</code> 以及 <code>sass-loader</code>,参考以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install node-sass sass-loader --save-dev</div></pre></td></tr></table></figure>
<h3 id="二、修改-webpack-base-conf-js-文件"><a href="#二、修改-webpack-base-conf-js-文件" class="headerlink" title="二、修改 webpack.base.conf.js 文件"></a>二、修改 webpack.base.conf.js 文件</h3><p>在配置文件的 <code>module.rules</code> 下加上如下规则：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: <span class="regexp">/\.scss$/</span>,</div><div class="line">    include:<span class="string">'/src/'</span>,</div><div class="line">    loader: <span class="string">'style-loader!css-loader!sass-loader'</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、简单的配置过-sass-的脚手架"><a href="#三、简单的配置过-sass-的脚手架" class="headerlink" title="三、简单的配置过 sass 的脚手架"></a>三、简单的配置过 sass 的脚手架</h3><p>如果参考上述配置后依旧报错，可以参考这个<a href="https://github.com/WangYuLue/vue_sass_cil" target="_blank" rel="external">简单的配置过 sass 的脚手架</a>项目，看看里面是如何配置的。</p>
<p>或者选个文件夹敲下如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 克隆远程代码</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/WangYuLue/vue_sass_cil</div><div class="line"></div><div class="line"><span class="comment"># 进入克隆的文件夹</span></div><div class="line"><span class="built_in">cd</span> vue_sass_cil</div><div class="line"></div><div class="line"><span class="comment"># 安装依赖</span></div><div class="line">npm install</div><div class="line"></div><div class="line"><span class="comment"># 运行代码</span></div><div class="line">npm run dev</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[猫头鹰选择器]]></title>
      <url>/2017/11/22/%E7%8C%AB%E5%A4%B4%E9%B9%B0%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如果要给所有拥有前一个同胞节点的元素设置 <code>margin-top</code>值，可以有三个写法解决这个问题，在这里做一个备忘 </p>
</blockquote>
<a id="more"></a>
<h3 id="需求是什么？"><a href="#需求是什么？" class="headerlink" title="需求是什么？"></a>需求是什么？</h3><p>有一个列表，如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">        <span class="selector-id">#main</span>&gt;<span class="selector-tag">div</span>&#123;</span></div><div class="line"><span class="undefined">            margin-top: 20px;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在想让列表里的盒子分开一点，于是给每个盒子一个<code>margin-top</code>属性.</p>
<p>需求是想让列表的第一个盒子不拥有<code>margin-top</code>属性，这时候样式该怎么写？</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>有三个方法可以简单的解决上述问题。</p>
<h4 id="1、使用-not-选择器"><a href="#1、使用-not-选择器" class="headerlink" title="1、使用 not 选择器"></a>1、使用 not 选择器</h4><p>将上述样式改成如下即可解决：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#main</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:first-child)</span>&#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2、使用-nth-child-选择器"><a href="#2、使用-nth-child-选择器" class="headerlink" title="2、使用 nth-child() 选择器"></a>2、使用 nth-child() 选择器</h4><p>将上述样式改成如下即可解决：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#main</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(n+2)</span>&#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3、使用猫头鹰选择器"><a href="#3、使用猫头鹰选择器" class="headerlink" title="3、使用猫头鹰选择器"></a>3、使用猫头鹰选择器</h4><p>将上述样式改成如下即可解决：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#main</span>&gt;<span class="selector-tag">div</span>+<span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解浏览器缓存以及304状态码]]></title>
      <url>/2017/11/20/%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E4%BB%A5%E5%8F%8A304%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>过去没太研究过HTTP,最近有空,看了一些。本文主要讨论浏览器缓存以及304状态码的一些知识，在这里做一个分享 </p>
</blockquote>
<a id="more"></a>
<p>废话少说，先上一张HTTP请求流程图：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/28.png?raw=true" alt="Alt text"></p>
<h3 id="一、详细讨论"><a href="#一、详细讨论" class="headerlink" title="一、详细讨论"></a>一、详细讨论</h3><h4 id="1、是否禁止缓存"><a href="#1、是否禁止缓存" class="headerlink" title="1、是否禁止缓存"></a>1、是否禁止缓存</h4><p><strong>禁止缓存</strong>指的是缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。</p>
<p>在请求头中，<code>Cache-Control: no-cache</code>与<code>Pragma: no-cache</code>都可以禁止缓存，</p>
<p>但两者也有区别，<code>Pragma: no-cache</code>可以兼容<code>http 1.0</code> ，而<code>Cache-Control: no-cache</code>是<code>http 1.1</code>提供的。因此，<code>Pragma: no-cache</code>可以应用到<code>http 1.0</code>和<code>http 1.1</code>,而<code>Cache-Control: no-cache</code>只能应用于<code>http 1.1</code>。</p>
<h4 id="2、是否检查本地副本是否过期"><a href="#2、是否检查本地副本是否过期" class="headerlink" title="2、是否检查本地副本是否过期"></a>2、是否检查本地副本是否过期</h4><p><strong>是否检查本地版本是否过期</strong>主要由<code>no-cache</code>和<code>must-revalidate</code>这两个值控制，其中：</p>
<blockquote>
<ul>
<li><code>no-cache</code>: 告诉浏览器、缓存服务器，不管本地副本是否过期，使用资源副本前，一定要到源服务器进行副本有效性校验。</li>
<li><code>must-revalidate</code>：告诉浏览器、缓存服务器，本地副本过期前，可以使用本地副本；本地副本一旦过期，必须去源服务器进行有效性校验。</li>
</ul>
</blockquote>
<h4 id="3、本地副本是否过期"><a href="#3、本地副本是否过期" class="headerlink" title="3、本地副本是否过期"></a>3、本地副本是否过期</h4><p>想要知道本地副本是否过期，我们就需要了解<strong>缓存的过期机制</strong>：</p>
<p>(1)、过期机制中，最重要的指令是 <code>max-age=&lt;seconds&gt;</code>,它表示资源能够被缓的最大时间；它通常会和<code>must-revalidate</code>一起使用，使用起来就像下面这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cache-Control: max-age=<span class="number">60</span>, must-revalidate</div></pre></td></tr></table></figure>
<p>(2)、如果不含有<code>max-age</code>属性，则会去查看是否包含<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires" target="_blank" rel="external">Expires</a>属性，，通过比较<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires" target="_blank" rel="external">Expires</a>的值和头里面<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Date" target="_blank" rel="external">Date</a>属性的值来判断是否缓存还有效。</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/20.png?raw=true" alt="Alt text"></p>
<p>(3)、如果 <code>max-age</code> 和 <code>expires</code> 属性都没有，找找头里的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified" target="_blank" rel="external">Last-Modified</a> 信息。如果有，缓存的寿命就等于头里面 <code>Date</code>的值减去<code>Last-Modified</code>的值除以10（注：根据rfc2626其实也就是乘以10%）。</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/21.png?raw=true" alt="Alt text"></p>
<h4 id="4、如果本地副本没有过期"><a href="#4、如果本地副本没有过期" class="headerlink" title="4、如果本地副本没有过期"></a>4、如果本地副本没有过期</h4><p>如果本地副本没有过期，则会直接重缓存中读取资源，并返回200状态码。</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/22.png?raw=true" alt="Alt text"></p>
<h4 id="5、如果本地副本过期"><a href="#5、如果本地副本过期" class="headerlink" title="5、如果本地副本过期"></a>5、如果本地副本过期</h4><p>如果本地副本过期，则会进行<strong>到源服务器进行有效性校验的前期准备</strong>。</p>
<p>首先，会在请求头里寻找<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match" target="_blank" rel="external">If-None-Match</a>字段，其值为服务器上次返回的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag" target="_blank" rel="external">ETag</a>响应头的值:</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/23.png?raw=true" alt="Alt text"></p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/27.png?raw=true" alt="Alt text"></p>
<p>如果请求头里没有<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-None-Match" target="_blank" rel="external">If-None-Match</a>字段，则会在请求头中寻找<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Modified-Since" target="_blank" rel="external">If-Modified-Since</a>字段，其值为服务器上次返回的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Last-Modified" target="_blank" rel="external">Last-Modified</a>响应头中的日期值：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/24.png?raw=true" alt="Alt text"></p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/25.png?raw=true" alt="Alt text"></p>
<p>如果<code>If-None-Match</code>与<code>If-Modified-Since</code>都没有，则会直接向服务器请求数据。</p>
<h4 id="6、到源服务器进行有效性校验"><a href="#6、到源服务器进行有效性校验" class="headerlink" title="6、到源服务器进行有效性校验"></a>6、到源服务器进行有效性校验</h4><p>如果请求头中带有<code>If-None-Match</code>或<code>If-Modified-Since</code>，则会到源服务器进行有效性校验，<strong>如果源服务器资源没有变化，则会返回304；如果有变化，则返回200；</strong></p>
<h4 id="7、上述的一些流程还可以用下图来表示"><a href="#7、上述的一些流程还可以用下图来表示" class="headerlink" title="7、上述的一些流程还可以用下图来表示"></a>7、上述的一些流程还可以用下图来表示</h4><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/26.png?raw=true" alt="Alt text"></p>
<h3 id="二、补充"><a href="#二、补充" class="headerlink" title="二、补充"></a>二、补充</h3><h4 id="私有缓存和公共缓存"><a href="#私有缓存和公共缓存" class="headerlink" title="私有缓存和公共缓存"></a>私有缓存和公共缓存</h4><p>在<code>Cache-Control</code>还有两个值：<code>private</code>与<code>public</code>，其中：</p>
<p><code>public</code> 指令表示该响应可以被任何中间人（比如中间代理、CDN等）缓存。若指定了 <code>public</code> ，则一些通常不被中间人缓存的页面（因为默认是 <code>private</code>）（比如 带有HTTP验证信息（帐号密码）的页面 或 某些特定影响状态码的页面），将会被其缓存。</p>
<p>而 <code>private</code> 则表示该响应是专用于某单个用户的，中间人不能缓存此响应，该响应只能应用于浏览器私有缓存中。</p>
<h3 id="三、参考文档"><a href="#三、参考文档" class="headerlink" title="三、参考文档"></a>三、参考文档</h3><p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25" target="_blank" rel="external">HTTP协议</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ#Cache_validation" target="_blank" rel="external">MDN</a><br><a href="https://segmentfault.com/a/1190000004084801" target="_blank" rel="external">segmentfault网站上’赵雍’的回答</a><br><a href="http://www.cnblogs.com/ziyunfei/archive/2012/11/16/2772729.htm" target="_blank" rel="external">‘紫云飞’的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中图片压缩的一般方法]]></title>
      <url>/2017/11/13/JS%E4%B8%AD%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E7%9A%84%E4%B8%80%E8%88%AC%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>前两天公司业务上有需求需要将较大的图片压缩后再传到远程服务器，网上找了不少方法都不太好用，今天有空索性自己写了一个方法，并把它放到了自己的github上，有兴趣的同学可以戳<a href="https://github.com/WangYuLue/imageResizeTool" target="_blank" rel="external">这里</a> </p>
</blockquote>
<a id="more"></a>
<h3 id="一、需求是什么？"><a href="#一、需求是什么？" class="headerlink" title="一、需求是什么？"></a>一、需求是什么？</h3><p>首先想一想我们有哪些需求？大多时候我们需要将一个File对象压缩之后再变为File对象传入到远程图片服务器；有时候我们也需要将一个base64字符串压缩之后再变为base64字符串传入到远程数据库；有时候后它还有可能是一块canvas画布，或者是一个Image对象，或者直接就是一个图片的url地址，我们需要将它们压缩上传到远程；面对这么多的需求，王二索性画了一张图：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/15.png?raw=true" alt="Alt text"></p>
<h3 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h3><p>如上图所示，王二一共写了七个方法，基本覆盖了JS中大部分文件类型的转换与压缩，其中：</p>
<p>1、<code>urltoImage(url,fn)</code> 会通过一个url加载所需要的图片对象，其中<code>url</code>参数传入图片的<code>url</code>,<code>fn</code>为回调方法,包含一个Image对象的参数，代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">urltoImage</span> (<span class="params">url,fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">    img.src = url;</div><div class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        fn(img);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>2、<code>imagetoCanvas(image)</code>会将一个<code>Image</code>对象转变为一个<code>Canvas</code>类型对象，其中<code>image</code>参数传入一个Image对象，代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">imagetoCanvas</span>(<span class="params">image</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> cvs = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">    <span class="keyword">var</span> ctx = cvs.getContext(<span class="string">'2d'</span>);</div><div class="line">    cvs.width = image.width;</div><div class="line">    cvs.height = image.height;</div><div class="line">    ctx.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, cvs.width, cvs.height);</div><div class="line">    <span class="keyword">return</span> cvs ;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>3、<code>canvasResizetoFile(canvas,quality,fn)</code>会将一个<code>Canvas</code>对象压缩转变为一个<code>Blob</code>类型对象；其中<code>canvas</code>参数传入一个<code>Canvas</code>对象;<code>quality</code>参数传入一个0-1的<code>number</code>类型，表示图片压缩质量;<code>fn</code>为回调方法，包含一个<code>Blob</code>对象的参数;代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">canvasResizetoFile</span>(<span class="params">canvas,quality,fn</span>)</span>&#123;</div><div class="line">    canvas.toBlob(<span class="function"><span class="keyword">function</span>(<span class="params">blob</span>) </span>&#123;</div><div class="line">        fn(blob);</div><div class="line">    &#125;,<span class="string">'image/jpeg'</span>,quality);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里的<code>Blob</code>对象表示不可变的类似文件对象的原始数据。<code>Blob</code>表示不一定是<code>JavaScript</code>原生形式的数据。 <code>File</code>接口基于<code>Blob</code>，继承了<code>Blob</code>的功能并将其扩展使其支持用户系统上的文件。我们可以把它当做File类型对待，其他更具体的用法可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="external">MDN文档</a></p>
</blockquote>
<p>4、<code>canvasResizetoDataURL(canvas,quality)</code> 会将一个<code>Canvas</code>对象压缩转变为一个<code>dataURL</code>字符串,其中<code>canvas</code>参数传入一个<code>Canvas</code>对象;<code>quality</code>参数传入一个0-1的<code>number</code>类型，表示图片压缩质量;代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">methods.canvasResizetoDataURL = <span class="function"><span class="keyword">function</span>(<span class="params">canvas,quality</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> canvas.toDataURL(<span class="string">'image/jpeg'</span>,quality);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>其中的 <code>toDataURL</code> API可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="external">MDN文档</a></p>
</blockquote>
<p>5、<code>filetoDataURL(file,fn)</code> 会将 <code>File</code>（<code>Blob</code>）类型文件转变为<code>dataURL</code>字符串,其中 <code>file</code> 参数传入一个<code>File</code>（<code>Blob</code>）类型文件;<code>fn</code>为回调方法，包含一个<code>dataURL</code>字符串的参数;代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filetoDataURL</span>(<span class="params">file,fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">    reader.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        fn(e.target.result);</div><div class="line">    &#125;;</div><div class="line">    reader.readAsDataURL(file);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>6、<code>dataURLtoImage(dataurl,fn)</code> 会将一串<code>dataURL</code>字符串转变为<code>Image</code>类型文件,其中<code>dataurl</code>参数传入一个<code>dataURL</code>字符串,<code>fn</code>为回调方法，包含一个<code>Image</code>类型文件的参数，代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoImage</span>(<span class="params">dataurl,fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        fn(img);</div><div class="line">    &#125;;</div><div class="line">    img.src = dataurl;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>7、<code>dataURLtoFile(dataurl)</code> 会将一串<code>dataURL</code>字符串转变为<code>Blob</code>类型对象，其中<code>dataurl</code>参数传入一个<code>dataURL</code>字符串,代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoFile</span>(<span class="params">dataurl</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</div><div class="line">        bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</div><div class="line">    <span class="keyword">while</span>(n--)&#123;</div><div class="line">        u8arr[n] = bstr.charCodeAt(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123;<span class="attr">type</span>:mime&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="三、进一步封装"><a href="#三、进一步封装" class="headerlink" title="三、进一步封装"></a>三、进一步封装</h3><p>对于常用的将一个<code>File</code>对象压缩之后再变为<code>File</code>对象,我们可以将上面的方法再封装一下，参考如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileResizetoFile</span>(<span class="params">file,quality,fn</span>)</span>&#123;</div><div class="line">    filetoDataURL (file,<span class="function"><span class="keyword">function</span>(<span class="params">dataurl</span>)</span>&#123;</div><div class="line">        dataURLtoImage(dataurl,<span class="function"><span class="keyword">function</span>(<span class="params">image</span>)</span>&#123;</div><div class="line">            canvasResizetoFile(imagetoCanvas(image),quality,fn);</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，<code>file</code>参数传入一个<code>File</code>（<code>Blob</code>）类型文件；<code>quality</code>参数传入一个<code>0-1</code>的<code>number</code>类型，表示图片压缩质量；<code>fn</code>为回调方法，包含一个<code>Blob</code>类型文件的参数。</p>
<p>它使用起来就像下面这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).files[<span class="number">0</span>];</div><div class="line">fileResizetoFile(file,<span class="number">0.6</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(res);</div><div class="line">    <span class="comment">//拿到res，做出你要上传的操作；</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这样的话，图片压缩上传就能轻松地搞定了，以上的8个方法我已经封装好放到<a href="https://github.com/WangYuLue/imageResizeTool" target="_blank" rel="external">github</a>上了，喜欢的话可以使劲的star哈。</p>
<p>参考文档：<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="external">MDN</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 图片压缩 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[信息过剩与极简主义]]></title>
      <url>/2017/11/12/%E4%BF%A1%E6%81%AF%E8%BF%87%E5%89%A9%E4%B8%8E%E6%9E%81%E7%AE%80%E4%B8%BB%E4%B9%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>由于信息爆炸，很多人都有有限精力和信息过剩之间的矛盾，这时候需要确定自己真正想要什么，闭源开流，只接受对自己有益的信息，做一个极简主义者。 </p>
</blockquote>
<a id="more"></a>
<p>不知道什么时候，王二养成了不少坏习惯。周末假期，王二会漫无目的地刷知乎、微博、朋友圈刷一下午,晚饭过后,什么也记不得了；有时候，也会一口气下载了几百本电子书，却重来没有阅读过；微博、知乎上有大量的收藏但再没翻开过；手机上很多APP，但经常用的却没几个；有时候甚至会在头条、知乎、微博的按钮之间迷茫，实在不知道该点开哪一个。王二知道，自己出问题了。</p>
<p>我想，这不单单是王二才有的问题，生在这个时代，我们多多少少会有上面的毛病。信息爆炸是互联网赋予给这个时代的特征，表面上的选择是非常多了，但是我们往往却不知所错，获取信息的手段实在是太低廉了，点开一个按钮，就能了解到世界上发生了什么，何况还有那么多按钮。你甚至不用主动获取，这些APP就会自动推送消息给你。</p>
<p>小些时候包个5元钱30兆流量，手机上只有个浏览器，逛逛论坛水水贴吧，流量还要省着花，快乐感也要比现在强不少。</p>
<p>理论上，如果两个人都能连上互联网，那么在接受信息方面，他们是平等的，都有能力获得相同的信息。那么，互联网弥平了信息的差距了吗？没有。</p>
<p>举个例子，同样是使用微信，有些大叔会把它当做赌博工具；同样是微信公众号，有些大妈却更偏爱于风水养生；还有美剧，有些人把它当做练习英语口语来看，还有人当做言情故事来看；再拿知乎的打开方式来说，自己主动到知乎检索问题和被动地接收知乎算法的推荐所得到的收获，那差距堪比法拉利之与永久，清华学霸之于我。</p>
<p>由于信息筛选能力以及方向的差异，接受信息的差距非但没有缩小，反而扩大了。</p>
<p>于是出现了一个有趣现象，很多人刷了那么多微博，还是讲不出段子，刷了那么多知乎，还是写不出好的故事，看了那么多美剧，英语口语却一直没有长进。每天早上一觉醒来，又能记得多少昨天看了什么。</p>
<p>事实上，很多人都面临着一个矛盾，即个人有限精力和信息过剩之间的矛盾。</p>
<p>拿王二来说，在过去一段时间里，为了做好自己的时间管理，王二下载了大量关于APP。它们各有特色，有的可以设置自己的每日必做、每周必做清单，还有提醒功能；有些可以记录过去一天做了哪些事情，还可以插入图片，高级版的还可以插入语音；有些还可以生成漂亮的时间线的，记录去年同期你正在干什么事情；有些可以记录下过去时间里对你产生重大影响的时刻，而且UI做的非常漂亮；有些还允许你像手记那样随心记录，不拘泥于格式；有些app便签还可以分成很多类，工作上的、生活上的、社交上的；有些做的很激进的，打开这个app 后就不能用其他的app 了；更有厉害的会让你记录此时此刻你正在什么地方干了些什么，而且会生成很多图表帮你分析时间用到哪里了，有哪些需要改进的地方。</p>
<p>王二开始非常兴奋，有这些管理工具，自己的生活一定会井井有条。然而事与愿违，生活再一次失控。实不相瞒，很多app打开一次后便再也没有打开第二次。</p>
<p>王二了解自己的焦虑——这么牛逼的功能不用会不会降低我生活的效率，就像平时刷知乎、微博，生怕一天不刷就是错过了什么大事。我们都希望抓住对自己一切有用的东西，但是往往事与愿违，精力有限。不要高估自己，误以为自己有足够的精力可以妥善处理好自己关注的所有事物。</p>
<p>我们需要花一段时间了解自己的目标是什么，自己想要成为什么样的人。是自媒体时代的弄潮儿？IT行业的技术专家？证券市场上叱咤风云的操盘手？还是泡满一百个姑娘的情场浪子？确定好以后，闭源开流，贯彻极简主义精神，只接受有利于达成目标的信息，处理过去的冗余信息。</p>
<p>就像是在一片肥沃的黑土地上，漫无目的的接受信息就像是随手抓起一把种子撒向这片土地，最终也会因为营养不良长出一片矮小的灌木丛。我们只需要少量几颗种子，定期为他们除草施肥，细心栽培，陪伴他们慢慢长大。但是要注意，时间有限，我们除草施肥的时间不多，如果树木太多而我们都又兼顾的话，那么可能他们长的都不会太好。如果是这样，就砍掉一些树吧，虽然有时候不忍心，但是必须要做出这样的抉择。单个树木也是，如果让他的枝叶肆意生长，终究长不太高，我需要定期修建，虽然有时候会不太舍得，但也是为了树木更好的成长。</p>
<p>我们还需要维护好自己的时间线，关掉不感兴趣的APP推送，或者直接删掉这些APP；取关已经累积数十条没看的公众号；退出不感兴趣的的群聊；删掉微信里也不知道是什么时候加的好友；屏蔽微商的朋友圈；删除自己一年不联系的联系人；少打游戏；给自己一些限制，只关注10个公众号，手机第一页只放10个常用的APP，我们需要的真的不是很多。</p>
<p>像王二这样自控力不强，有时候自己不能控制自己的，可以整理一份自己的“无聊时就做”清单，“无聊时就做”清单有三个原则：1、不要太多（不超过10条），适时更新；2、对自己的目标有益；3、促进思维发散，需要集中思考的不要放在清单里。</p>
<p>当自己打算做玩游戏、刷盆友圈、刷知乎这些“坏事情”时，请先过目一下自己的“无聊时就做”清单，它就像计算机语言中的“过滤器”，如果“无聊时就做”清单里的事情都提不起你的兴趣，那好吧，“过滤器”放行，你就去做这些“坏事情”吧。需要注意的的，自己“无聊时就做”清单并不意味着里面就不能有刷盆友圈，刷知乎，看美剧的选项，但是目标一定要具体，比如“阅读知乎上关于机器学习话题下精华部分前十高赞的回答并做笔记”，“看看好久不见的xx老朋友又发了哪些动态”，“看一集Rick and Morty”，”做五组俯卧撑”。</p>
<p>对于过去照片、文档、演讲稿、浏览器收藏以及其他个人资料，我们要做好心理准备，下好决心，清理掉那些自认为还有用但是以后再也不会用到的信息。</p>
<p>过去就像一个每个位置上都铺满厚厚纸片的房子，纸片中有不少重要线索，它们记录着过去的理想，过去生活的瞬间，过去你的认为及其重要的东西，过去的开心与快乐，过去的精神状况。这是生命中最珍贵的一部分回忆，你或许根本不想打乱他们，移动他们的位置，模糊了它们最初的模样，只是想在闲暇时间翻翻这些纸片，看看过去的自己。但不管怎么说，房间是要打扫一下了，虽然这会让自己的过去失真，但是不这样做的话纸片会越铺越厚，这些线索也会更加难以找到，我们只能筛选出一些值得纪念的纸片，把它们整理好，归档放到文件夹内。其他的，通通扔进垃圾桶。</p>
<p>不仅要把房间打扫干净，还要维持好这种状态，定期整理未处理的信息，不要吧纸片扔的满房间都是了。秩序，需要在我们内心的最底层建立。</p>
<p>如果读者你认为这篇文章有一些参考意义并打算将之付诸于实践，那有一点必须要提醒一下：只关注自己感兴趣的东西也会带来一些副作用，如果自己的时间线上都只限定于那几个化题，那么自我观点会不断的强化，认为自己关注的事物就是这世界的全部。就像头条刷多了推送的都是自己感兴趣的话题，实际上这会限制自己的视野，忽略了其他有趣的事情，这时候就需要加入一些“不和谐”的因素，刷刷知乎、Filpboard 就是不错的选择，但是也不要用力过猛，一刷就是一下午。</p>
<p>事实上，做好上面几点很难，这是一个系统工程，需要花费不少时间。把自己想象成是一个公司，你就是管理这个公司的CEO，管理好这个公司需要艺术，更需要耐心，但是值得尝试。</p>
<p>逻辑有些混乱，最后我用一句话总结一下这篇文章讲了什么：由于信息爆炸，很多人都有有限精力和信息过剩之间的矛盾，这时候需要确定自己真正想要什么，闭源开流，只接受对自己有益的信息，做一个极简主义者。</p>
]]></content>
      
        <categories>
            
            <category> 王二说 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 时间管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Typescript 初体验（三）]]></title>
      <url>/2017/11/08/typescript-%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近<code>vue2.5</code>发布，其中提到了将大力加强对<code>TypeScript</code>和<code>VSCode</code>的支持，之前一直用<code>VSCode</code>开发，但是对<code>TypeScript</code>鲜有了解，于是最近有空看了一些<code>TypeScript</code>的基础语法，并在这里做一个小结。 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p><strong>需要注意的是，这篇文章是王二本人在刷了一遍<code>TypeScript</code>的语法后，认为有些地方需要着重注意，于是在这里做的一个小总结。</strong><br><strong>如果需要系统的过一遍<code>TypeScript</code>的语法，这里重点推荐微软大神<a href="https://github.com/xcatliu" target="_blank" rel="external">xcatliu</a>的<a href="https://github.com/xcatliu/typescript-tutorial" target="_blank" rel="external">TypeScript辅导教程</a>，王二就是看的这篇教程写的这篇文章，也可以看<a href="http://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="external">TypeScript文档</a>(<a href="http://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="external">中文</a>)系统了解</strong></p>
</blockquote>
<h3 id="一、类型别名"><a href="#一、类型别名" class="headerlink" title="一、类型别名"></a>一、类型别名</h3><p>一个简单的例子：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</div><div class="line"><span class="keyword">type</span> NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</div><div class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> n;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> n();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上例中，我们使用 <code>type</code> 创建类型别名。</p>
<p>类型别名常用于联合类型。</p>
<h3 id="二、字符串字面量类型"><a href="#二、字符串字面量类型" class="headerlink" title="二、字符串字面量类型"></a>二、字符串字面量类型</h3><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个，举一个简单的例子：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> EventNames = <span class="string">'click'</span> | <span class="string">'scroll'</span> | <span class="string">'mousemove'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">ele: Element, event: EventNames</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>), <span class="string">'scroll'</span>);  <span class="comment">// 没问题</span></div><div class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'world'</span>), <span class="string">'dbclick'</span>); <span class="comment">// 报错，event 不能为 'dbclick'</span></div><div class="line"></div><div class="line"><span class="comment">// index.ts(7,47): error TS2345: Argument of type '"dbclick"' is not assignable to parameter of type 'EventNames'.</span></div></pre></td></tr></table></figure>
<p>上例中，我们使用 <code>type</code> 定了一个字符串字面量类型 <code>EventNames</code>，它只能取三种字符串中的一种。</p>
<p>注意，<strong>类型别名与字符串字面量类型都是使用 type 进行定义</strong>。</p>
<h3 id="三、类"><a href="#三、类" class="headerlink" title="三、类"></a>三、类</h3><p>我们先来回顾一下ES6中类的用法，这里当然推荐阮一峰大神的<a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="external">ES6-class教程</a>，或者王二总结的<a href="http://www.wangyulue.com/2017/11/07/ES6%E4%B8%AD%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#more" target="_blank" rel="external">ES6中类的使用简明教程</a></p>
<p><code>TypeScript</code> 有三种访问修饰符（Access Modifiers），分别是 <code>public</code>、<code>private</code> 和 <code>protected</code>:</p>
<blockquote>
<ul>
<li><code>public</code> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code> 的</li>
<li><code>private</code> 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li>
<li><code>protected</code> 修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的</li>
</ul>
<p>这里和Java的访问修饰符很像，Java还多一个<code>default</code></p>
</blockquote>
<p>例如，有时候我们希望有的属性是无法直接存取的，这时候就可以用 private 了：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">  <span class="keyword">private</span> name;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</div><div class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></div><div class="line">a.name = <span class="string">'Tom'</span>;</div><div class="line"></div><div class="line"><span class="comment">// index.ts(9,13): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span></div><div class="line"><span class="comment">// index.ts(10,1): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span></div></pre></td></tr></table></figure>
<p>需要注意的是，<code>TypeScript</code> 编译之后的代码中，并没有限制 <code>private</code> 属性在外部的可访问性。</p>
<p>而且使用 <code>private</code> 修饰的属性或方法，在子类中也是不允许访问的;而如果是用 <code>protected</code> 修饰，则允许在子类中访问。</p>
<p>给类加上 TypeScript 的类型很简单，与接口类似：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">  name: <span class="built_in">string</span>;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  sayHi(): <span class="built_in">string</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;this.name&#125;</span>`</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a: Animal = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</div><div class="line"><span class="built_in">console</span>.log(a.sayHi()); <span class="comment">// My name is Jack</span></div></pre></td></tr></table></figure>
<h3 id="四、类与接口"><a href="#四、类与接口" class="headerlink" title="四、类与接口"></a>四、类与接口</h3><p>接口（Interfaces）可以不但可以用于对「对象的形状（Shape）」进行描述，而且可以对类的一部分行为进行抽象。</p>
<p>实现（implements）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 implements 关键字来实现。这个特性大大提高了面向对象的灵活性。</p>
<p>举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法。这时候如果有另一个类，车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Alarm &#123;</div><div class="line">  alert();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Door &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> SecurityDoor <span class="keyword">extends</span> Door <span class="keyword">implements</span> Alarm &#123;</div><div class="line">  alert() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'SecurityDoor alert'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Alarm &#123;</div><div class="line">  alert() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个类可以实现多个接口：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Alarm &#123;</div><div class="line">  alert();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">interface</span> Light &#123;</div><div class="line">  lightOn();</div><div class="line">  lightOff();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Alarm, Light &#123;</div><div class="line">  alert() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</div><div class="line">  &#125;</div><div class="line">  lightOn() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Car light on'</span>);</div><div class="line">  &#125;</div><div class="line">  lightOff() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Car light off'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上例中，Car 实现了 Alarm 和 Light 接口，既能报警，也能开关车灯。</p>
<h3 id="五、混合类型"><a href="#五、混合类型" class="headerlink" title="五、混合类型"></a>五、混合类型</h3><p>之前学习过，可以使用接口的方式来定义一个函数需要符合的形状：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> SearchFunc &#123;</div><div class="line">  (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> mySearch: SearchFunc;</div><div class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有时候，一个函数还可以有自己的属性和方法,这时候可以使用混合类型：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Counter &#123;</div><div class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</div><div class="line">    interval: <span class="built_in">number</span>;</div><div class="line">    reset(): <span class="built_in">void</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) </span>&#123; &#125;;</div><div class="line">    counter.interval = <span class="number">123</span>;</div><div class="line">    counter.reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</div><div class="line">    <span class="keyword">return</span> counter;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> c = getCounter();</div><div class="line">c(<span class="number">10</span>);</div><div class="line">c.reset();</div><div class="line">c.interval = <span class="number">5.0</span>;</div></pre></td></tr></table></figure>
<h3 id="六、泛型"><a href="#六、泛型" class="headerlink" title="六、泛型"></a>六、泛型</h3><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p>
<p>例如，我们来实现一个函数 createArray，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>(<span class="params">length: <span class="built_in">number</span>, value: <span class="built_in">any</span></span>): <span class="title">Array</span>&lt;<span class="title">any</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    result[i] = value;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></div></pre></td></tr></table></figure>
<p>以上代码有一个显而易见的缺陷是：它并没有准确的定义返回值的类型。</p>
<p><code>Array&lt;any&gt;</code> 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的 <code>value</code> 的类型。</p>
<p>这时候，泛型就派上用场了：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    result[i] = value;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">createArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></div></pre></td></tr></table></figure>
<p>上例中，我们在函数名后添加了 <code>&lt;T&gt;</code>，其中 <code>T</code> 用来指代任意输入的类型，在后面的输入 <code>value: T</code> 和输出 <code>Array&lt;T&gt;</code> 中即可使用了。</p>
<p><strong>还有 多个类型参数、泛型约束、泛型接口、泛型类的概念，有兴趣可以了解<a href="https://github.com/xcatliu/typescript-tutorial/blob/master/advanced/generics.md" target="_blank" rel="external">这篇文章</a></strong></p>
<p>最后：<br><strong>着重提醒：这篇文章大部分摘录自微软大神<a href="https://github.com/xcatliu" target="_blank" rel="external">xcatliu</a>的<a href="https://github.com/xcatliu/typescript-tutorial" target="_blank" rel="external">TypeScript辅导教程</a>，读者直接阅读大神的教程效果会更佳哦！</strong></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Typescript 初体验（二）]]></title>
      <url>/2017/11/08/typescript-%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近<code>vue2.5</code>发布，其中提到了将大力加强对<code>TypeScript</code>和<code>VSCode</code>的支持，之前一直用<code>VSCode</code>开发，但是对<code>TypeScript</code>鲜有了解，于是最近有空看了一些<code>TypeScript</code>的基础语法，并在这里做一个小结。 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p><strong>需要注意的是，这篇文章是王二本人在刷了一遍<code>TypeScript</code>的语法后，认为有些地方需要着重注意，于是在这里做的一个小总结。</strong><br><strong>如果需要系统的过一遍<code>TypeScript</code>的语法，这里重点推荐微软大神<a href="https://github.com/xcatliu" target="_blank" rel="external">xcatliu</a>的<a href="https://github.com/xcatliu/typescript-tutorial" target="_blank" rel="external">TypeScript辅导教程</a>，王二就是看的这篇教程写的这篇文章，也可以看<a href="http://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="external">TypeScript文档</a>(<a href="http://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="external">中文</a>)系统了解</strong></p>
</blockquote>
<h3 id="一、接口"><a href="#一、接口" class="headerlink" title="一、接口"></a>一、接口</h3><p>在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implements）。</p>
<p>TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述，参考如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Person &#123;</div><div class="line">    name: <span class="built_in">string</span>;</div><div class="line">    age: <span class="built_in">number</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> tom: Person = &#123;</div><div class="line">    name: <span class="string">'Tom'</span>,</div><div class="line">    age: <span class="number">25</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的例子中，我们定义了一个接口 Person，接着定义了一个变量 tom，它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致。</p>
<p><strong>但是这个时候变量少了或者多了都会报错，我们可以用可选属性、任意属性、只读属性来进一步制定接口，详细可以了解<a href="https://github.com/xcatliu/typescript-tutorial/blob/master/basics/type-of-object-interfaces.md" target="_blank" rel="external">这篇文章</a></strong></p>
<h3 id="二、定义数组类型"><a href="#二、定义数组类型" class="headerlink" title="二、定义数组类型"></a>二、定义数组类型</h3><p>在 TypeScript 中，数组类型有多种定义方式，比较灵活。</p>
<p>以下三种方式都可以定义数组：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//最简单的方法是使用「类型 + 方括号」来表示数组：</span></div><div class="line"><span class="keyword">let</span> fibonacci1: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line"><span class="comment">//也可以使用数组泛型（Array Generic） Array&lt;elemType&gt; 来表示数组：</span></div><div class="line"><span class="keyword">let</span> fibonacci2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line"><span class="comment">//接口也可以用来描述数组：</span></div><div class="line"><span class="keyword">interface</span> NumberArray &#123;</div><div class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">number</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> fibonacci3: NumberArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</div></pre></td></tr></table></figure></p>
<p>以上的代码中，数组中类型要求一致，如果想允许出现任意类型，可以用 any ： </p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> list: <span class="built_in">any</span>[] = [<span class="string">'Wanger'</span>, <span class="number">22</span>, &#123; website: <span class="string">'http://www.wangyulue.com'</span> &#125;];</div></pre></td></tr></table></figure>
<p>Typescript 还实现了常见的类数组的接口定义，如 IArguments, NodeList, HTMLCollection 等，例如接受函数内的 arguments 对象：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> args: IArguments = <span class="built_in">arguments</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、约束函数的类型"><a href="#三、约束函数的类型" class="headerlink" title="三、约束函数的类型"></a>三、约束函数的类型</h3><p>在 Typescript 中也可以约束函数的输入和输出，参考如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候 sum 函数被约束为只接受两个 number 类型并输出为一个 number 类型的函数。</p>
<p>现在哪怕输入多余的（或者少于要求的）参数，都是不被允许的：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line">sum(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.</span></div></pre></td></tr></table></figure>
<p>我们也可以使用接口的方式来定义一个函数需要符合的形状：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> SearchFunc &#123;</div><div class="line">    (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> mySearch: SearchFunc;</div><div class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>这时候其实还有 可选参数、参数默认值、剩余参数、重载的概念，有兴趣可以了解<a href="https://github.com/xcatliu/typescript-tutorial/blob/master/basics/type-of-function.md" target="_blank" rel="external">这篇文章</a></strong></p>
<h3 id="四、申明文件"><a href="#四、申明文件" class="headerlink" title="四、申明文件"></a>四、申明文件</h3><p>假如我们想使用第三方库，比如 jQuery，我们通常这样获取一个 id 是 foo 的元素：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#foo'</span>);</div><div class="line"><span class="comment">// or</span></div><div class="line">jQuery(<span class="string">'#foo'</span>);</div></pre></td></tr></table></figure>
<p>但是在 TypeScript 中，我们并不知道 $ 或 jQuery 是什么东西：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="string">'#foo'</span>);</div><div class="line"></div><div class="line"><span class="comment">// index.ts(1,1): error TS2304: Cannot find name 'jQuery'.</span></div></pre></td></tr></table></figure>
<p>这时，我们需要使用 declare 关键字来定义它的类型，帮助 TypeScript 判断我们传入的参数类型：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> <span class="keyword">var</span> jQuery: <span class="function">(<span class="params"><span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>;</div><div class="line"></div><div class="line">jQuery(<span class="string">'#foo'</span>);</div></pre></td></tr></table></figure>
<p>declare 定义的类型只会用于编译时的检查，编译结果中会被删除。</p>
<p>上例的编译结果是：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="string">'#foo'</span>);</div></pre></td></tr></table></figure>
<p>通常我们会把类型声明抽出来放到一个单独的文件中，这就是声明文件：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery.d.ts</span></div><div class="line"></div><div class="line"><span class="keyword">declare</span> <span class="keyword">var</span> jQuery: <span class="function">(<span class="params"><span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们约定声明文件以 .d.ts 为后缀。</p>
</blockquote>
<p>然后在使用到的文件的开头，用「三斜线指令」表示引用了声明文件：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// &lt;reference path="./jQuery.d.ts" /&gt;</span></div><div class="line"></div><div class="line">jQuery(<span class="string">'#foo'</span>);</div></pre></td></tr></table></figure>
<p>当然，jQuery 的声明文件不需要我们定义了，已经有人帮我们定义好了：<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/jquery/index.d.ts" target="_blank" rel="external">jQuery in DefinitelyTyped</a>。</p>
<p>我们可以直接下载下来使用，但是更推荐的是使用工具统一管理第三方库的声明文件。</p>
<p>社区已经有多种方式引入声明文件，不过 <a href="https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/" target="_blank" rel="external">TypeScript 2.0 推荐使用 @types 来管理</a>。</p>
<p>@types 的使用方式很简单，直接用 npm 安装对应的声明模块即可，以 jQuery 举例：</p>
<blockquote>
<p>npm install @types/jquery –save-dev</p>
</blockquote>
<p>可以在<a href="http://microsoft.github.io/TypeSearch/" target="_blank" rel="external">这个页面</a>搜索你需要的声明文件。</p>
<h3 id="五、内置对象"><a href="#五、内置对象" class="headerlink" title="五、内置对象"></a>五、内置对象</h3><p><code>ECMAScript</code>标准提供的内置对象有：</p>
<p><code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code> 等。</p>
<p>我们可以在 TypeScript 中将变量定义为这些类型：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</div><div class="line"><span class="keyword">let</span> e: <span class="built_in">Error</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error occurred'</span>);</div><div class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> = <span class="regexp">/[a-z]/</span>;</div></pre></td></tr></table></figure>
<p>更多的内置对象，可以查看 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="external">MDN 的文档</a>。</p>
<p>而他们的定义文件，则在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="external">TypeScript 核心库的定义文件</a>中。</p>
<p>最后：<br><strong>着重提醒：这篇文章大部分摘录自微软大神<a href="https://github.com/xcatliu" target="_blank" rel="external">xcatliu</a>的<a href="https://github.com/xcatliu/typescript-tutorial" target="_blank" rel="external">TypeScript辅导教程</a>，读者直接阅读大神的教程效果会更佳哦！</strong></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Typescript 初体验（一）]]></title>
      <url>/2017/11/07/typescript-%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近<code>vue2.5</code>发布，其中提到了将大力加强对<code>TypeScript</code>和<code>VSCode</code>的支持，之前一直用<code>VSCode</code>开发，但是对<code>TypeScript</code>鲜有了解，于是最近有空看了一些<code>TypeScript</code>的基础语法，并在这里做一个小结。 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p><strong>需要注意的是，这篇文章是王二本人在刷了一遍<code>TypeScript</code>的语法后，认为有些地方需要着重注意，于是在这里做的一个小总结。</strong><br><strong>如果需要系统的过一遍<code>TypeScript</code>的语法，这里重点推荐微软大神<a href="https://github.com/xcatliu" target="_blank" rel="external">xcatliu</a>的<a href="https://github.com/xcatliu/typescript-tutorial" target="_blank" rel="external">TypeScript辅导教程</a>，王二就是看的这篇教程写的这篇文章，也可以看<a href="http://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="external">TypeScript文档</a>(<a href="http://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="external">中文</a>)系统了解</strong></p>
</blockquote>
<h3 id="一、什么是-TypeScript"><a href="#一、什么是-TypeScript" class="headerlink" title="一、什么是 TypeScript"></a>一、什么是 TypeScript</h3><p>TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。</p>
<h3 id="二、TypeScript-的特点"><a href="#二、TypeScript-的特点" class="headerlink" title="二、TypeScript 的特点"></a>二、TypeScript 的特点</h3><p>王二认为 TypeScript 最大的特点是 <strong>可以进行静态检查语法，可以在编译阶段就发现大部分错误</strong>，这一点和java很像。</p>
<p>而且 TypeScript 是 JavaScript 的超集，.js 文件可以直接重命名为 .ts 即可。</p>
<h3 id="三、安装-TypeScript"><a href="#三、安装-TypeScript" class="headerlink" title="三、安装 TypeScript"></a>三、安装 TypeScript</h3><p>TypeScript 的命令行工具安装方法如下：</p>
<blockquote>
<p>npm install -g typescript</p>
</blockquote>
<p>以上命令会在全局环境下安装 tsc 命令，安装完成之后，我们就可以在任何地方执行 tsc 命令了。</p>
<p>我们约定使用 TypeScript 编写的文件以 .ts 为后缀，</p>
<p>编译一个 TypeScript 文件很简单：</p>
<blockquote>
<p>tsc hello.ts</p>
</blockquote>
<p>然后就会在 hello.ts 同一级的目录下生成一个 hello.js文件。</p>
<h3 id="四、推荐编辑器"><a href="#四、推荐编辑器" class="headerlink" title="四、推荐编辑器"></a>四、推荐编辑器</h3><p>当然是推荐<a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>啦，它本身就是由 <code>TypeScript</code> 编写的，而且天然支持对 <code>TypeScript</code> 支持。</p>
<h3 id="五、一个简单的例子"><a href="#五、一个简单的例子" class="headerlink" title="五、一个简单的例子"></a>五、一个简单的例子</h3><p>将以下代码复制到 hello.ts 中：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">person: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + person;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> user = <span class="string">'Tom'</span>;</div><div class="line"><span class="built_in">console</span>.log(sayHello(user));</div></pre></td></tr></table></figure>
<p>然后执行</p>
<p>tsc hello.ts</p>
<p>这时候会生成一个编译好的文件 hello.js：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">person</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + person;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> user = <span class="string">'Tom'</span>;</div><div class="line"><span class="built_in">console</span>.log(sayHello(user));</div></pre></td></tr></table></figure>
<p>TypeScript 中，使用 : 指定变量的类型，: 的前后有没有空格都可以。</p>
<p>上述例子中，我们用 : 指定 person 参数类型为 string。但是编译为 js 之后，并没有什么检查的代码被插入进来。</p>
<p><strong>如果发现有错误，编译的时候就会报错。</strong></p>
<p>下面尝试把这段代码编译一下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">person: <span class="built_in">string</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + person;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> user = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(sayHello(user));</div></pre></td></tr></table></figure>
<p>编辑器中会提示错误，编译的时候也会出错：</p>
<blockquote>
<p>index.ts(6,22): error TS2345: Argument of type ‘number[]’ is not assignable to parameter of type ‘string’.</p>
</blockquote>
<p>但是还是生成了 js 文件：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">person</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, '</span> + person;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> user = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(sayHello(user));</div></pre></td></tr></table></figure>
<p>TypeScript 编译的时候即使报错了，还是会生成编译结果，我们仍然可以使用这个编译之后的文件。</p>
<h3 id="六、空值"><a href="#六、空值" class="headerlink" title="六、空值"></a>六、空值</h3><p>JavaScript 没有空值（Void）的概念，在 TypeScirpt 中，可以用 void 表示没有任何返回值的函数：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</div><div class="line">  alert(<span class="string">'My name is Tom'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</div></pre></td></tr></table></figure>
<h3 id="七、Null-和-Undefined"><a href="#七、Null-和-Undefined" class="headerlink" title="七、Null 和 Undefined"></a>七、Null 和 Undefined</h3><p>在 TypeScript 中，可以使用 null 和 undefined 来定义这两个原始数据类型：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</div></pre></td></tr></table></figure>
<p>undefined 类型的变量只能被赋值为 undefined，null 类型的变量只能被赋值为 null。</p>
<p>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这样不会报错</span></div><div class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="literal">undefined</span>;</div><div class="line"><span class="comment">// 这样也不会报错</span></div><div class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = u;</div></pre></td></tr></table></figure>
<p>而 void 类型的变量不能赋值给 number 类型的变量：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> u: <span class="built_in">void</span>;</div><div class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = u;</div><div class="line"></div><div class="line"><span class="comment">// index.ts(2,5): error TS2322: Type 'void' is not assignable to type 'number'.</span></div></pre></td></tr></table></figure>
<h3 id="八、任意值"><a href="#八、任意值" class="headerlink" title="八、任意值"></a>八、任意值</h3><p>任意值（Any）用来表示允许赋值为任意类型，参考如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> = <span class="string">'seven'</span>;</div><div class="line">myFavoriteNumber = <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></div></pre></td></tr></table></figure>
<p>但如果是 any 类型，则允许被赋值为任意类型。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">any</span> = <span class="string">'seven'</span>;</div><div class="line">myFavoriteNumber = <span class="number">7</span>;</div></pre></td></tr></table></figure>
<p><strong>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型</strong></p>
<h3 id="九、类型推论"><a href="#九、类型推论" class="headerlink" title="九、类型推论"></a>九、类型推论</h3><p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p>
<p>以下代码虽然没有指定类型，但是会在编译的时候报错：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myFavoriteNumber = <span class="string">'seven'</span>;</div><div class="line">myFavoriteNumber = <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></div></pre></td></tr></table></figure>
<p>事实上，它等价于：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> = <span class="string">'seven'</span>;</div><div class="line">myFavoriteNumber = <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></div></pre></td></tr></table></figure>
<p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p>
<p>##如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：##</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myFavoriteNumber;</div><div class="line">myFavoriteNumber = <span class="string">'seven'</span>;</div><div class="line">myFavoriteNumber = <span class="number">7</span>;</div></pre></td></tr></table></figure>
<h3 id="十、联合类型"><a href="#十、联合类型" class="headerlink" title="十、联合类型"></a>十、联合类型</h3><p>联合类型（Union Types）表示取值可以为多种类型中的一种。</p>
<p>例如上面的代码：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myFavoriteNumber = <span class="string">'seven'</span>;</div><div class="line">myFavoriteNumber = <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></div></pre></td></tr></table></figure>
<p>用联合类型写就不会报错：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myFavoriteNumber :(<span class="built_in">string</span>|<span class="built_in">number</span>) = <span class="string">'seven'</span>;</div><div class="line">myFavoriteNumber = <span class="number">7</span>;</div></pre></td></tr></table></figure>
<p>最后：<br><strong>着重提醒：这篇文章大部分摘录自微软大神<a href="https://github.com/xcatliu" target="_blank" rel="external">xcatliu</a>的<a href="https://github.com/xcatliu/typescript-tutorial" target="_blank" rel="external">TypeScript辅导教程</a>，读者直接阅读大神的教程效果会更佳哦！</strong></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6中类的使用简明教程]]></title>
      <url>/2017/11/07/ES6%E4%B8%AD%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>系统地梳理一遍JS中的类应该如何使用 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、开始"><a href="#一、开始" class="headerlink" title="一、开始"></a>一、开始</h3><p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x;</div><div class="line">  <span class="keyword">this</span>.y = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Animal.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Animal(<span class="number">1</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure>
<p>上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。</p>
<p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过<code>class</code>关键字，可以定义类。</p>
<p>基本上，ES6 的<code>class</code>可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的class改写，就是下面这样:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、属性和方法"><a href="#二、属性和方法" class="headerlink" title="二、属性和方法"></a>二、属性和方法</h3><p>使用 <code>class</code> 定义类，使用 <code>constructor</code> 定义构造函数。</p>
<p>通过 <code>new</code> 生成新实例的时候，会自动调用构造函数。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  sayHi() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;this.name&#125;</span>`</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</div><div class="line"><span class="built_in">console</span>.log(a.sayHi()); <span class="comment">// My name is Jack</span></div></pre></td></tr></table></figure>
<p><strong>需要注意的是。类的内部所有定义的方法，都是不可枚举的（non-enumerable），这一点与 ES5 的行为不一致。</strong></p>
<h3 id="三、constructor方法"><a href="#三、constructor方法" class="headerlink" title="三、constructor方法"></a>三、constructor方法</h3><p><code>constructor</code>方法是类的默认方法，通过<code>new</code>命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、实例的属性"><a href="#四、实例的属性" class="headerlink" title="四、实例的属性"></a>四、实例的属性</h3><p>与 ES5 一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line">animal.toString() <span class="comment">// (2, 3)</span></div><div class="line"></div><div class="line">animal.hasOwnProperty(<span class="string">'x'</span>) <span class="comment">// true</span></div><div class="line">animal.hasOwnProperty(<span class="string">'y'</span>) <span class="comment">// true</span></div><div class="line">animal.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></div><div class="line">animal.__proto__.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="五、不存在变量提升"><a href="#五、不存在变量提升" class="headerlink" title="五、不存在变量提升"></a>五、不存在变量提升</h3><p>类不存在变量提升（hoist），这一点与 ES5 完全不同。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Animal(); <span class="comment">// ReferenceError</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="六、类的继承"><a href="#六、类的继承" class="headerlink" title="六、类的继承"></a>六、类的继承</h3><p>使用 <code>extends</code> 关键字实现继承，子类中使用 <code>super</code> 关键字来调用父类的构造函数和方法。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  sayHi() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;this.name&#125;</span>`</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</div><div class="line">    <span class="keyword">super</span>(name); <span class="comment">// 调用父类的 constructor(name)</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">  sayHi() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Meow, '</span> + <span class="keyword">super</span>.sayHi(); <span class="comment">// 调用父类的 sayHi()</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Cat(<span class="string">'Tom'</span>); <span class="comment">// Tom</span></div><div class="line"><span class="built_in">console</span>.log(c.sayHi()); <span class="comment">// Meow, My name is Tom</span></div></pre></td></tr></table></figure>
<h3 id="七、存取器"><a href="#七、存取器" class="headerlink" title="七、存取器"></a>七、存取器</h3><p>使用 <code>getter</code> 和 <code>setter</code> 可以改变属性的赋值和读取行为：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">get</span> name() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Jack'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">set</span> name(value) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'setter: '</span> + value);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Kitty'</span>); <span class="comment">// setter: Kitty</span></div><div class="line">a.name = <span class="string">'Tom'</span>; <span class="comment">// setter: Tom</span></div><div class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></div></pre></td></tr></table></figure>
<h3 id="八、静态方法"><a href="#八、静态方法" class="headerlink" title="八、静态方法"></a>八、静态方法</h3><p>使用 <code>static</code> 修饰符修饰的方法称为静态方法，它们不需要实例化，而是直接通过类来调用：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">  <span class="keyword">static</span> isAnimal(a) &#123;</div><div class="line">    <span class="keyword">return</span> a <span class="keyword">instanceof</span> Animal;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</div><div class="line">Animal.isAnimal(a); <span class="comment">// true</span></div><div class="line">a.isAnimal(a); <span class="comment">// TypeError: a.isAnimal is not a function</span></div></pre></td></tr></table></figure>
<hr>
<p><code>ES7</code> 中有一些关于类的提案，<code>TypeScript</code> 也实现了它们，这里做一个简单的介绍。</p>
<h3 id="九、实例属性"><a href="#九、实例属性" class="headerlink" title="九、实例属性"></a>九、实例属性</h3><p>ES6 中实例的属性只能通过构造函数中的 this.xxx 来定义，ES7 提案中可以直接在类里面定义：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">  name = <span class="string">'Jack'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal();</div></pre></td></tr></table></figure>
<h3 id="十、静态属性"><a href="#十、静态属性" class="headerlink" title="十、静态属性"></a>十、静态属性</h3><p>ES7 提案中，可以使用 static 定义一个静态属性：</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Animal &#123;</div><div class="line">  <span class="keyword">static</span> num = <span class="number">42</span>;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Animal.num); <span class="comment">// 42</span></div></pre></td></tr></table></figure>
<p>参考文章<br><a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="external">‘阮一峰’的ES6入门教程</a><br><a href="https://github.com/xcatliu/typescript-tutorial" target="_blank" rel="external">‘xcatliu’的TypeScript辅导教程</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转载】抓住数据的小尾巴 - JS浮点数陷阱及解法]]></title>
      <url>/2017/11/06/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E6%8A%93%E4%BD%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%B0%8F%E5%B0%BE%E5%B7%B4-JS%E6%B5%AE%E7%82%B9%E6%95%B0%E9%99%B7%E9%98%B1%E5%8F%8A%E8%A7%A3%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>前两天开发时做计算金额汇总，然后<code>139.16+126</code>计算的结果是<code>265.15999999999997</code>，这把我郁闷的半死，刚好这两天刷掘金看到一篇深度好文<a href="https://juejin.im/post/59f9e26f6fb9a0452724ea32" target="_blank" rel="external">抓住数据的小尾巴 - JS浮点数陷阱及解法</a>，算是解开了我心中的半片阴霾，因为有些没太理解，所以还有半片继续阴霾着。不管怎么说，这里先做一个转载</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p><strong>文章原发于<a href="https://juejin.im/post/59f9e26f6fb9a0452724ea32" target="_blank" rel="external">掘金’前端新能源’</a></strong></p>
</blockquote>
<p>众所周知，JavaScript 浮点数运算时经常遇到会 0.000000001 和 0.999999999 这样奇怪的结果，如 0.1+0.2=0.30000000000000004、1-0.9=0.09999999999999998，很多人知道这是浮点数误差问题，但具体原因就说不清楚了。本文帮你理清这背后的原理以及解决方案，还会向你解释JS中的大数危机和四则运算中会遇到的坑。</p>
<h3 id="一、浮点数的存储"><a href="#一、浮点数的存储" class="headerlink" title="一、浮点数的存储"></a>一、浮点数的存储</h3><p>首先要搞清楚 JavaScript 如何存储小数。和其它语言如 Java 和 Python 不同，JavaScript 中所有数字包括整数和小数都只有一种类型 — Number。它的实现遵循 IEEE 754 标准，使用 64 位固定长度来表示，也就是标准的 double 双精度浮点数（相关的还有float 32位单精度）。计算机组成原理中有过详细介绍，如果你不记得也没关系。</p>
<blockquote>
<p>注：大多数语言中的小数默认都是遵循 IEEE 754 的 float 浮点数，包括 Java、Ruby、Python，本文中的浮点数问题同样存在。</p>
</blockquote>
<p>这样的存储结构优点是可以归一化处理整数和小数，节省存储空间。</p>
<p>64位比特又可分为三个部分：</p>
<blockquote>
<ul>
<li>符号位S：第 1 位是正负数符号位（sign），0代表正数，1代表负数</li>
<li>指数位E：中间的 11 位存储指数（exponent），用来表示次方数</li>
<li>尾数位M：最后的 52 位是尾数（mantissa），超出的部分自动进一舍零</li>
</ul>
</blockquote>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/9.png?raw=true" alt="Alt text"></p>
<p>实际数字就可以用以下公式来计算：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/10.png?raw=true" alt="Alt text"></p>
<p>注意以上的公式遵循科学计数法的规范，在十进制中 0&lt;M&lt;10，到二进制就是 0&lt;M&lt;2。也就是说整数部分只能是1，所以可以被舍去，只保留后面的小数部分。如 4.5 转成二进制就是 100.1，科学计数法表示是 1.001*2^2，舍去1后 M = 001。E是一个无符号整数，因为长度是11位，取值范围是 0~2047。但是科学计数法中的指数是可以为负数的，所以约定减去一个中间数 1023，[0,1022] 表示为负，[1024,2047] 表示为正。如 4.5 的指数 E = 1025，尾数 M = 001。</p>
<p>最终的公式变成：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/11.png?raw=true" alt="Alt text"></p>
<p>所以 4.5 最终表示为（M=001、E=1025）：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/12.png?raw=true" alt="Alt text"></p>
<p>(图片由此生成 <a href="http://www.binaryconvert.com/convert_double.html" target="_blank" rel="external">http://www.binaryconvert.com/convert_double.html</a>)</p>
<p>下面再以 0.1 为例解释浮点误差的原因，0.1 转成二进制表示为 0.0001100110011001100(1100循环)，1.100110011001100x2^-4，所以 E=-4+1023=1019；M 舍去首位的1，得到 100110011…。最终就是：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/13.png?raw=true" alt="Alt text"></p>
<p>转化成十进制后为 0.100000000000000005551115123126，因此就出现了浮点误差。</p>
<h4 id="1、为什么-0-1-0-2-0-30000000000000004？"><a href="#1、为什么-0-1-0-2-0-30000000000000004？" class="headerlink" title="1、为什么 0.1+0.2=0.30000000000000004？"></a>1、为什么 0.1+0.2=0.30000000000000004？</h4><p>计算步骤为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 0.1 和 0.2 都转化成二进制后再进行运算</span></div><div class="line"><span class="number">0.00011001100110011001100110011001100110011001100110011010</span> +</div><div class="line"><span class="number">0.0011001100110011001100110011001100110011001100110011010</span> =</div><div class="line"><span class="number">0.0100110011001100110011001100110011001100110011001100111</span></div><div class="line"></div><div class="line"><span class="comment">// 转成十进制正好是 0.30000000000000004</span></div></pre></td></tr></table></figure>
<h4 id="2、为什么-x-0-1-能得到-0-1？"><a href="#2、为什么-x-0-1-能得到-0-1？" class="headerlink" title="2、为什么 x=0.1 能得到 0.1？"></a>2、为什么 x=0.1 能得到 0.1？</h4><p>恭喜你到了看山不是山的境界。因为 mantissa 固定长度是 52 位，再加上省略的一位，最多可以表示的数是 2^53=9007199254740992，对应科学计数尾数是 9.007199254740992，这也是 JS 最多能表示的精度。它的长度是 16，所以可以近似使用 toPrecision(16) 来做精度运算，超过的精度会自动做凑整处理。于是就有：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.10000000000000000555</span>.toPrecision(<span class="number">16</span>)</div><div class="line"><span class="comment">// 返回 0.1000000000000000，去掉末尾的零后正好为 0.1</span></div><div class="line"></div><div class="line"><span class="comment">// 但你看到的 `0.1` 实际上并不是 `0.1`。不信你可用更高的精度试试：</span></div><div class="line"><span class="number">0.1</span>.toPrecision(<span class="number">21</span>) = <span class="number">0.100000000000000005551</span></div></pre></td></tr></table></figure>
<h4 id="3、大数危机"><a href="#3、大数危机" class="headerlink" title="3、大数危机"></a>3、大数危机</h4><p>可能你已经隐约感觉到了，如果整数大于 9007199254740992 会出现什么情况呢？<br>由于 E 最大值是 1023，所以最大可以表示的整数是 2^1024 - 1，这就是能表示的最大整数。但你并不能这样计算这个数字，因为从 2^1024 开始就变成了 Infinity</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">1023</span>)</div><div class="line"><span class="number">8.98846567431158e+307</span></div><div class="line"></div><div class="line">&gt; <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">1024</span>)</div><div class="line"><span class="literal">Infinity</span></div></pre></td></tr></table></figure>
<p>那么对于 (2^53, 2^63) 之间的数会出现什么情况呢？</p>
<blockquote>
<ul>
<li>(2^53, 2^54) 之间的数会两个选一个，只能精确表示偶数</li>
<li>(2^54, 2^55) 之间的数会四个选一个，只能精确表示4个倍数</li>
<li>… 依次跳过更多2的倍数</li>
</ul>
</blockquote>
<p>下面这张图能很好的表示 JavaScript 中浮点数和实数（Real Number）之间的对应关系。我们常用的 (-2^53, 2^53) 只是最中间非常小的一部分，越往两边越稀疏越不精确。</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/14.png?raw=true" alt="Alt text"></p>
<p>在淘宝早期的订单系统中把订单号当作数字处理，后来随意订单号暴增，已经超过了<br>9007199254740992，最终的解法是把订单号改成字符串处理。</p>
<p>要想解决大数的问题你可以引用第三方库 bignumber.js，原理是把所有数字当作字符串，重新实现了计算逻辑，缺点是性能比原生的差很多，所以原生支持大数就很有必要了。TC39 已经有一个 Stage 3 的提案 proposal bigint，大数问题有望彻底解决。在浏览器正式支持前，可以使用 Babel 7.0 来实现，它的内部是自动转换成 big-integer 来计算，这样能保持精度但运算效率会降低。</p>
<h4 id="4、toPrecision-vs-toFixed"><a href="#4、toPrecision-vs-toFixed" class="headerlink" title="4、toPrecision vs toFixed"></a>4、toPrecision vs toFixed</h4><p>数据处理时，这两个函数很容易混淆。它们的共同点是把数字转成字符串供展示使用。注意在计算的中间过程不要使用，只用于最终结果。</p>
<p>不同点就需要注意一下：</p>
<blockquote>
<ul>
<li>toPrecision 是处理精度，精度是从左至右第一个不为0的数开始数起。</li>
<li>toFixed 是小数点后指定位数取整，从小数点开始数起。<br>两者都能对多余数字做凑整处理，也有些人用 toFixed 来做四舍五入，但一定要知道它是有 Bug 的。</li>
</ul>
</blockquote>
<p>如：1.005.toFixed(2) 返回的是 1.00 而不是 1.01。</p>
<p>原因： 1.005 实际对应的数字是 1.00499999999999989，在四舍五入时全部被舍去！</p>
<p>解法：使用四舍五入函数 Math.round() 来处理。但 Math.round(1.005 <em> 100) / 100 还是不行，因为 1.005 </em> 100 = 100.49999999999999。还需要把乘法和除法精度误差都解决后再使用 Math.round。可以使用后面介绍的 number-precision#round 方法来解决。</p>
<h3 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h3><p>回到最关心的问题：如何解决浮点误差。首先，理论上用有限的空间来存储无限的小数是不可能保证精确的，但我们可以处理一下得到我们期望的结果。</p>
<h4 id="1、数据展示类"><a href="#1、数据展示类" class="headerlink" title="1、数据展示类"></a>1、数据展示类</h4><p>当你拿到 1.4000000000000001 这样的数据要展示时，建议使用 toPrecision 凑整并 parseFloat 转成数字后再显示，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseFloat</span>(<span class="number">1.4000000000000001</span>.toPrecision(<span class="number">12</span>)) === <span class="number">1.4</span>  <span class="comment">// True</span></div></pre></td></tr></table></figure>
<p>封装成方法就是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">num, precision = <span class="number">12</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> +<span class="built_in">parseFloat</span>(num.toPrecision(precision));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么选择 12 做为默认精度？这是一个经验的选择，一般选12就能解决掉大部分0001和0009问题，而且大部分情况下也够用了，如果你需要更精确可以调高。</p>
<h4 id="2、数据运算类"><a href="#2、数据运算类" class="headerlink" title="2、数据运算类"></a>2、数据运算类</h4><p>对于运算类操作，如 +-*/，就不能使用 toPrecision 了。正确的做法是把小数转成整数后再运算。以加法为例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 精确加法</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> num1Digits = (num1.toString().split(<span class="string">'.'</span>)[<span class="number">1</span>] || <span class="string">''</span>).length;</div><div class="line">  <span class="keyword">const</span> num2Digits = (num2.toString().split(<span class="string">'.'</span>)[<span class="number">1</span>] || <span class="string">''</span>).length;</div><div class="line">  <span class="keyword">const</span> baseNum = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(num1Digits, num2Digits));</div><div class="line">  <span class="keyword">return</span> (num1 * baseNum + num2 * baseNum) / baseNum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上方法能适用于大部分场景。遇到科学计数法如 2.3e+1（当数字精度大于21时，数字会强制转为科学计数法形式显示）时还需要特别处理一下。</p>
<p>这里作者推荐了一个开源库<a href="number-precision">number-precision</a>,完美支持浮点数的加减乘除、四舍五入等运算。非常小只有1K，远小于绝大多数同类库（如Math.js、BigDecimal.js），100%测试全覆盖，代码可读性强，可以覆盖大部分应用场景。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<ul>
<li><a href="https://link.juejin.im?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDouble-precision_floating-point_format" target="_blank" rel="external">Double-precision floating-point format</a></li>
<li><a href="https://link.juejin.im?target=http%3A%2F%2Ffloating-point-gui.de%2F" target="_blank" rel="external">What Every Programmer Should Know About Floating-Point Arithmetic</a></li>
<li><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DpQs_wx8eoQ8" target="_blank" rel="external">Why Computers are Bad at Algebra | Infinite Series</a></li>
<li><a href="https://link.juejin.im?target=http%3A%2F%2Fjasss.soc.surrey.ac.uk%2F9%2F4%2F4.html" target="_blank" rel="external">Is Your Model Susceptible to Floating-Point Errors?</a></li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 转载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git reset 与 git revert 的区别]]></title>
      <url>/2017/11/06/git-reset-%E4%B8%8E-git-revert-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>git reset 与 git revert 都可以将版本退回，那他们具体有哪些区别呢？如果你对此有疑惑，这篇文章或许能够帮助到你 </p>
</blockquote>
<a id="more"></a>
<p>我们现在创建一个由git管理的文件夹，文件夹是<code>clean</code>的，并且与远程的版本库是一致的，我们敲下<code>git log --graph</code>来看看历史版本：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/4.png?raw=true" alt="Alt text"></p>
<p>现在文件夹中有一个<code>readme.txt</code>：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/2.png?raw=true" alt="Alt text"></p>
<p>我们将文件修改如下：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/3.png?raw=true" alt="Alt text"></p>
<p>并敲下如下命令提交至远程仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git add readme.txt</div><div class="line"></div><div class="line">git commit -m&quot;测试一下 git reset&quot;</div><div class="line"></div><div class="line">git push</div></pre></td></tr></table></figure>
<p>那么现在再敲下<code>git log --graph</code>来看看历史版本：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/5.png?raw=true" alt="Alt text"></p>
<p>到现在我们还没有发现什么大问题，接下来是重点：</p>
<h3 id="第一种情况："><a href="#第一种情况：" class="headerlink" title="第一种情况："></a>第一种情况：</h3><p>我们现在敲下<code>git reset --hard HEAD^</code>来退回上一个版本</p>
<p>我们发现<code>readme.txt</code>如愿以偿的回到的最初的模样：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/2.png?raw=true" alt="Alt text"></p>
<p>再看看历史版本：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/4.png?raw=true" alt="Alt text"></p>
<p>也和刚开始一样，也就是说：<strong>由于使用了<code>git reset</code>,开头为<code>957a2c</code>的版本在本地消失不见了，但是由于刚刚王二已经将开头为<code>957a2c</code>的版本提交到了远程，所以远程依然存在开头为<code>957a2c</code>的版本。即本地落后远程一个版本</strong></p>
<p>我们用<code>git status</code>就可以发现本地落后远程一个版本：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/6.png?raw=true" alt="Alt text"></p>
<p>如果这时候在本地修改文件并提交至远程，<code>push</code>的时候就会被拒绝，如果还改了同一份文件，还需要手动解决冲突。</p>
<h3 id="第二种情况："><a href="#第二种情况：" class="headerlink" title="第二种情况："></a>第二种情况：</h3><p>我们现在敲下<code>git revert HEAD</code>来退回上一个版本</p>
<p>我们发现<code>readme.txt</code>依旧如愿以偿的回到的最初的模样：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/2.png?raw=true" alt="Alt text"></p>
<p>再看看历史版本：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/7.png?raw=true" alt="Alt text"></p>
<p>发现没有，<strong>git的版本又向前走了一步，变成了开头为<code>2b4dd6</code>的版本。事实上，<code>git revert</code>的原理是根据你要回退的提交所做的改动做相反的改动，然后重新提交代码。</strong></p>
<p>我们用<code>git status</code>就可以发现本地会优先远程一个版本：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/8.png?raw=true" alt="Alt text"></p>
<p>如果这时候在本地修改文件并提交，就会很顺利地提交至远程。</p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p><code>git reset</code>会将<code>HEAD</code>的指针往后退一步</p>
<p><code>git revert</code>则会根据要回退的提交所做的改动做相反的改动，然后重新提交代码，它的<code>HEAD</code>会往前进一步。</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转载】js中的事件委托或是事件代理详解]]></title>
      <url>/2017/11/06/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91js%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%E6%88%96%E6%98%AF%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>以前一直不知道事件委托或时间代理到底指什么，今天看到的”凌云之翼”的博客文章，讲的超级清除，有兴趣可以点<a href="http://www.cnblogs.com/liugang-vip/p/5616484.html" target="_blank" rel="external">这里</a>直接看”凌云之翼”的博客 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p><strong>文章原发于<a href="http://www.cnblogs.com/liugang-vip/p/5616484.html" target="_blank" rel="external">‘凌云之翼’的博客</a></strong></p>
</blockquote>
<h3 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h3><p>1、这是前端面试的经典题型，要去找工作的小伙伴看看还是有帮助的；</p>
<p>2、其实我一直都没弄明白，写这个一是为了备忘，二是给其他的知其然不知其所以然的小伙伴们以参考；</p>
<h3 id="二、概述"><a href="#二、概述" class="headerlink" title="二、概述"></a>二、概述</h3><p>那什么叫事件委托呢？它还有一个名字叫事件代理，JavaScript高级程序设计上讲：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。那这是什么意思呢？网上的各位大牛们讲事件委托基本上都用了同一个例子，就是取快递来解释这个现象，我仔细揣摩了一下，这个例子还真是恰当，我就不去想别的例子来解释了，借花献佛，我摘过来，大家认真领会一下事件委托到底是一个什么原理：</p>
<p>有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。</p>
<p>这里其实还有2层意思的：</p>
<p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；</p>
<p>第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。</p>
<h3 id="三、为什么要用事件委托"><a href="#三、为什么要用事件委托" class="headerlink" title="三、为什么要用事件委托"></a>三、为什么要用事件委托</h3><p>一般来说，dom需要有事件处理程序，我们都会直接给它设事件处理程序就好了，那如果是很多的dom需要添加事件处理呢？比如我们有100个li，每个li都有相同的click点击事件，可能我们会用for循环的方法，来遍历所有的li，然后给它们添加事件，那这么做会存在什么影响呢？</p>
<p>在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能；</p>
<p>每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，自然性能就越差了（内存不够用，是硬伤，哈哈），比如上面的100个li，就要占用100个内存空间，如果是1000个，10000个呢，那只能说呵呵了，如果用事件委托，那么我们就可以只对它的父级（如果只有一个父级）这一个对象进行操作，这样我们就需要一个内存空间就够了，是不是省了很多，自然性能就会更好。</p>
<h3 id="四、事件委托的原理"><a href="#四、事件委托的原理" class="headerlink" title="四、事件委托的原理"></a>四、事件委托的原理</h3><p>事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，举个例子：页面上有这么一个节点树，div&gt;ul&gt;li&gt;a;比如给最里面的a加一个click点击事件，那么这个事件就会一层一层的往外执行，执行顺序a&gt;li&gt;ul&gt;div，有这样一个机制，那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，都会冒泡到最外层的div上，所以都会触发，这就是事件委托，委托它们父级代为执行事件。</p>
<h3 id="五、事件委托怎么实现"><a href="#五、事件委托怎么实现" class="headerlink" title="五、事件委托怎么实现"></a>五、事件委托怎么实现</h3><p>终于到了本文的核心部分了，哈哈，在介绍事件委托的方法之前，我们先来看一段一般方法的例子：</p>
<p>子节点实现相同的功能：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实现功能是点击li，弹出123：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">    <span class="keyword">var</span> aLi = oUl.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aLi.length;i++)&#123;</div><div class="line">        aLi[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(<span class="number">123</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码的意思很简单，相信很多人都是这么实现的，我们看看有多少次的dom操作，首先要找到ul，然后遍历li，然后点击li的时候，又要找一次目标的li的位置，才能执行最后的操作，每次点击都要找一次li；</p>
<p>那么我们用事件委托的方式做又会怎么样呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">    oUl.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="number">123</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发，当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击li才会触发，不怕，我们有绝招：</p>
<p>Event对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源，也就是说，target就可以表示为当前的事件操作的dom，但是不是真正操作dom，当然，这个是有兼容性的，标准浏览器用ev.target，IE浏览器用event.srcElement，此时只是获取了当前节点的位置，并不知道是什么节点名称，这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（习惯问题）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">    oUl.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">        <span class="keyword">var</span> target = ev.target || ev.srcElement;</div><div class="line">        <span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</div><div class="line">            alert(<span class="number">123</span>);</div><div class="line">            alert(target.innerHTML);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样改下就只有点击li会触发事件了，且每次只执行一次dom操作，如果li数量很多的话，将大大减少dom的操作，优化的性能可想而知！</p>
<h3 id="六、事件委托实现不一样的点击效果"><a href="#六、事件委托实现不一样的点击效果" class="headerlink" title="六、事件委托实现不一样的点击效果"></a>六、事件委托实现不一样的点击效果</h3><p>上面的例子是说li操作的是同样的效果，要是每个li被点击的效果都不一样，那么用事件委托还有用吗？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"box"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"add"</span> value=<span class="string">"添加"</span> /&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"remove"</span> value=<span class="string">"删除"</span> /&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"move"</span> value=<span class="string">"移动"</span> /&gt;</div><div class="line">    &lt;input type=<span class="string">"button"</span> id=<span class="string">"select"</span> value=<span class="string">"选择"</span> /&gt;</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> Add = <span class="built_in">document</span>.getElementById(<span class="string">"add"</span>);</div><div class="line">    <span class="keyword">var</span> Remove = <span class="built_in">document</span>.getElementById(<span class="string">"remove"</span>);</div><div class="line">    <span class="keyword">var</span> Move = <span class="built_in">document</span>.getElementById(<span class="string">"move"</span>);</div><div class="line">    <span class="keyword">var</span> Select = <span class="built_in">document</span>.getElementById(<span class="string">"select"</span>);</div><div class="line">    Add.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'添加'</span>);</div><div class="line">    &#125;;</div><div class="line">    Remove.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'删除'</span>);</div><div class="line">    &#125;;</div><div class="line">    Move.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'移动'</span>);</div><div class="line">    &#125;;</div><div class="line">    Select.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'选择'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面实现的效果我就不多说了，很简单，4个按钮，点击每一个做不同的操作，那么至少需要4次dom操作，如果用事件委托，能进行优化吗？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">    oBox.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">        <span class="keyword">var</span> target = ev.target || ev.srcElement;</div><div class="line">        <span class="keyword">if</span>(target.nodeName.toLocaleLowerCase() == <span class="string">'input'</span>)&#123;</div><div class="line">            <span class="keyword">switch</span>(target.id)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'add'</span> :</div><div class="line">                    alert(<span class="string">'添加'</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'remove'</span> :</div><div class="line">                    alert(<span class="string">'删除'</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'move'</span> :</div><div class="line">                    alert(<span class="string">'移动'</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'select'</span> :</div><div class="line">                    alert(<span class="string">'选择'</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用事件委托就可以只用一次dom操作就能完成所有的效果，比上面的性能肯定是要好一些的。</p>
<h3 id="七、事件委托为新增节点添加事件"><a href="#七、事件委托为新增节点添加事件" class="headerlink" title="七、事件委托为新增节点添加事件"></a>七、事件委托为新增节点添加事件</h3><p>现在讲的都是document加载完成的现有dom节点下的操作，那么如果是新增的节点，新增的节点会有事件吗？也就是说，一个新员工来了，他能收到快递吗？</p>
<p>看一下正常的添加节点的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> id=<span class="string">"btn"</span> value=<span class="string">"添加"</span> /&gt;</div><div class="line">&lt;ul id=<span class="string">"ul1"</span>&gt;</div><div class="line">    &lt;li&gt;<span class="number">111</span>&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li&gt;222&lt;/</span>li&gt;</div><div class="line">    &lt;li&gt;<span class="number">333</span>&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li&gt;444&lt;/</span>li&gt;</div><div class="line">&lt;<span class="regexp">/ul&gt;</span></div></pre></td></tr></table></figure>
<p>现在是移入li，li变红，移出li，li变白，这么一个效果，然后点击按钮，可以向ul中添加一个li子节点:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</div><div class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">    <span class="keyword">var</span> aLi = oUl.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">    <span class="keyword">var</span> num = <span class="number">4</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//鼠标移入变红，移出变白</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;aLi.length;i++)&#123;</div><div class="line">        aLi[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.style.background = <span class="string">'red'</span>;</div><div class="line">        &#125;;</div><div class="line">        aLi[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.style.background = <span class="string">'#fff'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//添加新节点</span></div><div class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        num++;</div><div class="line">        <span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">        oLi.innerHTML = <span class="number">111</span>*num;</div><div class="line">        oUl.appendChild(oLi);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一般的做法，但是你会发现，新增的li是没有事件的，说明添加子节点的时候，事件没有一起添加进去，这不是我们想要的结果，那怎么做呢？一般的解决方案会是这样，将for循环用一个函数包起来，命名为mHover，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</div><div class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">    <span class="keyword">var</span> aLi = oUl.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">    <span class="keyword">var</span> num = <span class="number">4</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mHover</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//鼠标移入变红，移出变白</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;aLi.length;i++)&#123;</div><div class="line">            aLi[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.style.background = <span class="string">'red'</span>;</div><div class="line">            &#125;;</div><div class="line">            aLi[i].onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.style.background = <span class="string">'#fff'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mHover ();</div><div class="line">    <span class="comment">//添加新节点</span></div><div class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        num++;</div><div class="line">        <span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">        oLi.innerHTML = <span class="number">111</span>*num;</div><div class="line">        oUl.appendChild(oLi);</div><div class="line">        mHover ();</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>这里的<code>oUl.getElementsByTagName(&#39;li&#39;);</code>似乎能实时监听到子元素<code>li</code>的变化，这个小细节王二以前倒是没有注意到</strong></p>
<p>虽然功能实现了，看着还挺好，但实际上无疑是又增加了一个dom操作，在优化性能方面是不可取的，那么有事件委托的方式，能做到优化吗？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</div><div class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"ul1"</span>);</div><div class="line">    <span class="keyword">var</span> aLi = oUl.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">    <span class="keyword">var</span> num = <span class="number">4</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//事件委托，添加的子元素也有事件</span></div><div class="line">    oUl.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">        <span class="keyword">var</span> target = ev.target || ev.srcElement;</div><div class="line">        <span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</div><div class="line">            target.style.background = <span class="string">"red"</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;;</div><div class="line">    oUl.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">        <span class="keyword">var</span> target = ev.target || ev.srcElement;</div><div class="line">        <span class="keyword">if</span>(target.nodeName.toLowerCase() == <span class="string">'li'</span>)&#123;</div><div class="line">            target.style.background = <span class="string">"#fff"</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="comment">//添加新节点</span></div><div class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        num++;</div><div class="line">        <span class="keyword">var</span> oLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</div><div class="line">        oLi.innerHTML = <span class="number">111</span>*num;</div><div class="line">        oUl.appendChild(oLi);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看，上面是用事件委托的方式，新添加的子元素是带有事件效果的，我们可以发现，当用事件委托的时候，根本就不需要去遍历元素的子节点，只需要给父级元素添加事件就好了，其他的都是在js里面的执行，这样可以大大的减少dom操作，这才是事件委托的精髓所在。</p>
<h3 id="八、事件委托使用的一些特殊场景"><a href="#八、事件委托使用的一些特殊场景" class="headerlink" title="八、事件委托使用的一些特殊场景"></a>八、事件委托使用的一些特殊场景</h3><p>现在给一个场景 ul &gt; li &gt; div &gt; p，div占满li，p占满div，还是给ul绑定时间，需要判断点击的是不是li（假设li里面的结构是不固定的），那么e.target就可能是p，也有可能是div，这种情况你会怎么处理呢？</p>
<p>那我们现在就再现一下这个场景：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"test"</span>&gt;</div><div class="line">    &lt;li&gt;</div><div class="line">        &lt;p&gt;<span class="number">11111111111</span>&lt;<span class="regexp">/p&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>li&gt;</div><div class="line">    &lt;li&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">            <span class="number">22222222</span></div><div class="line">        &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>li&gt;</div><div class="line">    &lt;li&gt;</div><div class="line">        &lt;span&gt;<span class="number">3333333333</span>&lt;<span class="regexp">/span&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>li&gt;</div><div class="line">    &lt;li&gt;<span class="number">4444444</span>&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">&lt;/u</span>l&gt;</div></pre></td></tr></table></figure>
<p>如上列表，有4个li，里面的内容各不相同，点击li，event对象肯定是当前点击的对象，怎么指定到li上，下面我直接给解决方案：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</div><div class="line">oUl.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> target = ev.target;</div><div class="line">    <span class="keyword">while</span>(target !== oUl )&#123;</div><div class="line">        <span class="keyword">if</span>(target.tagName.toLowerCase() == <span class="string">'li'</span>)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'li click~'</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        target = target.parentNode;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>核心代码是while循环部分，实际上就是一个递归调用，你也可以写成一个函数，用递归的方法来调用，同时用到冒泡的原理，从里往外冒泡，知道currentTarget为止，当当前的target是li的时候，就可以执行对应的事件了，然后终止循环，恩，没毛病！</p>
<p>这里看不到效果，大家可以复制过去运行一下！</p>
<h3 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h3><p>那什么样的事件可以用事件委托，什么样的事件不可以用呢？</p>
<p>适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。</p>
<p>值得注意的是，mouseover和mouseout虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。</p>
<p>不适合的就有很多了，举个例子，mousemove，每次都要计算它的位置，非常不好把控，在不如说focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。</p>
<p>参考博客：<br><a href="http://www.cnblogs.com/liugang-vip/p/5616484.html" target="_blank" rel="external">‘凌云之翼’的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 前端备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 转载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一道有趣的算法面试题]]></title>
      <url>/2017/11/03/%E4%B8%80%E9%81%93%E6%9C%89%E8%B6%A3%E7%9A%84%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>昨天面试时遇到一道算法题，挺有趣的，在这里做一个分享 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>问题：已知一个字符串，请以字典序写出它的所有排列组合。</p>
<p>例如：’asd’的所有排列组就是[“ads”, “asd”, “das”, “dsa”, “sad”, “sda”]；</p>
<p>规定：字符串由小写字母组成，且无重复</p>
<h3 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h3><p>这是个典型的排列组合问题，对于长度为<code>n</code>的字符串，排列的数组的长度为<code>n!</code>个。我们可以用<strong>递归</strong>来解决此类问题，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> str = str.split(<span class="string">''</span>).sort().join(<span class="string">''</span>);</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span> (<span class="params">str,i=<span class="string">''</span></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(str.length===<span class="number">1</span>)&#123;</div><div class="line">            arr.push(i+str);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>;x&lt;str.length;x++)&#123;</div><div class="line">            demo(str.substring(<span class="number">0</span>,x)+str.substring(x+<span class="number">1</span>),i+str[x]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    demo(str);</div><div class="line">    <span class="keyword">return</span> arr ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h3><p>事实上，以上的递归算法有大量的重复计算，例如：</p>
<p>对于<code>abcdefg</code>字符串，当字符串前两位确定时，比如，前两位字母是是<code>a</code>、<code>b</code>，那么后<code>5</code>个字母<code>cdefg</code>的排列组合只要计算一次，再加上前面的两位字母就好了。</p>
<p>但是，在上面的算法中，当前面的两位字母是<code>ab</code>或者<code>ba</code>时，算法都重新计算了一次<code>cdefg</code>的排列组合，这显然是不合理的。</p>
<p>这时候需要设计一个缓存，来保存已经计算过的字符串。</p>
<p>遗憾的是，今天王二的智商下线，想了半天没有想出如何设计这个缓存，等智商重新上线再来想吧。</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一道有趣的canvas题目]]></title>
      <url>/2017/11/01/%E4%B8%80%E9%81%93%E6%9C%89%E8%B6%A3%E7%9A%84canvas%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>昨天收到一份笔试邮件，关于canvas的，平时canvas接触的比较少，在这里做一个记录 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1711/1.png?raw=true" alt="Alt text"></p>
<p>1.屏幕中随机产生n个蓝色大小不一的气泡，坐标随机</p>
<p>2.红色气泡跟随鼠标移动</p>
<p>3.当红色气泡会与蓝色气泡发生碰撞效果(类似桌球) </p>
<p>4.红色气泡会被屏幕边缘阻挡</p>
<p>5.蓝色气泡左右屏上下屏互通</p>
<p>6.蓝色气泡的运动及互动行为请自由发挥</p>
<h3 id="二、解决方法"><a href="#二、解决方法" class="headerlink" title="二、解决方法"></a>二、解决方法</h3><p>代码的实现如下：</p>
<p>如果想看显示的运行效果，可以使劲的戳<a href="http://www.wangyulue.com/demos/canvas_bubble/index.html" target="_blank" rel="external">这里</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=<span class="string">"en"</span>&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></div><div class="line">    &lt;style&gt;</div><div class="line">        #canvas&#123;</div><div class="line">            margin: <span class="number">30</span>px;</div><div class="line">            border: 1px solid #000000;</div><div class="line">            padding: <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &lt;<span class="regexp">/style&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;canvas id=<span class="string">"canvas"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></div><div class="line">    &lt;script&gt;</div><div class="line">        ! <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> the_canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>),    <span class="comment">//创建画布</span></div><div class="line">                context = the_canvas.getContext(<span class="string">"2d"</span>),</div><div class="line">                blueBubble = <span class="keyword">new</span> Image(),</div><div class="line">                redBubble = <span class="keyword">new</span> Image(),</div><div class="line">                n = <span class="number">20</span>   ,   <span class="comment">//蓝色泡泡的数量</span></div><div class="line">                arr = [], <span class="comment">//储存蓝色泡泡的array</span></div><div class="line">                maxRadius = <span class="number">80</span>, <span class="comment">//泡泡的最大半径</span></div><div class="line">                minRadius = <span class="number">40</span>, <span class="comment">//泡泡的最小半径</span></div><div class="line">                redBubbleRadius = <span class="number">80</span>, <span class="comment">//红色泡泡的半径</span></div><div class="line">                canvasWidth = <span class="number">800</span>, <span class="comment">//画布的宽度</span></div><div class="line">                canvasHeight = <span class="number">600</span>, <span class="comment">//画布的高度</span></div><div class="line">                maxSpeed = <span class="number">80</span> , <span class="comment">//泡泡的最大速度（x,y向量坐标速度）</span></div><div class="line">                minSpeed = <span class="number">50</span> , <span class="comment">//泡泡的最小速度（x,y向量坐标速度）</span></div><div class="line">                current_point = &#123;</div><div class="line">                    x: <span class="literal">null</span>, <span class="comment">//当前鼠标x</span></div><div class="line">                    y: <span class="literal">null</span>  <span class="comment">//当前鼠标y</span></div><div class="line">                &#125;;</div><div class="line">            <span class="comment">//定时刷新方法</span></div><div class="line">            <span class="keyword">var</span> refresh = <span class="built_in">window</span>.requestAnimationFrame || <span class="built_in">window</span>.webkitRequestAnimationFrame || <span class="built_in">window</span>.mozRequestAnimationFrame || <span class="built_in">window</span>.oRequestAnimationFrame || <span class="built_in">window</span>.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">                <span class="built_in">window</span>.setTimeout(func, <span class="number">1000</span>/<span class="number">60</span>);</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            init();</div><div class="line">            getBubbles();</div><div class="line">            <span class="comment">//图片加载完成后，开始绘画</span></div><div class="line">            blueBubble.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                drawBubble();</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="comment">//生成指定个蓝圈圈，外加一个红圈圈</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getBubbles</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</div><div class="line">                    <span class="keyword">var</span> obj ;</div><div class="line">                    <span class="keyword">if</span>(i===n)&#123;</div><div class="line">                        obj = getBubble(redBubbleRadius) ;</div><div class="line">                        obj.type = <span class="string">'red'</span> ;</div><div class="line">                        <span class="comment">/*这段代码的本意是防止在初始化时红圈圈与蓝圈圈以外重叠在一起，</span></div><div class="line"><span class="comment">                         * 但是有了下面 momentum下两行特殊的处理代码，这一段代码已经没有必要了。*/</span></div><div class="line"></div><div class="line">                        <span class="comment">/*  if(!noRepeat (obj,arr))&#123;</span></div><div class="line"><span class="comment">                                i -- ;</span></div><div class="line"><span class="comment">                                continue ;</span></div><div class="line"><span class="comment">                            &#125;  */</span></div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        obj = getBubble() ;</div><div class="line">                    &#125;</div><div class="line">                    arr.push(obj);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//定义画布大小以及加载图片资源文件</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//定义画布大小</span></div><div class="line">                the_canvas.width = canvasWidth || <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth;</div><div class="line">                the_canvas.height = canvasHeight || <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</div><div class="line">                <span class="comment">//加载泡泡</span></div><div class="line">                blueBubble.src = <span class="string">'./img/blue-bubble.png'</span>;</div><div class="line">                redBubble.src = <span class="string">'./img/red-bubble.png'</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//随机生成小圆圈的方法，传入一个半径，如果不传，则半径大小随机生成</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getBubble</span> (<span class="params">radius</span>) </span>&#123;</div><div class="line">                radius = radius || <span class="built_in">Math</span>.round((<span class="built_in">Math</span>.random()*(maxRadius-minRadius)+minRadius)/<span class="number">2</span>);  <span class="comment">//圈圈的半径</span></div><div class="line">                <span class="keyword">var</span> x = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(the_canvas.width<span class="number">-2</span>*radius)+radius),  <span class="comment">//圈圈的x坐标</span></div><div class="line">                    y = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(the_canvas.height<span class="number">-2</span>*radius)+radius),  <span class="comment">//圈圈的y坐标</span></div><div class="line">                    vx = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(maxSpeed-minSpeed)+minSpeed)*(<span class="built_in">Math</span>.random()&gt;<span class="number">0.5</span>?<span class="number">1</span>:<span class="number">-1</span>),</div><div class="line">                    vy = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(maxSpeed-minSpeed)+minSpeed)*(<span class="built_in">Math</span>.random()&gt;<span class="number">0.5</span>?<span class="number">1</span>:<span class="number">-1</span>);</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    radius : radius ,</div><div class="line">                    x : x ,</div><div class="line">                    y : y ,</div><div class="line">                    vx : vx ,</div><div class="line">                    vy : vy ,</div><div class="line">                    type : <span class="string">'blue'</span></div><div class="line">                &#125;;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//确定红圈的位置，不能与篮圈重叠</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">noRepeat</span> (<span class="params">a1,arr</span>) </span>&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>;x&lt;arr.length;x++)&#123;</div><div class="line">                    <span class="keyword">var</span> x_dist, y_dist, dist;</div><div class="line">                    x_dist = a1.x - arr[x].x; <span class="comment">//x轴距离 l</span></div><div class="line">                    y_dist = a1.y - arr[x].y; <span class="comment">//y轴距离 n</span></div><div class="line">                    dist = x_dist * x_dist + y_dist * y_dist; <span class="comment">//总距离的平方</span></div><div class="line">                    <span class="keyword">if</span>(dist&lt;=<span class="built_in">Math</span>.pow(a1.radius+arr[x].radius,<span class="number">2</span>)) <span class="keyword">return</span> <span class="literal">false</span> ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span> ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//监听鼠标的位置</span></div><div class="line">            <span class="built_in">window</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">                e = e || <span class="built_in">window</span>.event;</div><div class="line">                current_point.x = e.layerX;</div><div class="line">                current_point.y = e.layerY;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="comment">//为了算这个动画我又拾起了高中的动量守恒定律</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">momentum</span> (<span class="params">a1,a2</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> x_dist, y_dist, dist,m1,m2,vx1,vy1,vx2,vy2;</div><div class="line">                x_dist = a1.x - a2.x; <span class="comment">//x轴距离 l</span></div><div class="line">                y_dist = a1.y - a2.y; <span class="comment">//y轴距离 n</span></div><div class="line">                dist = x_dist * x_dist + y_dist * y_dist; <span class="comment">//总距离的平方</span></div><div class="line">                <span class="keyword">if</span>(<span class="built_in">Math</span>.pow(a1.radius+a2.radius,<span class="number">2</span>)-dist&gt;<span class="number">0</span>)&#123;</div><div class="line">                    <span class="comment">/*下面两行的代码的作用是：防止红圈圈与蓝圈圈粘在一起；</span></div><div class="line"><span class="comment">                     * 由于动画的刷新频率有限，当用鼠标移动红圈圈速度过快时，</span></div><div class="line"><span class="comment">                     * 有可能红圈圈与蓝圈圈会重叠在一起，如果遇到这种情况，则把蓝圈圈移到红圈圈的外边*/</span></div><div class="line">                    <span class="keyword">var</span> temp = <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(a1.radius+a2.radius,<span class="number">2</span>)-y_dist * y_dist) ;</div><div class="line">                    a1.x - a2.x&gt;<span class="number">0</span>?a1.x=a2.x+temp:a1.x=a2.x-temp ;</div><div class="line">                    <span class="comment">/***end***/</span></div><div class="line">                    m1 = <span class="built_in">Math</span>.pow(a1.radius,<span class="number">2</span>) ;</div><div class="line">                    m2 = <span class="built_in">Math</span>.pow(a2.radius,<span class="number">2</span>) ;</div><div class="line">                    vx1 = a1.vx ;</div><div class="line">                    vy1 = a1.vy ;</div><div class="line">                    vx2 = a2.vx ;</div><div class="line">                    vy2 = a2.vy ;</div><div class="line">                    a1.vx = ((m1-m2)*vx1+<span class="number">2</span>*m2*vx2)/(m1+m2) ;</div><div class="line">                    a1.vy = ((m1-m2)*vy1+<span class="number">2</span>*m2*vy2)/(m1+m2) ;</div><div class="line">                    a2.vx = (<span class="number">2</span>*m1*vx1+(m2-m1)*vx2)/(m1+m2) ;</div><div class="line">                    a2.vy = (<span class="number">2</span>*m1*vy1+(m2-m1)*vy2)/(m1+m2) ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//绘画的具体方法</span></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">drawBubble</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                context.clearRect(<span class="number">0</span>, <span class="number">0</span>, the_canvas.width, the_canvas.height);</div><div class="line">                arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">                    item.x += item.vx/<span class="number">10</span> ;  <span class="comment">//移动速度太快了，这边除以个10</span></div><div class="line">                    item.y += item.vy/<span class="number">10</span> ;</div><div class="line">                    <span class="keyword">if</span>(item.type===<span class="string">'blue'</span>)&#123;</div><div class="line">                        item.x&gt;the_canvas.width &amp;&amp; (item.x-=the_canvas.width);</div><div class="line">                        item.x&lt;<span class="number">0</span> &amp;&amp; (item.x+=the_canvas.width);</div><div class="line">                        item.y&gt;the_canvas.height &amp;&amp; (item.y-=the_canvas.height);</div><div class="line">                        item.y&lt;<span class="number">0</span> &amp;&amp; (item.y+=the_canvas.height);</div><div class="line">                        context.drawImage(blueBubble, item.x-item.radius, item.y-item.radius, <span class="number">2</span>*item.radius, <span class="number">2</span>*item.radius);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(item.type===<span class="string">'red'</span>)&#123;</div><div class="line">                        arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">                            <span class="keyword">if</span>(i.type===<span class="string">'blue'</span>)&#123;</div><div class="line">                                momentum(i,item);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">                        item.vx *= item.x &gt; the_canvas.width-item.radius || item.x &lt; item.radius ? <span class="number">-1</span> : <span class="number">1</span> ;</div><div class="line">                        item.vy *= item.y &gt; the_canvas.height-item.radius || item.y&lt; item.radius ? <span class="number">-1</span> : <span class="number">1</span> ;</div><div class="line">                        <span class="keyword">if</span>(current_point.x&gt;item.radius&amp;&amp;current_point.x&lt;the_canvas.width-item.radius&amp;&amp;current_point.y&gt;item.radius&amp;&amp;current_point.y&lt;the_canvas.height-item.radius)&#123;</div><div class="line">                            item.x = current_point.x;</div><div class="line">                            item.y = current_point.y;</div><div class="line">                        &#125;</div><div class="line">                        context.drawImage(redBubble, item.x-item.radius, item.y-item.radius, <span class="number">2</span>*item.radius, <span class="number">2</span>*item.radius);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                refresh(drawBubble);</div><div class="line">            &#125;</div><div class="line">        &#125;()</div><div class="line">    &lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>body&gt;</div><div class="line">&lt;<span class="regexp">/html&gt;</span></div></pre></td></tr></table></figure>
<p>这里需要特别特别感谢的是 <a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="external">canvas-nest</a> 这个开源库,从它的源代码里王二得到了很多灵感。什么？ 你不知道这个开源库是干嘛用的，看见网站背景的炫酷小点点了吗？就是这个开源库写的。</p>
<h3 id="三、遗留问题"><a href="#三、遗留问题" class="headerlink" title="三、遗留问题"></a>三、遗留问题</h3><p>这里的小球球的碰撞后的轨迹需要二维弹性碰撞下的动量定理，而王二物理不太好，只学过一维弹性碰撞下的动量定理，所以王二在方法里用的是一维弹性碰撞下的动量定理。</p>
<p>所以你会发现小球之间的碰撞有那么一丝丝不符合物理常识。没办法，王二最近智商不太好，等王二智商好一点了再解决这个问题。</p>
<p>如果读者你是物理大神，赐教一下哈！</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> canvas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python基础语法小结（六）]]></title>
      <url>/2017/11/01/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>打算最近有时间看一看Python的基础语法,这一节里主要记录了Python中<strong>文件的增删改读</strong>、<strong>操作目录</strong>、<strong>多进程、多线程</strong>中值得留意的地方。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、读取文件"><a href="#一、读取文件" class="headerlink" title="一、读取文件"></a>一、读取文件</h3><p>如果想读取本地的文件，<code>Python</code>一行代码就能搞定：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</div></pre></td></tr></table></figure>
<p>标示符<code>&#39;r&#39;</code>表示读，这样，我们就成功地打开了一个文件；如果文件不存在，<code>Python</code>会抛出一个错误；</p>
<p>调用<code>read()</code>方法可以一次读取文件的全部内容，<code>Python</code>把内容读到内存，用一个<code>str</code>对象表示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</div><div class="line"><span class="string">'Hello, world!'</span></div></pre></td></tr></table></figure>
<p>最后需要用<code>close()</code>方法关闭文件，文件对象不关闭的话会占用操作系统的资源。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure>
<h3 id="二、修改或新建文件"><a href="#二、修改或新建文件" class="headerlink" title="二、修改或新建文件"></a>二、修改或新建文件</h3><p>写文件和读文件是一样的，唯一区别是调用<code>open()</code>函数时，传入标识符<code>&#39;w&#39;</code>表示写入文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">'Hello, wanger!'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</div></pre></td></tr></table></figure>
<p><strong>如果没有<code>test.txt</code>文件，<code>Python</code>会为我们创建一个<code>test.txt</code>文件。</strong></p>
<p>这里务必要调用<code>f.close()</code>来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用<code>close()</code>方法时，操作系统才保证把没有写入的数据全部写入磁盘。</p>
<p>需要注意的是，当用 <code>f = open(&#39;test.txt&#39;, &#39;w&#39;)</code> 时， <code>Python</code>会把原来 <code>&#39;test.txt&#39;</code> 里的文件清除。</p>
<h3 id="三、删除文件"><a href="#三、删除文件" class="headerlink" title="三、删除文件"></a>三、删除文件</h3><p>如果要删除文件，需要用到<code>python</code>的内建模块<code>os</code>，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.remove(<span class="string">'test.txt'</span>)</div></pre></td></tr></table></figure>
<p>如果要删除的文件不存在，<code>Python</code>会抛出一个错误；</p>
<h3 id="四、创建或删除目录"><a href="#四、创建或删除目录" class="headerlink" title="四、创建或删除目录"></a>四、创建或删除目录</h3><p>如果要创建目录，可以使用<code>mkdir()</code>方法，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="comment">#创建testdir目录</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">'testdir'</span>)</div><div class="line"><span class="comment">#删除testdir目录</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">'testdir'</span>)</div></pre></td></tr></table></figure>
<p>以上代码会相对于路径生成（删除）一个空的<code>testdir</code>文件夹，如果想相对于决绝路径创建目录，参考以下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看当前目录的绝对路径:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="string">'.'</span>)</div><div class="line"><span class="string">'C:\\Users\\Administrator\\Desktop\\python'</span></div><div class="line"><span class="comment"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">'/Users/michael'</span>, <span class="string">'testdir'</span>)</div><div class="line"><span class="string">'C:\\Users\\Administrator\\Desktop\\python\\testdir'</span></div><div class="line"><span class="comment"># 然后创建一个目录:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">'C:\\Users\\Administrator\\Desktop\\python\\testdir'</span>)</div><div class="line"><span class="comment"># 删掉一个目录:</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">'C:\\Users\\Administrator\\Desktop\\python\\testdir'</span>)</div></pre></td></tr></table></figure>
<p>这里需要通过<code>os.path.join()</code>函数来连接路径，因为不同操作系统的路径分隔符也有所不同，Linux/Unix/Mac下为<code>/</code>，Windows下为<code>\</code>。</p>
<h3 id="五、多进程、多线程"><a href="#五、多进程、多线程" class="headerlink" title="五、多进程、多线程"></a>五、多进程、多线程</h3><p>多进程、多线程这一块没有仔细看，等以后有实际用到在详细研究。</p>
<p>这里先留一个大致的印象：<strong>在CPU密集型任务下，多进程更快，或者说效果更好；而IO密集型，多线程能有效提高效率。</strong></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python基础语法小结（五）]]></title>
      <url>/2017/10/30/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>打算最近有时间看一看Python的基础语法,这一节里主要记录了Python<strong>面向对象</strong>中<strong>类和实例</strong>、<strong><code>__init__</code>方法</strong>、<strong>私有变量</strong>、<strong>继承</strong>、<strong>MixIn</strong>、<strong>判断对象类型</strong>、<strong>dir()</strong>、<strong>实例属性和类属性</strong>、<strong><code>__slots__</code>方法</strong>、<strong>使用@property</strong>中值得留意的地方。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、类和实例"><a href="#一、类和实例" class="headerlink" title="一、类和实例"></a>一、类和实例</h3><p>1、在Python中，定义类通过class关键字来实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>定义好了Student类，就可以根据Student类创建出Student的实例，创建实例通过类名+()实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart</div><div class="line">&lt;__main__.Student object at <span class="number">0x000001FECADEE128</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="二、-init-方法"><a href="#二、-init-方法" class="headerlink" title="二、__init__方法"></a>二、<code>__init__</code>方法</h3><p>通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，我们可以把一些类的属性绑定上去，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.score = score</div></pre></td></tr></table></figure>
<p>这时候我们的的学生就有了自己的名字与分数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.name</div><div class="line"><span class="string">'Bart Simpson'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.score</div><div class="line"><span class="number">59</span></div></pre></td></tr></table></figure>
<p>需要注意的是，<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p>
<h3 id="三、私有变量"><a href="#三、私有变量" class="headerlink" title="三、私有变量"></a>三、私有变量</h3><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在<code>Python</code>中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（<code>private</code>），只有内部可以访问，外部不能访问，所以，我们把<code>Student</code>类改一改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></div><div class="line">        self.__name = name</div><div class="line">        self.__score = score</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'%s: %s'</span> % (self.__name, self.__score))</div></pre></td></tr></table></figure>
<p>改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问<code>实例变量.__name</code>和<code>实例变量.__score</code>了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">98</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bart.__name</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'__name'</span></div></pre></td></tr></table></figure>
<p>那就一定不能从外部访问了吗？其实也不是。不能直接访问<code>__name</code>是因为<code>Python</code>解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量，但是最好别这么干。</p>
<h3 id="四、继承"><a href="#四、继承" class="headerlink" title="四、继承"></a>四、继承</h3><p>在上述的类<code>Student</code>中 :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>我们注意到<code>Stuedent</code>中紧跟着一对括号，括号中是<code>object</code>，那么<code>Student</code>就是从<code>object</code>上继承下来的。</p>
<p>如果想定义两个或多个父类那该怎么办呢？也很简单，写上两个就好了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runnable</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Running...'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal, Runnable)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h3 id="五、MixIn"><a href="#五、MixIn" class="headerlink" title="五、MixIn"></a>五、MixIn</h3><p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如，<code>Ostrich</code>继承自<code>Bird</code>。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让<code>Dog</code>除了继承自<code>Animal</code>外，再同时继承<code>Runnable</code>。这种设计通常称之为<code>MixIn</code>。</p>
<p><code>MixIn</code>的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个<code>MixIn</code>的功能，而不是设计多层次的复杂的继承关系。</p>
<p>个人认为<code>MixIn</code>的概念类似于<code>Java</code>中一个类可以添加多个接口这个概念。</p>
<h3 id="六、判断对象类型"><a href="#六、判断对象类型" class="headerlink" title="六、判断对象类型"></a>六、判断对象类型</h3><p>我们可以使用<code>type()</code>、<code>isinstance()</code>来判断对象的类型，他们写起来就像这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">123</span>)==type(<span class="number">456</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">123</span>)==int</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">'abc'</span>)==type(<span class="string">'123'</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">'abc'</span>)==str</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">'abc'</span>)==type(<span class="number">123</span>)</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, str)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, int)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<h3 id="七、使用dir"><a href="#七、使用dir" class="headerlink" title="七、使用dir()"></a>七、使用dir()</h3><p><code>dir()</code>这个函数算是惊艳到王二了，它返回一个包含字符串的<code>list</code>，获得一个传入对象的所有属性和方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(<span class="string">'ABC'</span>)</div><div class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getnewargs__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mod__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__rmod__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'capitalize'</span>, <span class="string">'casefold'</span>, <span class="string">'center'</span>, <span class="string">'count'</span>, <span class="string">'encode'</span>, <span class="string">'endswith'</span>, <span class="string">'expandtabs'</span>, <span class="string">'find'</span>, <span class="string">'format'</span>, <span class="string">'format_map'</span>, <span class="string">'index'</span>, <span class="string">'isalnum'</span>, <span class="string">'isalpha'</span>, <span class="string">'isdecimal'</span>, <span class="string">'isdigit'</span>, <span class="string">'isidentifier'</span>, <span class="string">'islower'</span>, <span class="string">'isnumeric'</span>, <span class="string">'isprintable'</span>, <span class="string">'isspace'</span>, <span class="string">'istitle'</span>, <span class="string">'isupper'</span>, <span class="string">'join'</span>, <span class="string">'ljust'</span>, <span class="string">'lower'</span>, <span class="string">'lstrip'</span>, <span class="string">'maketrans'</span>, <span class="string">'partition'</span>, <span class="string">'replace'</span>, <span class="string">'rfind'</span>, <span class="string">'rindex'</span>, <span class="string">'rjust'</span>, <span class="string">'rpartition'</span>, <span class="string">'rsplit'</span>, <span class="string">'rstrip'</span>, <span class="string">'split'</span>, <span class="string">'splitlines'</span>, <span class="string">'startswith'</span>, <span class="string">'strip'</span>, <span class="string">'swapcase'</span>, <span class="string">'title'</span>, <span class="string">'translate'</span>, <span class="string">'upper'</span>, <span class="string">'zfill'</span>]</div></pre></td></tr></table></figure>
<p>当然，我们还可以通过<code>getattr()</code>、<code>setattr()</code>以及<code>hasattr()</code>来直接操作一个对象的状态。</p>
<h3 id="八、实例属性和类属性"><a href="#八、实例属性和类属性" class="headerlink" title="八、实例属性和类属性"></a>八、实例属性和类属性</h3><p>在编码的时候，不要把实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    name = <span class="string">'Student'</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建实例s</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span></div><div class="line">Student</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student.name) <span class="comment"># 打印类的name属性</span></div><div class="line">Student</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 给实例绑定name属性</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></div><div class="line">Michael</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(Student.name) <span class="comment"># 但是类属性并未消失，用Student.name仍然可以访问</span></div><div class="line">Student</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> s.name <span class="comment"># 如果删除实例的name属性</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.name) <span class="comment"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></div><div class="line">Student</div></pre></td></tr></table></figure>
<h3 id="九、使用-slots"><a href="#九、使用-slots" class="headerlink" title="九、使用__slots__"></a>九、使用<code>__slots__</code></h3><p>如果我们想要限制实例的属性,可以使用<code>__slots__</code>，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></div><div class="line"></div><div class="line"><span class="comment">#然后，我们试试</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建新的实例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 绑定属性'name'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">25</span> <span class="comment"># 绑定属性'age'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># 绑定属性'score'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></div></pre></td></tr></table></figure>
<p>由于<code>&#39;score&#39;</code>没有被放到<code>__slots__</code>中，所以不能绑定<code>score</code>属性，试图绑定<code>score</code>将得到<code>AttributeError</code>的错误。</p>
<p>使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的，除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p>
<h3 id="十、使用-property"><a href="#十、使用-property" class="headerlink" title="十、使用@property"></a>十、使用@property</h3><p><code>Python</code>内置的<code>@property</code>装饰器可以把一个方法变成属性调用，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._score</div><div class="line"></div><div class="line"><span class="meta">    @score.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer!'</span>)</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0 ~ 100!'</span>)</div><div class="line">        self._score = value</div></pre></td></tr></table></figure>
<p><code>@property</code>的实现比较复杂，我们先考察如何使用。把一个<code>getter</code>方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个<code>setter</code>方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">60</span> <span class="comment"># OK，实际转化为s.set_score(60)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score <span class="comment"># OK，实际转化为s.get_score()</span></div><div class="line"><span class="number">60</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">9999</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">ValueError: score must between <span class="number">0</span> ~ <span class="number">100</span>!</div></pre></td></tr></table></figure>
<p>如果只定义getter方法，不定义setter方法，那它就是一个只读属性。</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sass学习小结]]></title>
      <url>/2017/10/30/sass%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近有时间又看了一遍Sass的基础语法，这里主要记录了Sass基础语法中值得留意的地方，如果之前没有接触过sass，Sass 中文网的<a href="https://www.sass.hk/guide/" target="_blank" rel="external">快速入门</a>或许能帮助到你。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、SCSS-与-Sass-异同"><a href="#一、SCSS-与-Sass-异同" class="headerlink" title="一、SCSS 与 Sass 异同"></a>一、SCSS 与 Sass 异同</h3><p><code>SCSS</code> 是 <code>Sass3</code> 引入新的语法，其语法完全兼容 <code>CSS3</code>，并且继承了 <code>Sass</code> 的强大功能。也就是说，任何标准的 <code>CSS3</code> 样式表都是具有相同语义的有效的 <code>SCSS</code> 文件。另外，<code>SCSS</code> 还能识别大部分 <code>CSS hacks</code>（一些 <code>CSS</code> 小技巧）和特定于浏览器的语法。</p>
<p>由于 <code>SCSS</code> 是 <code>CSS</code> 的扩展，因此，所有在 <code>CSS</code> 中正常工作的代码也能在 <code>SCSS</code> 中正常工作。也就是说，对于一个 <code>Sass</code> 用户，只需要理解 <code>Sass</code> 扩展部分如何工作的，就能完全理解 <code>SCSS</code>。大部分扩展，例如变量、<code>parent references</code> 和 指令都是一致的；唯一不同的是，<code>SCSS</code> 需要使用分号和花括号而不是换行和缩进。 例如，以下这段简单的 <code>Sass</code> 代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#sidebar</div><div class="line">  width: 30%</div><div class="line">  background-color: #faa</div></pre></td></tr></table></figure>
<p>只需添加花括号和分号就能转换为 SCSS 语法：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#sidebar</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#faa</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，SCSS 对空白符号不敏感。上面的代码也可以书写成下面的样子：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#sidebar</span> &#123;<span class="attribute">width</span>: <span class="number">30%</span>; <span class="attribute">background-color</span>: <span class="number">#faa</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="二、-变量名用中划线还是下划线？"><a href="#二、-变量名用中划线还是下划线？" class="headerlink" title="二、 变量名用中划线还是下划线？"></a>二、 变量名用中划线还是下划线？</h3><p><code>sass</code> 并不想强迫任何人一定使用中划线或下划线，所以这两种用法相互兼容。用中划线声明的变量可以使用下划线的方式引用，反之亦然。这意味着即使 <code>compass</code> 选择用中划线的命名方式，这并不影响你在使用 <code>compass</code> 的样式中用下划线的命名方式进行引用：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$link-color</span>: blue;</div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$link_color</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//编译后</span></div><div class="line"></div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、子组合选择器和同层组合选择器：-gt-、-和"><a href="#三、子组合选择器和同层组合选择器：-gt-、-和" class="headerlink" title="三、子组合选择器和同层组合选择器：&gt;、+和~"></a>三、子组合选择器和同层组合选择器：&gt;、+和~</h3><p>这些组合选择器可以毫不费力地应用到sass的规则嵌套中。可以把它们放在外层选择器后边，或里层选择器前边：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">article</span> &#123;</div><div class="line">  ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;</div><div class="line">  &gt; section &#123; background: <span class="number">#eee</span> &#125;</div><div class="line">  dl &gt; &#123;</div><div class="line">    dt &#123; color: <span class="number">#333</span> &#125;</div><div class="line">    dd &#123; color: <span class="number">#555</span> &#125;</div><div class="line">  &#125;</div><div class="line">  nav + &amp; &#123; margin-top: <span class="number">0</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、静默注释"><a href="#四、静默注释" class="headerlink" title="四、静默注释"></a>四、静默注释</h3><p><code>sass</code>另外提供了一种不同于<code>css</code>标准注释格式<code>/* ... */</code>的注释语法，即静默注释，其内容不会出现在生成的<code>css</code>文件中。静默注释的语法跟<code>Java</code>、<code>ScriptJava</code>等类 <code>C</code> 的语言中单行注释的语法相同，它们以 <code>//</code> 开头，注释内容直到行末:</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#333</span>; <span class="comment">// 这种注释内容不会出现在生成的css文件中</span></div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/* 这种注释内容会出现在生成的css文件中 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="五、混合器"><a href="#五、混合器" class="headerlink" title="五、混合器"></a>五、混合器</h3><p>如果你的整个网站中有几处小小的样式类似（例如一致的颜色和字体），那么使用变量来统一处理这种情况是非常不错的选择。但是当你的样式变得越来越复杂，你需要大段大段的重用样式的代码，独立的变量就没办法应付这种情况了。你可以通过<code>sass</code>的混合器实现大段样式的重用。</p>
<p>混合器使用 <code>@mixin</code> 标识符定义,这个标识符给一大段样式赋予一个名字，这样你就可以轻易地通过引用这个名字重用这段样式。下边的这段 <code>sass</code> 代码，定义了一个非常简单的混合器，目的是添加跨浏览器的圆角边框。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> rounded-corners &#123;</div><div class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就可以在你的样式表中通过 <code>@include</code> 来使用这个混合器，放在你希望的任何地方。<code>@include</code> 调用会把混合器中的所有样式提取出来放在 <code>@include</code> 被调用的地方。如果像下边这样写：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">notice &#123;</div><div class="line">  <span class="attribute">background-color</span>: green;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</div><div class="line">  @<span class="keyword">include</span> rounded-corners;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//sass最终生成:</span></div><div class="line"></div><div class="line"><span class="selector-class">.notice</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: green;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</div><div class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>当然，混合器也可以使用<code>sass</code>的各种规则，变量、嵌套，随便你用。</strong></p>
<p>更令人兴奋地是， 我们还可以给混合器传参，来定制混合器生成的精确样式。用起来很向<code>js</code>的函数：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> link-colors(<span class="variable">$normal</span>, <span class="variable">$hover</span>, <span class="variable">$visited</span>) &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$normal</span>;</div><div class="line">  &amp;:hover &#123; <span class="attribute">color</span>: <span class="variable">$hover</span>; &#125;</div><div class="line">  &amp;:visited &#123; <span class="attribute">color</span>: <span class="variable">$visited</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当混合器被 <code>@include</code> 时，你可以把它当作一个<code>css</code>函数来传参。如果你像下边这样写：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  @<span class="keyword">include</span> link-colors(blue, red, green);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Sass最终生成的是：</span></div><div class="line"></div><div class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: blue; &#125;</div><div class="line"><span class="selector-tag">a</span>:hover &#123; <span class="attribute">color</span>: red; &#125;</div><div class="line"><span class="selector-tag">a</span>:visited &#123; <span class="attribute">color</span>: green; &#125;</div></pre></td></tr></table></figure>
<p>噢，对了，我们还可以为混合器设置默认参数，是不是觉得用上了JS的<code>ES6</code>语法。</p>
<p>参数默认值使用<code>$name: default-value</code>的声明形式，默认值可以是任何有效的<code>css</code>属性值，甚至是其他参数的引用，如下代码：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> link-colors(</div><div class="line">    <span class="variable">$normal</span>,</div><div class="line">    <span class="variable">$hover</span>: <span class="variable">$normal</span>,</div><div class="line">    <span class="variable">$visited</span>: <span class="variable">$normal</span></div><div class="line">  )</div><div class="line">&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$normal</span>;</div><div class="line">  &amp;:hover &#123; <span class="attribute">color</span>: <span class="variable">$hover</span>; &#125;</div><div class="line">  &amp;:visited &#123; <span class="attribute">color</span>: <span class="variable">$visited</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果像下边这样调用：<code>@include link-colors(red)</code>, <code>$hover</code>和<code>$visited</code>也会被自动赋值为<code>red</code>。</p>
<p>参考文档<br><a href="https://www.sass.hk/guide/" target="_blank" rel="external">sass 中文网</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp入门示例]]></title>
      <url>/2017/10/27/gulp%E5%85%A5%E9%97%A8%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近在学习Gulp,自己也整理了一些小demo,你可以访问<a href="https://github.com/WangYuLue/demo-gulp" target="_blank" rel="external">demo-gulp</a>来下载这些demo,整理这些demo目的是帮自己快速了解gulp的一些基本功能（检查js语法和风格、压缩js文件、合并js文件、编译sass文件，压缩css，热更新文件，浏览器实时刷新）,如果你也有这方面的需求，这篇示例教程或许能帮到你 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、安装-Gulp"><a href="#一、安装-Gulp" class="headerlink" title="一、安装 Gulp"></a>一、安装 Gulp</h3><p>在全局安装gulp</p>
<blockquote>
<p>npm install -g gulp</p>
</blockquote>
<h3 id="二、基础介绍"><a href="#二、基础介绍" class="headerlink" title="二、基础介绍"></a>二、基础介绍</h3><p>gulp非常简单，实际上，gulp本身只提供了4个基础的API，它的大部分功能都是通过<a href="https://gulpjs.com/plugins/" target="_blank" rel="external">插件</a>来完成的，接下来简单的介绍下这四个基础的API，</p>
<blockquote>
<ul>
<li>gulp.task(name [, deps, fn])</li>
<li>gulp.src(globs[, options])</li>
<li>gulp.dest(path[, options]) </li>
<li>gulp.watch(glob [, opts], tasks) or gulp.watch(glob [, opts, cb])</li>
</ul>
</blockquote>
<p>在这里先不解释这四个API的具体用处，因为解释也太流于表面，我们先来看一些实例，或许看完这些实例，我们就能了解这些API的具体作用了。</p>
<h3 id="三、压缩js文件"><a href="#三、压缩js文件" class="headerlink" title="三、压缩js文件"></a>三、压缩js文件</h3><p><a href="https://github.com/WangYuLue/demo-gulp/tree/master/demo01" target="_blank" rel="external">demo01</a>向我们展示了如何创建一个压缩js的gulp任务。</p>
<p>首先，我们需要在项目的根目录下创建一个<code>gulpfile.js</code>文件，我们在文件中写下如下配置文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'js/app.js'</span>)</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'build'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>以上代码一下子就使用到了gulp四个api中的三个，简单来说，<code>gulp.task()</code>会启动一个任务，<code>gulp.src()</code>会将你要处理的文件加载进来，<code>gulp.dest()</code>会将处理好的文件输出到指定位置。如果想了解这些api的具体细节，可以参考<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="external">Culp 中文网</a>。</p>
<p>如果你克隆下了这些demo,在命令行中桥下如下代码：</p>
<blockquote>
<ul>
<li>cd demo01 //进入demo01子文件夹</li>
<li>npm install //加载依赖</li>
<li>gulp minify //运行minify这个任务</li>
</ul>
</blockquote>
<p>你就会发现在根目录下会多出一个<code>build</code>文件夹，里面有一个压缩好的<code>app.js</code>，这就是从gulp任务里生成的压缩代码。</p>
<h3 id="四、检查js语法，压缩并合并js文件"><a href="#四、检查js语法，压缩并合并js文件" class="headerlink" title="四、检查js语法，压缩并合并js文件"></a>四、检查js语法，压缩并合并js文件</h3><p>当然<code>gulp</code>能做的并不仅仅是压缩js文件，配合一些插件的使用，<code>gulp</code>还有更多的功能，参考<a href="https://github.com/WangYuLue/demo-gulp/tree/master/demo02" target="_blank" rel="external">demo02</a>，在它的目录下我们发现有如下的配置文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line">    jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line">    concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'dealJS'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">         .pipe(jshint())</div><div class="line">         .pipe(jshint.reporter(<span class="string">'default'</span>))</div><div class="line">         .pipe(uglify())</div><div class="line">         .pipe(concat(<span class="string">'app.js'</span>))</div><div class="line">         .pipe(gulp.dest(<span class="string">'build'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>其中，<code>jshint()</code>会审查我们的代码风格，<code>uglify()</code>会压缩我们的文件，<code>concat()</code>会合并我们的文件。</p>
<p>需要注意的是，<code>gulp</code>的设计理念基于unix的pipe(流)思想，所以在编写构建任务代码更加简洁，也利于开发人员的维护和阅读。</p>
<p>与<code>gulp</code>对比的<code>grunt</code>,则将代码分成了<code>grunt.initConfig</code>（任务执行）、<code>grunt.loadNpmTasks</code>（引入模块）、<code>grunt.registerTask</code>（定义任务名称）三部分,写起来就像下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Project configuration.</span></div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</div><div class="line">    uglify: &#123;</div><div class="line">      options: &#123;</div><div class="line">        banner: <span class="string">'/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n'</span></div><div class="line">      &#125;,</div><div class="line">      build: &#123;</div><div class="line">        src: <span class="string">'src/&lt;%= pkg.name %&gt;.js'</span>,</div><div class="line">        dest: <span class="string">'build/&lt;%= pkg.name %&gt;.min.js'</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 加载包含 "uglify" 任务的插件。</span></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 默认被执行的任务列表。</span></div><div class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'uglify'</span>]);</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>所以，单单从配置的容易程度，代码的可阅读性上来说，gulp是更加容易上手的。</p>
<h3 id="五、编译sass并压缩css"><a href="#五、编译sass并压缩css" class="headerlink" title="五、编译sass并压缩css"></a>五、编译sass并压缩css</h3><p><code>gulp</code>不仅仅能处理js，配合一些插件使用后，他还能处理css，例如<a href="https://github.com/WangYuLue/demo-gulp/tree/master/demo03" target="_blank" rel="external">demo03</a>就可以编译sass并压缩css。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line">    minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'dealCSS'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'scss/*.scss'</span>)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(minifyCSS())</div><div class="line">        .pipe(gulp.dest(<span class="string">'build'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="六、实时更新文件"><a href="#六、实时更新文件" class="headerlink" title="六、实时更新文件"></a>六、实时更新文件</h3><p>到现在，我们还有一个gulp的api没有用到————<code>gulp.watch()</code>,它可以监视文件，并且在文件发生改动时候做一些事情，参考<a href="https://github.com/WangYuLue/demo-gulp/tree/master/demo04" target="_blank" rel="external">demo04</a>的配置文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"js文件夹里的文件正在重新编译..."</span>)</div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'build'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'js/*.js'</span>, [<span class="string">'minify'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>启动<code>watch</code>任务后，每当js文件夹下的.js文件有变动时（变动代码未保存不算），就会触发<code>minify</code>文件，然后<code>minify</code>任务就会重新编译压缩js文件夹下的所有.js文件。</p>
<h3 id="七、浏览器实时刷新"><a href="#七、浏览器实时刷新" class="headerlink" title="七、浏览器实时刷新"></a>七、浏览器实时刷新</h3><p>虽然现在文件可以实时监听更新了，可是浏览器不会因为文件的变动而实时刷新，这时候我们可以借助gulp插件启动一个本地服务器来调试代码，参考<a href="https://github.com/WangYuLue/demo-gulp/tree/master/demo05" target="_blank" rel="external">demo05</a>的配置文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line">    minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line">    connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'dealCSS'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'scss/*.scss'</span>)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(minifyCSS())</div><div class="line">        .pipe(gulp.dest(<span class="string">'build'</span>))</div><div class="line">        .pipe(connect.reload());</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'scss/*.scss'</span>, [<span class="string">'dealCSS'</span>]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    connect.server(&#123;</div><div class="line">        livereload: <span class="literal">true</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'livereload'</span>, [ <span class="string">'connect'</span>, <span class="string">'watch'</span>]);</div></pre></td></tr></table></figure>
<p>启动<code>livereload</code>任务后，会触发另外两个任务<code>connect</code>与<code>watch</code>,其中<code>connect</code>会启动一个本地服务器，<code>watch</code>会监听scss文件夹下的<code>.scss</code>文件。在<code>.scss</code>文件发生变动后，<code>watch</code>任务会重新编译<code>.scss</code>文件，并触发<code>connect.reload()</code>方法，这个方法会让浏览器重新刷新，然后我们就可以自动刷新了。</p>
<h3 id="八、默认任务"><a href="#八、默认任务" class="headerlink" title="八、默认任务"></a>八、默认任务</h3><p>每次<code>gulp</code>命令后面加一个任务名称会不会觉得超级烦？这时候只要以<code>default</code>为任务名称，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">// Your default task</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>然后在命令行单单敲下<code>gulp</code>就能启动<code>default</code>任务了。</p>
<h3 id="九、gulp-load-plugins"><a href="#九、gulp-load-plugins" class="headerlink" title="九、gulp-load-plugins"></a>九、gulp-load-plugins</h3><p>每次<code>gulpfile.js</code>里需要<code>require()</code>那么多的依赖是不是也觉得超级烦？这个时候<code>gulp-load-plugins</code>可以解救我们，只要我们的<code>package.json</code>里有相关的依赖配置并且下载好了这些配置，那么我们就再也不需要<code>require()</code>那么多的依赖了，它写起来就像这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    gulpLoadPlugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>),</div><div class="line">    plugins = gulpLoadPlugins();</div><div class="line"></div><div class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">      .pipe(plugins.jshint())</div><div class="line">      .pipe(plugins.jshint.reporter(<span class="string">'default'</span>))</div><div class="line">      .pipe(plugins.uglify())</div><div class="line">      .pipe(plugins.concat(<span class="string">'app.js'</span>))</div><div class="line">      .pipe(gulp.dest(<span class="string">'build'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>生活就是这么美好，哈哈！</p>
<p>参考文章<br><a href="https://www.smashingmagazine.com/2014/06/building-with-gulp/" target="_blank" rel="external">Gulp – How To Build And Develop Websites By Callum Macrae</a></p>
]]></content>
      
        <categories>
            
            <category> 前端工程化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[转载]Gulp资料大全 入门、插件、脚手架、包清单]]></title>
      <url>/2017/10/25/%E8%BD%AC%E8%BD%BD-Gulp%E8%B5%84%E6%96%99%E5%A4%A7%E5%85%A8-%E5%85%A5%E9%97%A8%E3%80%81%E6%8F%92%E4%BB%B6%E3%80%81%E8%84%9A%E6%89%8B%E6%9E%B6%E3%80%81%E5%8C%85%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近在学习Gulp,发现一个超级全的Gulp资料清单，在这里做一个分享。同时也要感谢原作者<a href="https://github.com/Pines-Cheng/awesome-gulp-cn" target="_blank" rel="external">Pines-Cheng</a>在github上的分享 </p>
</blockquote>
<a id="more"></a>
<h1 id="awesome-gulp中文版"><a href="#awesome-gulp中文版" class="headerlink" title="awesome-gulp中文版"></a><a href="https://github.com/alferov/awesome-gulp" target="_blank" rel="external">awesome-gulp</a>中文版</h1><blockquote>
<p>一份<a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">gulp</a>的资源，插件和使用实例清单， 致力于打造更好的前端工程构建流程。</p>
</blockquote>
<p>被老外的<a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">awesome</a> 清单刺激到，觉得有必要翻译一份，为国产的程序员们做点事情，本清单将保持实时更新同步。PS:进都进来了，就顺便看看其他的吧:</p>
<ul>
<li><a href="https://github.com/Pines-Cheng/awesome-nodejs-cn" target="_blank" rel="external">awesome-nodejs-cn</a></li>
<li><a href="https://github.com/Pines-Cheng/awesome-react-cn" target="_blank" rel="external">awesome-react-cn</a></li>
<li><a href="https://github.com/Pines-Cheng/awesome-npm-cn" target="_blank" rel="external">awesome-npm-cn</a></li>
<li><a href="https://github.com/Pines-Cheng/awesome-react-native-cn" target="_blank" rel="external">awesome-react-native-cn</a></li>
</ul>
<blockquote>
<p>项目的Github地址：<a href="https://github.com/Pines-Cheng/awesome-gulp-cn" target="_blank" rel="external">awesome-react-cn</a>,欢迎start。</p>
<p>翻译得仓促，如有问题，请提<a href="https://github.com/Pines-Cheng/awesome-gulp-cn/issues" target="_blank" rel="external">issues</a>。</p>
<p>如果想贡献，请<a href="https://github.com/Pines-Cheng/awesome-gulp-cn/pulls" target="_blank" rel="external">Pull Requests</a>。</p>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#资源">资源</a><ul>
<li><a href="#通用资源">通用资源</a></li>
<li><a href="#官方文档">官方文档</a></li>
<li><a href="#组织">组织</a></li>
<li><a href="#入门教程">入门教程</a><ul>
<li><a href="#gulp入门">Gulp 入门</a></li>
<li><a href="#gulp-4-入门">Gulp 4 入门</a></li>
<li><a href="#gulp-with-browserify">Gulp with Browserify</a></li>
<li><a href="#gulp-with-browserify">Gulp with Angular</a></li>
<li><a href="#gulp-with-angular-and-browserify">Gulp with Angular and Browserify</a></li>
<li><a href="#gulp-with-angular-and-webpack">Gulp with Angular and Webpack</a></li>
<li><a href="#gulp-with-react-and-browserify">Gulp with React and Browserify</a></li>
<li><a href="#gulp-with-ember">Gulp with Ember</a></li>
</ul>
</li>
<li><a href="#其他资源">其他资源</a></li>
</ul>
</li>
<li><a href="#插件">插件</a><ul>
<li><a href="#编辑">编辑</a></li>
<li><a href="#编译">编译</a></li>
<li><a href="#合并">合并</a></li>
<li><a href="#压缩">压缩</a></li>
<li><a href="#优化">优化</a></li>
<li><a href="#资源注入">资源注入</a></li>
<li><a href="#模板">模板</a></li>
<li><a href="#代码校验">代码校验</a></li>
<li><a href="#实时加载">实时加载</a></li>
<li><a href="#缓存">缓存</a></li>
<li><a href="#流控制">流控制</a></li>
<li><a href="#日志">日志</a></li>
<li><a href="#测试">测试</a></li>
<li><a href="#其他插件">其他插件</a></li>
</ul>
</li>
<li><a href="#脚手架">脚手架</a><ul>
<li><a href="#参考工程">参考工程</a></li>
<li><a href="#yeoman生成器">Yeoman生成器</a></li>
</ul>
</li>
<li><a href="#其他">其他</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="通用资源"><a href="#通用资源" class="headerlink" title="通用资源"></a>通用资源</h3><ul>
<li><a href="http://gulpjs.com/" target="_blank" rel="external">官网</a></li>
<li><a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">Github库</a></li>
<li><a href="http://gulpjs.com/plugins/" target="_blank" rel="external">插件注册</a></li>
<li><a href="https://www.npmjs.com/package/gulp" target="_blank" rel="external">NPM模块</a></li>
<li><a href="https://github.com/gulpjs/plugins/blob/master/src/blackList.json" target="_blank" rel="external">插件黑名单</a></li>
</ul>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><ul>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md" target="_blank" rel="external">快速开始</a></li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">API文档</a></li>
<li><a href="https://github.com/gulpjs/gulp/tree/master/docs#articles" target="_blank" rel="external">CLI 文档</a></li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/README.md" target="_blank" rel="external">开始写一个插件</a></li>
<li><a href="https://github.com/gulpjs/gulp/tree/master/docs/recipes" target="_blank" rel="external">使用诀窍</a></li>
</ul>
<h3 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h3><ul>
<li><a href="http://stackoverflow.com/questions/tagged/gulp" target="_blank" rel="external">StackOverflow</a></li>
<li><a href="https://twitter.com/gulpjs" target="_blank" rel="external">Twitter</a></li>
</ul>
<h3 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h3><h4 id="Gulp入门"><a href="#Gulp入门" class="headerlink" title="Gulp入门"></a>Gulp入门</h4><ul>
<li><a href="https://www.smashingmagazine.com/2014/06/building-with-gulp/" target="_blank" rel="external">使用Gulp构建前端工程</a></li>
<li><a href="https://scotch.io/tutorials/automate-your-tasks-easily-with-gulp-js" target="_blank" rel="external">通过Gulp.js轻松自动化构建你的前端工程</a></li>
<li><a href="https://medium.com/@contrahacks/gulp-3828e8126466" target="_blank" rel="external">Gulp，让前端工程可视化</a></li>
<li><a href="http://stefanimhoff.de/tag/gulp/" target="_blank" rel="external">Gulp.js是什么？</a></li>
<li><a href="http://blog.johnnyreilly.com/2015/02/using-gulp-in-asp-net-instead-of-web-optimization.html" target="_blank" rel="external">使用Gulp在你的HTML中直接插入Scripts和Styles标签</a></li>
<li><a href="http://denbuzze.com/post/5-lessons-learned-using-gulpjs/" target="_blank" rel="external">5节课学会使用Gulp.js</a></li>
<li><a href="http://lab.brightnorth.co.uk/2014/08/13/automating-linkage-how-i-learned-to-stop-worrying-and-love-the-build/" target="_blank" rel="external">我是怎样摆脱前端工程的困扰的？</a></li>
<li><a href="https://www.codementor.io/development-process/tutorial/how-to-set-up-gulp-beginner-guide#/" target="_blank" rel="external">第一次开始Gulp Task</a></li>
<li><a href="http://blog.overzealous.com/post/74121048393/why-you-shouldnt-create-a-gulp-plugin-or-how-to" target="_blank" rel="external">为什么你不自己写一个Gulp插件？</a></li>
<li><a href="http://blog.rangle.io/angular-gulp-bestpractices/" target="_blank" rel="external">6个最好的从根本改善你的开发经验的Gulp实战练习</a></li>
<li><a href="https://css-tricks.com/gulp-for-beginners/" target="_blank" rel="external">Gulp初学者教程</a></li>
</ul>
<h4 id="Gulp-4-入门"><a href="#Gulp-4-入门" class="headerlink" title="Gulp 4 入门"></a>Gulp 4 入门</h4><ul>
<li><a href="https://blog.wearewizards.io/migrating-to-gulp-4-by-example" target="_blank" rel="external">迁移到Gulp 4的例子</a></li>
<li><a href="http://fettblog.eu/gulp-4-parallel-and-series/" target="_blank" rel="external">Gulp 4: 新的task执行系统 - gulp.parallel 和 gulp.series</a></li>
</ul>
<h4 id="Gulp-with-Browserify"><a href="#Gulp-with-Browserify" class="headerlink" title="Gulp with Browserify"></a>Gulp with Browserify</h4><ul>
<li><a href="https://medium.com/@sogko/gulp-browserify-the-gulp-y-way-bb359b3f9623" target="_blank" rel="external">Gulp + Browserify, the Gulp-y Way</a></li>
<li><a href="https://viget.com/extend/gulp-browserify-starter-faq" target="_blank" rel="external">Gulp + Browserify</a></li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/fast-browserify-builds-with-watchify.md" target="_blank" rel="external">快速构建Browserify和Watchify</a></li>
</ul>
<h4 id="Gulp-with-Angular"><a href="#Gulp-with-Angular" class="headerlink" title="Gulp with Angular"></a>Gulp with Angular</h4><ul>
<li><a href="http://blog.jhades.org/what-every-angular-project-likely-needs-and-a-gulp-build-to-provide-it/" target="_blank" rel="external">Angular工程需要什么 - Gulp能提供什么</a></li>
</ul>
<h4 id="Gulp-with-Angular-and-Browserify"><a href="#Gulp-with-Angular-and-Browserify" class="headerlink" title="Gulp with Angular and Browserify"></a>Gulp with Angular and Browserify</h4><ul>
<li><a href="http://omarfouad.com/blog/2015/03/21/advanced-angularjs-structure-with-gulp-node-and-browserify/" target="_blank" rel="external">使用 Gulp, Node and Browserify构建先进的 AngularJS工程结构</a></li>
</ul>
<h4 id="Gulp-with-React-and-Browserify"><a href="#Gulp-with-React-and-Browserify" class="headerlink" title="Gulp with React and Browserify"></a>Gulp with React and Browserify</h4><ul>
<li><a href="https://hacks.mozilla.org/2014/08/browserify-and-gulp-with-react/" target="_blank" rel="external">Browserify、Gulp 和 React</a></li>
<li><a href="http://pomax.github.io/1420592591221/taking-react-to-the-next-level-mixins-gulp-and-browserify" target="_blank" rel="external">Taking React to the Next Level: Mixins, Gulp, and Browserify</a></li>
</ul>
<h4 id="Gulp-with-Ember"><a href="#Gulp-with-Ember" class="headerlink" title="Gulp with Ember"></a>Gulp with Ember</h4><ul>
<li><a href="http://www.sitepoint.com/improving-ember-js-workflow-using-gulp-js/" target="_blank" rel="external">使用Gulp.js改进你的Ember.js工作流</a></li>
</ul>
<h3 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h3><ul>
<li><a href="https://github.com/osscafe/gulp-cheatsheet" target="_blank" rel="external">Gulp 备忘录</a></li>
<li><a href="https://github.com/johnpapa/gulp-patterns" target="_blank" rel="external">Gulp清单</a></li>
</ul>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul>
<li><a href="https://github.com/dlmanning/gulp-sass" target="_blank" rel="external">gulp-sass</a> - 通过 <a href="https://github.com/sass/libsass" target="_blank" rel="external">libsass</a>将Sass编译成 CSS </li>
<li><a href="https://github.com/sindresorhus/gulp-ruby-sass" target="_blank" rel="external">gulp-ruby-sass</a> - 通过 Ruby Sass将Sass编译成CSS </li>
<li><a href="https://github.com/appleboy/gulp-compass" target="_blank" rel="external">gulp-compass</a> - 通过 Ruby Sass和CompassSass编译成CSS </li>
<li><a href="https://github.com/plus3network/gulp-less" target="_blank" rel="external">gulp-less</a> - <a href="https://github.com/less/less.js" target="_blank" rel="external">Less</a>编译成 CSS.</li>
<li><a href="https://github.com/stevelacy/gulp-stylus" target="_blank" rel="external">gulp-stylus</a> - <a href="https://github.com/stylus/stylus" target="_blank" rel="external">Stylus</a> 编译成 CSS.</li>
<li><a href="https://github.com/postcss/gulp-postcss" target="_blank" rel="external">gulp-postcss</a> - Pipe CSS 通过 <a href="https://github.com/postcss/postcss" target="_blank" rel="external">PostCSS</a> processors with a single parse.</li>
<li><a href="https://github.com/contra/gulp-coffee" target="_blank" rel="external">gulp-coffee</a> - <a href="https://github.com/jashkenas/coffeescript" target="_blank" rel="external">Coffeescript</a> 编译成 JavaScript.</li>
<li><a href="https://github.com/ivogabe/gulp-typescript" target="_blank" rel="external">gulp-typescript</a> - <a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="external">TypeScript</a>编译成JavaScript.</li>
<li><a href="https://github.com/sindresorhus/gulp-react" target="_blank" rel="external">gulp-react</a> - Facebook <a href="https://github.com/facebook/react" target="_blank" rel="external">React</a> JSX 模板编译成JavaScript.</li>
<li><p><a href="https://github.com/shama/webpack-stream" target="_blank" rel="external">webpack-stream</a> - 将<a href="https://github.com/webpack/webpack" target="_blank" rel="external">webpack</a>集成在Gulp中使用。</p>
</li>
<li><p><a href="https://github.com/babel/gulp-babel" target="_blank" rel="external">gulp-babel</a> - ES6编译成ES5 通过 <a href="https://github.com/babel/babel" target="_blank" rel="external">babel</a>.</p>
</li>
<li><a href="https://github.com/sindresorhus/gulp-traceur" target="_blank" rel="external">gulp-traceur</a> - ES6编译成ES5 通过 <a href="https://github.com/google/traceur-compiler" target="_blank" rel="external">Traceur</a>.</li>
<li><a href="https://github.com/sindresorhus/gulp-regenerator" target="_blank" rel="external">gulp-regenerator</a> - ES6编译成ES5 通过 <a href="https://github.com/facebook/regenerator" target="_blank" rel="external">Regenerator</a>.</li>
<li><a href="https://github.com/sindresorhus/gulp-es6-transpiler" target="_blank" rel="external">gulp-es6-transpiler</a> - [过时的] ES6编译成ES5 通过 <a href="https://github.com/termi/es6-transpiler" target="_blank" rel="external">es6-transpiler</a>.</li>
<li><a href="https://github.com/sindresorhus/gulp-myth" target="_blank" rel="external">gulp-myth</a> - <a href="https://github.com/segmentio/myth" target="_blank" rel="external">Myth</a> - a polyfill for future versions of the CSS spec.</li>
<li><a href="https://github.com/MoOx/gulp-cssnext" target="_blank" rel="external">gulp-cssnext</a> - [过时的] 使用下一代的 CSS 规范通过 <a href="https://github.com/MoOx/postcss-cssnext" target="_blank" rel="external">cssnext</a>.</li>
</ul>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><ul>
<li><a href="https://github.com/contra/gulp-concat" target="_blank" rel="external">gulp-concat</a> - 合并文件.</li>
</ul>
<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><ul>
<li><a href="https://github.com/scniro/gulp-clean-css" target="_blank" rel="external">gulp-clean-css</a> - 压缩 CSS 通过 <a href="https://github.com/jakubpawlowicz/clean-css" target="_blank" rel="external">clean-css</a>.</li>
<li><a href="https://github.com/ben-eb/gulp-csso" target="_blank" rel="external">gulp-csso</a> - 压缩 CSS 通过 <a href="https://github.com/css/csso" target="_blank" rel="external">CSSO</a>.</li>
<li><a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a> - 压缩 JavaScript 通过 <a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="external">UglifyJS2</a>.</li>
<li><a href="https://github.com/jonschlinkert/gulp-htmlmin" target="_blank" rel="external">gulp-htmlmin</a> - 压缩 HTML 通过 <a href="https://github.com/kangax/html-minifier" target="_blank" rel="external">html-minifier</a>.</li>
<li><a href="https://github.com/murphydanger/gulp-minify-html" target="_blank" rel="external">gulp-minify-html</a> - 压缩 HTML 通过<br><a href="https://github.com/Swaagie/minimize" target="_blank" rel="external">Minimize</a>.</li>
<li><a href="https://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="external">gulp-imagemin</a> - 压缩 PNG, JPEG, GIF and SVG 图片 通过 <a href="https://github.com/imagemin/imagemin" target="_blank" rel="external">imagemin</a>.</li>
<li><a href="https://github.com/ben-eb/gulp-svgmin" target="_blank" rel="external">gulp-svgmin</a> - 通过Gulp压缩 SVG 文件</li>
</ul>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul>
<li><a href="https://github.com/ben-eb/gulp-uncss" target="_blank" rel="external">gulp-uncss</a> - 移除未使用的CSS选择器通过 <a href="https://github.com/giakki/uncss" target="_blank" rel="external">UnCSS</a>.</li>
<li><a href="https://github.com/zckrs/gulp-css-base64" target="_blank" rel="external">gulp-css-base64</a> - 将CSS文件中所有的资源(有url()声明的)变成base64-encoded 数据的URI字符串</li>
<li><a href="https://github.com/akoenig/gulp-svg2png" target="_blank" rel="external">gulp-svg2png</a> - 将SVGs转换成PNGs</li>
<li><a href="https://github.com/mahnunchik/gulp-responsive" target="_blank" rel="external">gulp-responsive</a> - 生成不同尺寸的图片</li>
<li><a href="https://github.com/w0rm/gulp-svgstore" target="_blank" rel="external">gulp-svgstore</a> -将svg files 合并成一个通过<symbol> 元素</symbol></li>
<li><a href="https://github.com/nfroidure/gulp-iconfont" target="_blank" rel="external">gulp-iconfont</a> - 通过SVG icons创建 icon fonts</li>
</ul>
<h3 id="资源注入"><a href="#资源注入" class="headerlink" title="资源注入"></a>资源注入</h3><ul>
<li><a href="https://github.com/jonkemp/gulp-useref" target="_blank" rel="external">gulp-useref</a> - 解析HTML文件中特殊标签里面的script或style标签，合并成一个script或css文件，并替换。</li>
<li><a href="https://github.com/klei/gulp-inject" target="_blank" rel="external">gulp-inject</a> - 将指定的css或js文件以标签的形式插入到HTML中的指定标志内。</li>
<li><a href="https://github.com/taptapship/wiredep" target="_blank" rel="external">wiredep</a> - 将Bower依赖自动注入HTML文件中。</li>
</ul>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><ul>
<li><a href="https://github.com/miickel/gulp-angular-templatecache" target="_blank" rel="external">gulp-angular-templatecache</a> - 在$templateCache中联系并注册AngularJS模板</li>
<li><a href="https://github.com/phated/gulp-jade" target="_blank" rel="external">gulp-jade</a> - <a href="https://github.com/pugjs/jade" target="_blank" rel="external">Jade</a> 转换成 HTML.</li>
<li><a href="https://github.com/lazd/gulp-handlebars" target="_blank" rel="external">gulp-handlebars</a> - <a href="https://github.com/wycats/handlebars.js" target="_blank" rel="external">Handlebars</a>模板转换成 JavaScript.</li>
<li><a href="https://github.com/shannonmoeller/gulp-hb" target="_blank" rel="external">gulp-hb</a> - <a href="https://github.com/wycats/handlebars.js" target="_blank" rel="external">Handlebars</a> 模板转换成 HTML.</li>
<li><a href="https://github.com/sindresorhus/gulp-nunjucks" target="_blank" rel="external">gulp-nunjucks</a> - <a href="https://github.com/mozilla/nunjucks" target="_blank" rel="external">Nunjucks</a>模板转换成JavaScript.</li>
<li><a href="https://github.com/sindresorhus/gulp-dust" target="_blank" rel="external">gulp-dustjs</a> - <a href="https://github.com/linkedin/dustjs" target="_blank" rel="external">Dust</a>模板转换成JavaScript.</li>
<li><a href="https://github.com/e-jigsaw/gulp-riot" target="_blank" rel="external">gulp-riot</a> - <a href="https://github.com/riot/riot" target="_blank" rel="external">Riot</a>模板转换成JavaScript.</li>
<li><a href="https://github.com/sindresorhus/gulp-markdown" target="_blank" rel="external">gulp-markdown</a> - Markdown → HTML.</li>
<li><a href="https://github.com/sindresorhus/gulp-template" target="_blank" rel="external">gulp-template</a> - <a href="https://github.com/lodash/lodash" target="_blank" rel="external">Lodash </a>模板转换成JavaScript.</li>
<li><a href="https://github.com/colynb/gulp-swig" target="_blank" rel="external">gulp-swig</a> - <a href="https://github.com/paularmstrong/swig" target="_blank" rel="external">Swig</a>模板转换成HTML.</li>
<li><a href="https://github.com/denysdovhan/gulp-remark" target="_blank" rel="external">gulp-remark</a> - Gulp plugin for [remark]的Gulp插件(<a href="https://github.com/wooorm/remark" target="_blank" rel="external">https://github.com/wooorm/remark</a>) 通过插件处理markdown</li>
</ul>
<h3 id="代码校验"><a href="#代码校验" class="headerlink" title="代码校验"></a>代码校验</h3><ul>
<li><a href="https://www.npmjs.com/package/gulp-csslint" target="_blank" rel="external">gulp-csslint</a> - 通过<a href="https://github.com/CSSLint/csslint" target="_blank" rel="external">CSSLint</a>自动校验CSS.</li>
<li><a href="https://github.com/bezoerb/gulp-htmlhint" target="_blank" rel="external">gulp-htmlhint</a> - 通过<a href="https://github.com/yaniswang/HTMLHint" target="_blank" rel="external">HTMLHint</a>校验HTML.</li>
<li><a href="https://github.com/spalger/gulp-jshint" target="_blank" rel="external">gulp-jshint</a> - 通过<a href="https://github.com/jshint/jshint" target="_blank" rel="external">JSHint</a>发现错误和潜在的问题.</li>
<li><a href="https://github.com/jscs-dev/gulp-jscs" target="_blank" rel="external">gulp-jscs</a> - 通过<a href="https://github.com/jscs-dev/node-jscs" target="_blank" rel="external">jscs</a>检查JavaScript代码风格.</li>
<li><a href="https://github.com/janraasch/gulp-coffeelint" target="_blank" rel="external">gulp-coffeelint</a> - 一种用来保证<a href="https://github.com/jashkenas/coffeescript" target="_blank" rel="external">CoffeeScript</a>代码风格统一的检查。</li>
<li><a href="https://github.com/panuhorsmalahti/gulp-tslint" target="_blank" rel="external">gulp-tslint</a> - gulp的<a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="external">TypeScript</a>代码校验插件.</li>
<li><a href="https://github.com/adametry/gulp-eslint" target="_blank" rel="external">gulp-eslint</a> - ECMAScript/JavaScript代码校验.</li>
<li><a href="https://github.com/callumacrae/gulp-w3cjs" target="_blank" rel="external">gulp-w3cjs</a> - 通过<a href="https://github.com/thomasdavis/w3cjs" target="_blank" rel="external">w3cjs</a>检验HTML.</li>
<li><a href="https://github.com/lesshint/gulp-lesshint" target="_blank" rel="external">gulp-lesshint</a> - 通过<a href="https://github.com/lesshint/lesshint" target="_blank" rel="external">lesshint</a>校验LESS.</li>
</ul>
<h3 id="实时加载"><a href="#实时加载" class="headerlink" title="实时加载"></a>实时加载</h3><ul>
<li><a href="https://github.com/BrowserSync/browser-sync" target="_blank" rel="external">browser-sync</a> - 保证多个浏览器或设备网页同步显示 (<a href="https://github.com/BrowserSync/gulp-browser-sync" target="_blank" rel="external">recipes</a>).</li>
<li><a href="https://github.com/vohof/gulp-livereload" target="_blank" rel="external">gulp-livereload</a> - Gulp的实时加载插件.</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul>
<li><a href="https://github.com/sindresorhus/gulp-changed" target="_blank" rel="external">gulp-changed</a> - 仅让发生改变的文件通过.</li>
<li><a href="https://github.com/contra/gulp-cached" target="_blank" rel="external">gulp-cached</a> - 一个简单的文件内存缓存.</li>
<li><a href="https://github.com/ahaurw01/gulp-remember" target="_blank" rel="external">gulp-remember</a> - 记忆并回收通过了的文件.</li>
<li><a href="https://github.com/tschaub/gulp-newer" target="_blank" rel="external">gulp-newer</a> - 只让新的源码通过.</li>
</ul>
<h3 id="流控制"><a href="#流控制" class="headerlink" title="流控制"></a>流控制</h3><ul>
<li><a href="https://github.com/grncdr/merge-stream" target="_blank" rel="external">merge-stream</a> - 合并多个流到一个插入的流.</li>
<li><a href="https://github.com/nfroidure/StreamQueue" target="_blank" rel="external">streamqueue</a> - 逐渐输入队列的流.</li>
<li><a href="https://github.com/OverZealous/run-sequence" target="_blank" rel="external">run-sequence</a> - 按要求运行一些依赖的Gulptask.</li>
<li><a href="https://github.com/robrich/gulp-if" target="_blank" rel="external">gulp-if</a> - 按照条件运行task.</li>
</ul>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ul>
<li><a href="https://github.com/mikaelbr/gulp-notify" target="_blank" rel="external">gulp-notify</a> - Gulp的通知插件.</li>
<li><a href="https://github.com/sindresorhus/gulp-size" target="_blank" rel="external">gulp-size</a> - 显示你的项目的大小.</li>
<li><a href="https://github.com/sindresorhus/gulp-debug" target="_blank" rel="external">gulp-debug</a> - 通过调试文件流来观察那些文件通过了你的Gulp管道.</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li><a href="https://github.com/sindresorhus/gulp-mocha" target="_blank" rel="external">gulp-mocha</a> - 运行<a href="https://github.com/mochajs/mocha" target="_blank" rel="external">Mocha</a>测试用例.</li>
<li><a href="https://github.com/sindresorhus/gulp-jasmine" target="_blank" rel="external">gulp-jasmine</a> - 在Node.js中运行<a href="https://github.com/jasmine/jasmine" target="_blank" rel="external">Jasmine 2</a> 测试用例.</li>
<li><a href="https://github.com/mllrsohn/gulp-protractor" target="_blank" rel="external">gulp-protractor</a> - 为<a href="https://github.com/angular/protractor" target="_blank" rel="external">Protractor</a>测试用例包裹Gulp.</li>
<li><a href="https://github.com/dylanb/gulp-coverage" target="_blank" rel="external">gulp-coverage</a> - 为Node.js覆盖相对于运行的测试运行独立的报告.</li>
<li><a href="https://github.com/karma-runner/gulp-karma" target="_blank" rel="external">gulp-karma</a> - 通过Gulp运行Karma测试用例.</li>
<li><a href="https://github.com/sindresorhus/gulp-ava" target="_blank" rel="external">gulp-ava</a>- 通过Gulp运行<a href="https://github.com/sindresorhus/ava" target="_blank" rel="external">AVA</a> 测试用例.</li>
</ul>
<h3 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h3><ul>
<li><a href="https://github.com/gulpjs/gulp-util" target="_blank" rel="external">gulp-util</a> - 包含一系列有用插件.</li>
<li><a href="https://github.com/floatdrop/gulp-plumber" target="_blank" rel="external">gulp-plumber</a> - 防止错误引起管道中断Prevent pipe breaking caused by errors.</li>
<li><a href="https://github.com/jackfranklin/gulp-load-plugins" target="_blank" rel="external">gulp-load-plugins</a> - 自动加载Gulp插件.</li>
<li><a href="https://github.com/ck86/main-bower-files" target="_blank" rel="external">main-bower-files</a> - 构建时自动获取bower库的文件.</li>
<li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">autoprefixer</a> - 解析CSS且根据规则添加浏览器兼容性前缀.</li>
<li><a href="https://github.com/floridoo/gulp-sourcemaps" target="_blank" rel="external">gulp-sourcemaps</a> - 提供source map支持.</li>
<li><a href="https://github.com/lazd/gulp-replace" target="_blank" rel="external">gulp-replace</a> - Gulp的一个字符串替换插件.</li>
<li><a href="https://github.com/hparra/gulp-rename" target="_blank" rel="external">gulp-rename</a> - 轻松重命名文件.</li>
<li><a href="https://github.com/sindresorhus/gulp-rev" target="_blank" rel="external">gulp-rev</a> - 在静态文件名的后面添加hash值，如: unicorn.css → unicorn-d41d8cd98f.css.</li>
<li><a href="https://github.com/sindresorhus/del" target="_blank" rel="external">del</a> - 使用globs删除文件/文件夹.</li>
<li><a href="https://github.com/robrich/gulp-exec" target="_blank" rel="external">gulp-exec</a> - 运行一个shell命令.</li>
<li><a href="https://github.com/sindresorhus/gulp-strip-debug" target="_blank" rel="external">gulp-strip-debug</a> - 除去javascript代码中的console,alert,debugger声明.</li>
<li><a href="https://github.com/unlight/gulp-cssimport" target="_blank" rel="external">gulp-cssimport</a> - 解析CSS文件，找到imports,将连接文件替换成imort声明.</li>
<li><a href="https://github.com/jonkemp/gulp-inline-css" target="_blank" rel="external">gulp-inline-css</a> - 将HTML中的css属性放到style标签中.</li>
<li><a href="https://github.com/shinnn/gulp-gh-pages" target="_blank" rel="external">gulp-gh-pages</a> - 将内容发布到GiHub有页面.</li>
<li><a href="https://github.com/Kagami/gulp-ng-annotate" target="_blank" rel="external">gulp-ng-annotate</a> - 通过<a href="https://github.com/olov/ng-annotate" target="_blank" rel="external">ng-annotate</a>添加Angular依赖注入.</li>
<li><a href="https://github.com/stevelacy/gulp-bump" target="_blank" rel="external">gulp-bump</a> - 通过Gulp Bump任何semvar JSON版本.</li>
<li><a href="https://github.com/coderhaoxin/gulp-file-include" target="_blank" rel="external">gulp-file-include</a> - 通过Gulp Include文件.</li>
<li><a href="https://github.com/sindresorhus/gulp-zip" target="_blank" rel="external">gulp-zip</a> - 以ZIP格式压缩文件.</li>
<li><a href="https://github.com/stevelacy/gulp-git" target="_blank" rel="external">gulp-git</a> - 通过Gulp运行git命令.</li>
<li><a href="https://github.com/sindresorhus/gulp-filter" target="_blank" rel="external">gulp-filter</a> - 使用globbing过滤文件.</li>
<li><a href="https://github.com/jas/gulp-preprocess" target="_blank" rel="external">gulp-preprocess</a> - 基于自定义内容或环境配置预处理文件.</li>
</ul>
<h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><ul>
<li><a href="https://github.com/google/web-starter-kit" target="_blank" rel="external">web-starter-kit</a> - Google的Web Starter Kit.</li>
<li><a href="https://github.com/sindresorhus/gulp-plugin-boilerplate" target="_blank" rel="external">gulp-plugin-boilerplate</a> - 创建Gulp插件的开始模板.</li>
<li><a href="https://github.com/polymerelements/polymer-starter-kit" target="_blank" rel="external">polymer-starter-kit</a> -Polymer 1.0 应用的起点.</li>
<li><a href="https://github.com/este/este" target="_blank" rel="external">este</a> - 同构的web应用最全面的React/Flux开发栈和开始模板.</li>
<li><a href="https://github.com/mrmrs/mnml" target="_blank" rel="external">mnml</a> - 开发响应式HTML5/Sass项目的最小开始模板.</li>
<li><a href="https://github.com/cferdinandi/kraken" target="_blank" rel="external">kraken</a> 一个轻量级的、移动端优先的前端开发开始模板.</li>
<li><a href="https://github.com/jakemmarsh/angularjs-gulp-browserify-boilerplate" target="_blank" rel="external">angularjs-gulp-browserify-boilerplate</a> - 一个使用AngularJS, Sass, gulp, 和 Browserify技术的开始模板.</li>
<li><a href="https://github.com/poeticninja/hapi-ninja" target="_blank" rel="external">hapi-ninja</a> - 一个使用Node.js, Hapi, and Swig技术的开始模板.</li>
<li><a href="https://github.com/rappasoft/laravel-5-boilerplate" target="_blank" rel="external">laravel-5-boilerplate</a> - 一个Laravel 5 开始模板.</li>
<li><a href="https://github.com/wbkd/react-starterkit" target="_blank" rel="external">react-starterkit</a> - 包含react-router, Reflux, jest, webpack, gulp and Stylus的React开始模板.</li>
</ul>
<h3 id="Yeoman生成器"><a href="#Yeoman生成器" class="headerlink" title="Yeoman生成器"></a>Yeoman生成器</h3><ul>
<li><a href="https://github.com/yeoman/generator-gulp-webapp" target="_blank" rel="external">generator-gulp-webapp</a> - A 一个流行的web应用的gulp生成器.</li>
<li><a href="https://github.com/Swiip/generator-gulp-angular" target="_blank" rel="external">generator-gulp-angular</a> -  使用Gulp的AngularJS 的Yeoman生成器.</li>
<li><a href="https://github.com/randylien/generator-react-gulp-browserify" target="_blank" rel="external">generator-react-gulp-browserify</a> - 一个React库的Yeoman生成器，包含gulp, Browserify, Browsersync and Bootstrap.</li>
<li><a href="https://github.com/youngmountain/generator-node-gulp" target="_blank" rel="external">generator-node-gulp</a> - 一个Node.js模块生成器，包含gulp和 Mocha.</li>
<li><a href="https://github.com/niallobrien/generator-gulp-bootstrap" target="_blank" rel="external">generator-gulp-bootstrap</a> - 一个包含Bootstrap, gulp 和libsass的Yeoman生成器·.</li>
<li><a href="https://github.com/jgoux/generator-angulpify" target="_blank" rel="external">generator-angulpify</a> -  一个包含AngularJS, gulp和Browserify的Yeoman生成器.</li>
<li><a href="https://github.com/tmaximini/generator-ionic-gulp" target="_blank" rel="external">generator-ionic-gulp</a> - 一个Ionic工厂的Yeoman生成器.</li>
<li><a href="https://github.com/sindresorhus/generator-gulp-plugin-boilerplate" target="_blank" rel="external">generator-gulp-plugin-boilerplate</a> -一个输出 <a href="https://github.com/sindresorhus/gulp-plugin-boilerplate" target="_blank" rel="external">gulp plugin boilerplate</a>的脚手架.</li>
<li><a href="https://github.com/sondr3/generator-jekyllized" target="_blank" rel="external">generator-jekyllized</a> - 一个包含gulp, Sass, AutoPrefixer,资源优化，缓存等的Jekyll工作流.</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://github.com/laravel/elixir" target="_blank" rel="external">elixir</a> - 一个为你的应用定义基本的gulp任务的干净、灵活的API.</li>
<li><a href="https://github.com/sindresorhus/gulp-app" target="_blank" rel="external">gulp-app</a> - 将Gulp作为一个应用(OS X).</li>
<li><a href="https://github.com/Lostmyname/lmn-gulp-tasks" target="_blank" rel="external">lmn-gulp-tasks</a> - gulp任务的单元测试示例.</li>
<li><a href="http://gulp-cookery.github.io/gulp-chef/" target="_blank" rel="external">gulp-chef</a> - 一个优雅的、简单的重复使用gulp task的方法.</li>
</ul>
<h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p><a href="http://creativecommons.org/publicdomain/zero/1.0/" target="_blank" rel="external"><img src="http://i.creativecommons.org/p/zero/1.0/88x31.png" alt="CC0"></a></p>
]]></content>
      
        <categories>
            
            <category> 前端工程化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> Gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[leetcode上的一些算法题（二）]]></title>
      <url>/2017/10/24/leetcode%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近在leetcode上看了一些关于股票的<a href="https://discuss.leetcode.com/topic/107998/most-consistent-ways-of-dealing-with-the-series-of-stock-problems" target="_blank" rel="external">算法题</a>，很有趣，在这里做一个分享 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、Best-Time-to-Buy-and-Sell-Stock-II"><a href="#一、Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="一、Best Time to Buy and Sell Stock II"></a>一、Best Time to Buy and Sell Stock II</h3><p>1、问题描述如下：</p>
<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>Example 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [7, 1, 5, 3, 6, 4]</div><div class="line">Output: 5</div><div class="line"></div><div class="line">max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</div></pre></td></tr></table></figure></p>
<p>Example 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [7, 6, 4, 3, 1]</div><div class="line">Output: 0</div><div class="line"></div><div class="line">In this case, no transaction is done, i.e. max profit = 0.</div></pre></td></tr></table></figure></p>
<p>2、这种情景相对简单，王二的解决方案如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> min = <span class="number">10000000</span> , out = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>;x&lt;prices.length;x++)&#123;</div><div class="line">        min = <span class="built_in">Math</span>.min(min,prices[x])</div><div class="line">        out = <span class="built_in">Math</span>.max(out,prices[x]-min)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> out</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="二、Best-Time-to-Buy-and-Sell-Stock-III"><a href="#二、Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="二、Best Time to Buy and Sell Stock III"></a>二、<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/" target="_blank" rel="external">Best Time to Buy and Sell Stock III</a></h3><p>1、问题描述如下：</p>
<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most two transactions.</p>
<p>Note:<br>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<p>这道题在第一次问题（只交易一次）的基础上变成交易两次，问题变得复杂了一些。</p>
<p>2、解决思路</p>
<p>于是写成如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> minIndex = <span class="number">0</span>,maxIndex=<span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">temp</span>(<span class="params">prices</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> min = <span class="number">1000000</span> , out = <span class="number">0</span> ,tempMinIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>;x&lt;prices.length;x++)&#123;</div><div class="line">            <span class="keyword">if</span>(prices[x]&lt;min)&#123;</div><div class="line">                min = prices[x] ;</div><div class="line">                tempMinIndex = x ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(prices[x]-min&gt;out)&#123;</div><div class="line">                out = prices[x]-min ;</div><div class="line">                maxIndex = x ;</div><div class="line">                minIndex = tempMinIndex ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> out ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> a1 = temp(prices);</div><div class="line">    <span class="keyword">var</span> left = prices.slice(<span class="number">0</span>,minIndex);</div><div class="line">    <span class="keyword">var</span> self = prices.slice(minIndex,maxIndex+<span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> right = prices.slice(maxIndex+<span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> a2 = <span class="built_in">Math</span>.max(temp(left),temp(right),temp(self.reverse())) ;</div><div class="line">    <span class="keyword">return</span> a1+a2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices, fee</span>) </span>&#123;</div><div class="line">    total = <span class="number">0</span> ;</div><div class="line">    myIndex = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=myIndex;i&lt;prices.length<span class="number">-1</span>;)&#123;</div><div class="line">        <span class="keyword">if</span>(myIndex===prices.length<span class="number">-1</span>) <span class="keyword">break</span>;</div><div class="line">        tempIndex = myIndex;</div><div class="line">        myPrice = <span class="literal">undefined</span>;</div><div class="line">        sellPrice = <span class="number">0</span>;</div><div class="line">        maxPrice = <span class="literal">undefined</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> x=myIndex;x&lt;prices.length;x++)&#123;</div><div class="line">            tempIndex = x ;</div><div class="line">            <span class="keyword">if</span>(!myPrice || myPrice&gt;prices[x])&#123;</div><div class="line">                myPrice = prices[x];</div><div class="line">                <span class="keyword">continue</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(myPrice&lt;prices[x]-fee)&#123;</div><div class="line">                <span class="keyword">break</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        myIndex = tempIndex;</div><div class="line">        maxPrice = <span class="built_in">Math</span>.max(...prices.slice(myIndex));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> y=myIndex;y&lt;prices.length;y++)&#123;</div><div class="line">            tempIndex = y ;</div><div class="line">            <span class="keyword">if</span>(sellPrice===maxPrice || sellPrice&gt;prices[y]+fee)&#123;</div><div class="line">                <span class="keyword">break</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(sellPrice&lt;prices[y])&#123;</div><div class="line">                sellPrice = prices[y];</div><div class="line">                <span class="keyword">continue</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        total += <span class="built_in">Math</span>.max(sellPrice-myPrice-fee,<span class="number">0</span>);</div><div class="line">        myIndex = tempIndex;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> total ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices, fee</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> curMin = <span class="number">10000000</span>, curMax = <span class="number">0</span>, res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; prices.length; ++i) &#123;</div><div class="line">        <span class="keyword">if</span> (prices[i] &lt; curMax - fee) &#123;</div><div class="line">            <span class="keyword">if</span> (curMax - curMin &gt; fee) res += curMax - curMin - fee;</div><div class="line">            curMin = prices[i];</div><div class="line">            curMax = prices[i];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            curMin = <span class="built_in">Math</span>.min(curMin, prices[i]);</div><div class="line">            curMax = <span class="built_in">Math</span>.max(curMax, prices[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (curMax - curMin &gt; fee) res += curMax - curMin - fee;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Number.MAX_VALUE</p>
<p>四、<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">k, prices</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.time() ;</div><div class="line">    <span class="keyword">var</span> keyIndex = [<span class="number">0</span>,prices.length<span class="number">-1</span>] ;</div><div class="line">    <span class="keyword">var</span> whole = <span class="number">0</span> ;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">temp</span>(<span class="params">prices,start,end,isReverse</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> minIndex = <span class="number">0</span>,maxIndex=<span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> min = <span class="number">1000000</span> , out = <span class="number">0</span> ,tempMinIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(!isReverse)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> x=start;x&lt;=end;x++)&#123;</div><div class="line">                <span class="keyword">if</span>(prices[x]&lt;min)&#123;</div><div class="line">                    min = prices[x] ;</div><div class="line">                    tempMinIndex = x ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(prices[x]-min&gt;out)&#123;</div><div class="line">                    out = prices[x]-min ;</div><div class="line">                    maxIndex = x ;</div><div class="line">                    minIndex = tempMinIndex ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> x=end;x&gt;=start;x--)&#123;</div><div class="line">                <span class="keyword">if</span>(prices[x]&lt;min)&#123;</div><div class="line">                    min = prices[x] ;</div><div class="line">                    tempMinIndex = x ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(prices[x]-min&gt;out)&#123;</div><div class="line">                    out = prices[x]-min ;</div><div class="line">                    maxIndex = x ;</div><div class="line">                    minIndex = tempMinIndex ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> [out,[maxIndex,minIndex]] ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">1</span>;x&lt;=k;x++)&#123;</div><div class="line">        <span class="keyword">var</span> sell = <span class="number">0</span> ;</div><div class="line">        <span class="keyword">var</span> currentIndex = [] ;</div><div class="line">        <span class="keyword">var</span> isReverse = <span class="literal">true</span> ;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> y=<span class="number">0</span>;y&lt;keyIndex.length;y++)&#123;</div><div class="line">            <span class="keyword">if</span>(y===<span class="number">0</span>) <span class="keyword">continue</span> ;</div><div class="line">            isReverse = !isReverse ;</div><div class="line">            <span class="keyword">var</span> getVal = temp(prices,keyIndex[y<span class="number">-1</span>],keyIndex[y],isReverse) ;</div><div class="line">            <span class="keyword">if</span>(sell&lt;getVal[<span class="number">0</span>])&#123;</div><div class="line">                sell = getVal[<span class="number">0</span>] ;</div><div class="line">                currentIndex = getVal[<span class="number">1</span>] ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(sell===<span class="number">0</span>)&#123;   <span class="comment">//当遍历所有后,sell还是0的话，说明已经没有合适的对象了，于是退出循环</span></div><div class="line">            <span class="built_in">console</span>.timeEnd() ;</div><div class="line">            <span class="keyword">return</span> whole ;</div><div class="line">        &#125;</div><div class="line">        keyIndex = keyIndex.concat(currentIndex) ;</div><div class="line">        keyIndex.sort(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x&gt;y?<span class="number">1</span>:<span class="number">-1</span>) ;  <span class="comment">//这边的排序方法要特别注意</span></div><div class="line">        whole += sell ;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.timeEnd() ;</div><div class="line">    <span class="keyword">return</span> whole ;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">k, prices</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.time();</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">quickSolve</span>(<span class="params">prices</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> len = prices.length, profit = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++)</div><div class="line">            <span class="comment">// as long as there is a price gap, we gain a profit.</span></div><div class="line">            <span class="keyword">if</span> (prices[i] &gt; prices[i - <span class="number">1</span>]) profit += prices[i] - prices[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> profit;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> len = prices.length;</div><div class="line">    <span class="keyword">if</span> (k &gt;= len / <span class="number">2</span>) <span class="keyword">return</span> quickSolve(prices);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Array</span>(k+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>;x&lt;t.length;x++)&#123;</div><div class="line">        t[x] = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> y=<span class="number">0</span>;y&lt;t[x].length;y++)&#123;</div><div class="line">            t[x][y] = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</div><div class="line">        <span class="keyword">var</span> tmpMax =  -prices[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; len; j++) &#123;</div><div class="line">            t[i][j] = <span class="built_in">Math</span>.max(t[i][j - <span class="number">1</span>], prices[j] + tmpMax);</div><div class="line">            tmpMax =  <span class="built_in">Math</span>.max(tmpMax, t[i - <span class="number">1</span>][j - <span class="number">1</span>] - prices[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.timeEnd();</div><div class="line">    <span class="keyword">return</span> t[k][len - <span class="number">1</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>五、<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//未完成</span></div><div class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> min = <span class="number">10000000</span> ,max = <span class="number">0</span>,out=<span class="number">0</span> ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span> ; x&lt;prices.length ; x++)&#123;</div><div class="line">        min = <span class="built_in">Math</span>.min(min,prices[x]) ;</div><div class="line">        max = <span class="built_in">Math</span>.max(max,prices[x]) ;</div><div class="line">        <span class="keyword">if</span>(x===prices.length<span class="number">-1</span>)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"-------"</span>)</div><div class="line">            <span class="built_in">console</span>.log(prices[x])</div><div class="line">            <span class="built_in">console</span>.log(out)</div><div class="line">            <span class="built_in">console</span>.log(min,max)</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"-------"</span>)</div><div class="line">            out += max-min ;</div><div class="line">            <span class="keyword">continue</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(prices[x+<span class="number">1</span>]&lt;prices[x])&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"+++++++++"</span>)</div><div class="line">            <span class="built_in">console</span>.log(x)</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"+++++++++"</span>)</div><div class="line">            <span class="keyword">if</span>(prices[x+<span class="number">2</span>]-prices[x+<span class="number">1</span>]&gt;(price[x<span class="number">-1</span>]?prices[x]-prices[x<span class="number">-1</span>]:<span class="number">0</span>))&#123;</div><div class="line">                out += (price[x<span class="number">-1</span>]?prices[x<span class="number">-1</span>]-min:<span class="number">0</span>) ;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"######1:"</span>+out)</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                out += prices[x]-min ;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"######2:"</span>+out)</div><div class="line">                x++ ;</div><div class="line">            &#125;</div><div class="line">            min = <span class="number">10000000</span> ,max = <span class="number">0</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> out ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考文献：<br><a href="https://discuss.leetcode.com/topic/107998/most-consistent-ways-of-dealing-with-the-series-of-stock-problems" target="_blank" rel="external">leetcode</a></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python基础语法小结（四）]]></title>
      <url>/2017/10/24/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>打算最近有时间看一看Python的基础语法,这一节里主要记录了Python<strong>函数式编程</strong>中<strong>一些高阶函数</strong>、<strong>返回函数</strong>、<strong>匿名函数</strong>、<strong>装饰器</strong>、<strong>偏函数</strong>中值得留意的地方。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、高阶函数"><a href="#一、高阶函数" class="headerlink" title="一、高阶函数"></a>一、高阶函数</h3><p>1、<code>map</code><br><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p>
<p>2、<code>reduce</code><br><code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p>
<blockquote>
<p><code>reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</code></p>
</blockquote>
<p>3、<code>filter</code><br><code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p>
<p>例如，在一个<code>list</code>中，删掉偶数，只保留奇数，可以这么写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line">list(filter(is_odd, data))</div><div class="line"><span class="comment"># 结果: [1, 5, 9, 15]</span></div></pre></td></tr></table></figure></p>
<p>需要注意的是，以上返回的序列是一个新的序列，原来的<code>data</code>序列不变。</p>
<p>4、用<code>filter</code>求素数</p>
<p>计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：</p>
<p>首先，列出从2开始的所有自然数，构造一个序列：</p>
<p>2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p>
<p>取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：</p>
<p>3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p>
<p>取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：</p>
<p>5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p>
<p>取新序列的第一个数5，然后用5把序列的5的倍数筛掉：</p>
<p>7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p>
<p>不断筛下去，就可以得到所有的素数。</p>
<p>用Python来实现这个算法，可以先构造一个从3开始的奇数序列：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_iter</span><span class="params">()</span>:</span></div><div class="line">    n = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        n = n + <span class="number">2</span></div><div class="line">        <span class="keyword">yield</span> n</div></pre></td></tr></table></figure>
<p>注意这是一个生成器，并且是一个无限序列。</p>
<p>然后定义一个筛选函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_not_divisible</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x % n &gt; <span class="number">0</span></div></pre></td></tr></table></figure>
<p>最后，定义一个生成器，不断返回下一个素数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span></div><div class="line">    it = _odd_iter() <span class="comment"># 初始序列</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        n = next(it) <span class="comment"># 返回序列的第一个数</span></div><div class="line">        <span class="keyword">yield</span> n</div><div class="line">        it = filter(_not_divisible(n), it) <span class="comment"># 构造新序列</span></div></pre></td></tr></table></figure>
<p>这个生成器先返回第一个素数2，然后，利用<code>filter()</code>不断产生筛选后的新的序列。</p>
<p>由于<code>primes()</code>也是一个无限序列，所以调用时需要设置一个退出循环的条件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 打印1000以内的素数:</span></div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> primes():</div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">1000</span>:</div><div class="line">        print(n)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>注意到<code>Iterator</code>是惰性计算的序列，所以我们可以用Python表示“全体自然数”，“全体素数”这样的序列，而代码非常简洁。</p>
<p>5、 <code>sorted</code><br><code>sorted()</code>函数也是一个高阶函数，它还可以接收一个<code>key</code>函数来实现自定义的排序，接收一个<code>reverse</code>函数来实现反向排序，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="string">'bob'</span>, <span class="string">'about'</span>, <span class="string">'Zoo'</span>, <span class="string">'Credit'</span>], key=str.lower, reverse=<span class="keyword">True</span>)</div><div class="line">[<span class="string">'Zoo'</span>, <span class="string">'Credit'</span>, <span class="string">'bob'</span>, <span class="string">'about'</span>]</div></pre></td></tr></table></figure>
<h3 id="二、返回函数"><a href="#二、返回函数" class="headerlink" title="二、返回函数"></a>二、返回函数</h3><p>1、高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p>
<p>2、闭包<br>如果返回的函数依赖其父作用域，那么就形成了闭包。</p>
<p>3、另外需要注意的是，返回的函数并不会立刻执行，而是直到调用了f()才执行。参考如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">             <span class="keyword">return</span> i*i</div><div class="line">        fs.append(f)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure></p>
<p>我们发现，返回的结果都为<code>9</code>，原因就在于<strong>返回的函数引用了其父作用域的变量<code>i</code></strong>，但它并非立刻执行。当<code>for</code>循环完成时，变量<code>i</code>已经变成了<code>3</code>，因此最终结果为<code>9</code>。</p>
<p>如果要解决此问题，再创建一个函数，用该函数的参数绑定循环变量当前的值，脱离对父作用域的依赖，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">            <span class="keyword">return</span> j*j</div><div class="line">        <span class="keyword">return</span> g</div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1, f2, f3 = count()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>
<h3 id="三、匿名函数"><a href="#三、匿名函数" class="headerlink" title="三、匿名函数"></a>三、匿名函数</h3><p>在Python中，对匿名函数提供了一些支持,下面的<code>f(x)</code>可以写成匿名函数<code>lambda x: x * x</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * x</div></pre></td></tr></table></figure>
<h3 id="四、装饰器"><a href="#四、装饰器" class="headerlink" title="四、装饰器"></a>四、装饰器</h3><p>1、在<code>java</code>中有个设计模式叫装饰者模式，可以扩充类的功能。在<code>python</code>中，要想实现类似的功能，可以使用“装饰器”（Decorator）。</p>
<p>2、参考如下简单的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hala</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'在这里打印日志'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> hala</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2015-3-25'</span>)</div><div class="line"></div><div class="line">now()</div><div class="line"></div><div class="line"><span class="comment">#在这里打印日志</span></div><div class="line"><span class="comment">#2015-3-25</span></div></pre></td></tr></table></figure>
<p>简单来说。把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句：</p>
<blockquote>
<p>now = log(now)</p>
</blockquote>
<p>3、如果<code>decorator</code>本身需要传入参数，那就需要编写一个返回<code>decorator</code>的高阶函数，写出来会更复杂。比如，要自定义<code>log</code>的文本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">hala</span><span class="params">()</span>:</span></div><div class="line">            print(<span class="string">'在这里打印日志'</span>+text)</div><div class="line">            <span class="keyword">return</span> func()</div><div class="line">        <span class="keyword">return</span> hala</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('execute')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2015-3-25'</span>)</div><div class="line"></div><div class="line">now()</div><div class="line"></div><div class="line"><span class="comment">#在这里打印日志execute</span></div><div class="line"><span class="comment">#2015-3-25</span></div></pre></td></tr></table></figure>
<p>4、以上两种<code>decorator</code>的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有<code>__name__</code>等属性，但你去看经过decorator装饰之后的函数，它们的<code>__name__</code>已经从原来的<code>&#39;now&#39;</code>变成了<code>&#39;hala&#39;</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</div><div class="line"><span class="string">'wrapper'</span></div></pre></td></tr></table></figure>
<p>因为返回的那个<code>hala()</code>函数名字就是<code>&#39;hala&#39;</code>，所以，需要把原始函数的<code>__name__</code>等属性复制到<code>hala()</code>函数中，否则，有些依赖函数签名的代码执行就会出错。</p>
<p>不需要编写<code>hala.__name__ = func.__name__</code>这样的代码，Python内置的<code>functools.wraps</code>就是干这个事的，所以，一个完整的<code>decorator</code>的写法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hala</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'在这里打印日志'</span>)</div><div class="line">        <span class="keyword">return</span> func()</div><div class="line">    <span class="keyword">return</span> hala</div><div class="line"></div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2015-3-25'</span>)</div></pre></td></tr></table></figure>
<p>或者针对带参数的decorator：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">hala</span><span class="params">()</span>:</span></div><div class="line">            print(<span class="string">'在这里打印日志'</span>+text)</div><div class="line">            <span class="keyword">return</span> func()</div><div class="line">        <span class="keyword">return</span> hala</div><div class="line">    <span class="keyword">return</span> decorator</div><div class="line"></div><div class="line"><span class="meta">@log('execute')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'2015-3-25'</span>)</div></pre></td></tr></table></figure>
<h3 id="五、偏函数"><a href="#五、偏函数" class="headerlink" title="五、偏函数"></a>五、偏函数</h3><p>1、Python的<code>functools</code>模块提供了很多有用的功能，其中一个就是偏函数（Partial function）。要注意，这里的偏函数和数学意义上的偏函数不一样。</p>
<p>2、使用场景<br><code>int()</code>函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code>函数默认按十进制转换：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>)</div><div class="line"><span class="number">12345</span></div></pre></td></tr></table></figure>
<p><code>int()</code>函数还提供额外的base参数，默认值为<code>10</code>。如果传入<code>base</code>参数，就可以做N进制的转换：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>, base=<span class="number">8</span>)</div><div class="line"><span class="number">5349</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'12345'</span>, <span class="number">16</span>)</div><div class="line"><span class="number">74565</span></div></pre></td></tr></table></figure>
<p>假设要转换大量的二进制字符串，每次都传入<code>int(x, base=2)</code>非常麻烦，于是，我们想到，可以定义一个<code>int2()</code>的函数，默认把<code>base=2</code>传进去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> int(x, base)</div></pre></td></tr></table></figure>
<p>这样，我们转换二进制就非常方便了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</div><div class="line"><span class="number">64</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</div><div class="line"><span class="number">85</span></div></pre></td></tr></table></figure>
<p>我们使用偏函数也能解决上述问题，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</div><div class="line"><span class="number">64</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</div><div class="line"><span class="number">85</span></div></pre></td></tr></table></figure>
<p>所以，简单总结<code>functools.partial</code>的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。</p>
<p>注意到上面的新的int2函数，仅仅是把base参数重新设定默认值为2，但也可以在函数调用时传入其他值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>, base=<span class="number">10</span>)</div><div class="line"><span class="number">1000000</span></div></pre></td></tr></table></figure>
<p>实际上，在创建偏函数时，可以接收函数对象、<em>args和*</em>kw这3个参数，当传入：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>实际上固定了<code>int()</code>函数的关键字参数<code>base</code>，也就是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int2(<span class="string">'10010'</span>)</div></pre></td></tr></table></figure>
<p>相当于：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kw = &#123; <span class="string">'base'</span>: <span class="number">2</span> &#125;</div><div class="line">int(<span class="string">'10010'</span>, **kw)</div></pre></td></tr></table></figure>
<p>当传入：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max2 = functools.partial(max, <span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>实际上会把<code>10</code>作为<code>*args</code>的一部分自动加到左边，也就是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max2(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</div></pre></td></tr></table></figure>
<p>相当于：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">args = (<span class="number">10</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</div><div class="line">max(*args)</div></pre></td></tr></table></figure>
<p>结果为<code>10</code>。</p>
<p>参考文章<br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317849054170d563b13f0fa4ce6ba1cd86e18103f28000" target="_blank" rel="external">廖雪峰的官方网站</a></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python基础语法小结（三）]]></title>
      <url>/2017/10/24/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>打算最近有时间看一看Python的基础语法,这一节里主要记录了Python中<strong>切片</strong>、<strong>迭代</strong>、<strong>列表生成式</strong>、<strong>生成器</strong>、<strong>迭代器</strong>中值得留意的地方。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、切片"><a href="#一、切片" class="headerlink" title="一、切片"></a>一、切片</h3><p>Python提供了切片（<code>Slice</code>）操作符，帮我们完成取一个<code>list</code>或<code>tuple</code>的部分元素的操作。<br><code>Slice</code>的常见用法参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#先创建一个0-99的数列</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = list(range(<span class="number">100</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ..., <span class="number">99</span>]</div><div class="line"></div><div class="line"><span class="comment">#可以通过切片轻松取出某一段数列。比如前10个数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">10</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"></div><div class="line"><span class="comment">#后10个数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-10</span>:]</div><div class="line">[<span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>]</div><div class="line"></div><div class="line"><span class="comment">#前11-20个数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">10</span>:<span class="number">20</span>]</div><div class="line">[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]</div><div class="line"></div><div class="line"><span class="comment">#前10个数，每两个取一个</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">10</span>:<span class="number">2</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line"></div><div class="line"><span class="comment">#所有数，每5个取一个</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[::<span class="number">5</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">90</span>, <span class="number">95</span>]</div><div class="line"></div><div class="line"><span class="comment">#甚至什么都不写，只写[:]就可以原样复制一个list</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L[:]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ..., <span class="number">99</span>]</div><div class="line"></div><div class="line"><span class="comment">#tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)[:<span class="number">3</span>]</div><div class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">#字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABCDEFG'</span>[:<span class="number">3</span>]</div><div class="line"><span class="string">'ABC'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABCDEFG'</span>[::<span class="number">2</span>]</div><div class="line"><span class="string">'ACEG'</span></div></pre></td></tr></table></figure>
<h3 id="二、迭代"><a href="#二、迭代" class="headerlink" title="二、迭代"></a>二、迭代</h3><p>1、默认情况下，<code>dict</code>迭代的是<code>key</code>。如果要迭代<code>value</code>，可以用<code>for value in d.values()</code>，如果要同时迭代<code>key</code>和<code>value</code>，可以用<code>for k, v in d.items()</code>。</p>
<p>2、可以通过<code>collections</code>模块的<code>Iterable</code>类型再通过<code>isinstance</code>方法判断一个对象是否是可迭代对象,参考如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>3、如果要对<code>list</code>实现下标循环，可以用<code>Python</code>内置的<code>enumerate</code>函数可以把一个<code>list</code>变成索引-元素对，参考如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</div><div class="line"><span class="meta">... </span>    print(i, value)</div><div class="line">...</div><div class="line"><span class="number">0</span> A</div><div class="line"><span class="number">1</span> B</div><div class="line"><span class="number">2</span> C</div></pre></td></tr></table></figure></p>
<p>4、上面的<code>for</code>循环里，同时引用了两个变量，在<code>Python</code>里是很常见的，参考如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</div><div class="line"><span class="meta">... </span>    print(x, y)</div><div class="line">...</div><div class="line"><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="number">2</span> <span class="number">4</span></div><div class="line"><span class="number">3</span> <span class="number">9</span></div></pre></td></tr></table></figure></p>
<h3 id="三、列表生成式"><a href="#三、列表生成式" class="headerlink" title="三、列表生成式"></a>三、列表生成式</h3><p>1、在<strong>python基础语法小结（一）</strong>里，我们了解到用<code>list(range(5))</code>可以生成的序列从0开始小于5的整数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;list(range(<span class="number">5</span>))</div><div class="line">[ <span class="number">0</span>,<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<p>但如果要生成<code>[0x0, 1x1, 2x2, 3x3, 4x4]</code>就会有些麻烦，需要用<code>for</code>循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line"><span class="meta">... </span>   L.append(x * x)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</div></pre></td></tr></table></figure></p>
<p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的<code>list</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</div></pre></td></tr></table></figure>
<p>2、<code>for</code>循环后面还可以加上<code>if</code>判断，这样我们就可以筛选出仅偶数的平方：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure></p>
<p>3、还可以使用两层循环，可以生成全排列：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</div><div class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</div></pre></td></tr></table></figure></p>
<p>4、列表生成式还可以使用两个变量来生成list：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'x'</span>: <span class="string">'A'</span>, <span class="string">'y'</span>: <span class="string">'B'</span>, <span class="string">'z'</span>: <span class="string">'C'</span> &#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[k + <span class="string">'='</span> + v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items()]</div><div class="line">[<span class="string">'y=B'</span>, <span class="string">'x=A'</span>, <span class="string">'z=C'</span>]</div></pre></td></tr></table></figure></p>
<h3 id="四、生成器"><a href="#四、生成器" class="headerlink" title="四、生成器"></a>四、生成器</h3><p>1、通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>
<p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而<strong>节省大量的空间</strong>。在Python中，这种一边循环一边计算的机制，称为生成器：<code>generator</code>。</p>
<p>2、要创建一个<code>generator</code>，有很多种方法。第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个<code>generator</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>G = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>G</div><div class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x000001D760F85BF8</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">#而且用for迭代时，使用上去也没有差异</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> L:</div><div class="line"><span class="meta">... </span>    print(i)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">16</span></div><div class="line"><span class="number">25</span></div><div class="line"><span class="number">36</span></div><div class="line"><span class="number">49</span></div><div class="line"><span class="number">64</span></div><div class="line"><span class="number">81</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> G:</div><div class="line"><span class="meta">... </span>    print(i)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">16</span></div><div class="line"><span class="number">25</span></div><div class="line"><span class="number">36</span></div><div class="line"><span class="number">49</span></div><div class="line"><span class="number">64</span></div><div class="line"><span class="number">81</span></div></pre></td></tr></table></figure>
<p>3、另外一个创建<code>generator</code>的方法是在一个函数定义中包含<code>yield</code>关键字,例如下面一个<br>计算斐波拉契数列（Fibonacci）的函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        print(b)</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">6</span>)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="string">'done'</span></div></pre></td></tr></table></figure>
<p>只需要将其中的<code>print(b)</code>改为<code>yield b</code>,那么<code>fib</code>函数就变成<code>generator</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &lt; max:</div><div class="line">        <span class="keyword">yield</span> b</div><div class="line">        a, b = b, a + b</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'done'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = fib(<span class="number">6</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;generator object fib at <span class="number">0x000001D760F85CA8</span>&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> f:</div><div class="line"><span class="meta">... </span>    print(i)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure>
<h3 id="五、迭代器"><a href="#五、迭代器" class="headerlink" title="五、迭代器"></a>五、迭代器</h3><p>1、凡是可作用于for循环的对象都是<code>Iterable</code>类型；<br>例如集合数据类型，<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等；<br>还有<code>generator</code>，包括生成器和带<code>yield</code>的generator function。</p>
<p>2、凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p>
<p>3、集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。而<code>generator</code>既是<code>Iterable</code>类型也是<code>Iterator</code>类型。</p>
<p>3、王二认为，可以将<code>Iterable</code>类型比喻为本科生，<code>Iterator</code>类型比喻为硕士生，硕士生一定是本科生，但本科生不一定是研究生，本科生（<code>Iterable</code>）可以通过考研（<code>iter()</code>）变为研究生（<code>Iterator</code>）。</p>
<p>参考文章<br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431756919644a792ee4ead724ef7afab3f7f771b04f5000" target="_blank" rel="external">廖雪峰的官方网站</a></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[leetcode上的一些算法题（一）]]></title>
      <url>/2017/10/23/leetcode%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近在leetcode上看了一些关于字符串的有趣的算法题，在这里做一个分享 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、Longest-Substring-Without-Repeating-Characters"><a href="#一、Longest-Substring-Without-Repeating-Characters" class="headerlink" title="一、Longest Substring Without Repeating Characters"></a>一、Longest Substring Without Repeating Characters</h3><p>1、问题描述如下 ：</p>
<p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>
<p><strong>Examples:</strong></p>
<p>Given <code>&quot;abcabcbb&quot;</code>, the answer is <code>&quot;abc&quot;</code>, which the length is 3.</p>
<p>Given <code>&quot;bbbbb&quot;</code>, the answer is <code>&quot;b&quot;</code>, with the length of 1.</p>
<p>Given <code>&quot;pwwkew&quot;</code>, the answer is <code>&quot;wke&quot;</code>, with the length of 3. Note that the answer must be a substring, <code>&quot;pwke&quot;</code> is a subsequence and not a substring.</p>
<p>原问题地址点<a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="external">这里</a></p>
<p>2、王二一开始的算法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s.length===<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> element = &#123;&#125; ;</div><div class="line">    <span class="keyword">var</span> maxLength = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">var</span> currentLength = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">var</span> currentIndex = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>;x&lt;s.length;x++)&#123;</div><div class="line">        <span class="keyword">var</span> i = s[x];</div><div class="line">        <span class="keyword">if</span>(element.hasOwnProperty(i))&#123;</div><div class="line">            <span class="keyword">var</span> index = element[i] ;</div><div class="line">            currentLength = <span class="number">0</span> ;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> temp <span class="keyword">of</span> <span class="built_in">Object</span>.entries(element))&#123;</div><div class="line">                <span class="keyword">if</span>(temp[<span class="number">1</span>]&lt;=index)&#123;</div><div class="line">                    <span class="keyword">delete</span> element[temp[<span class="number">0</span>]] ;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    currentLength++ ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            element[i] = x ;</div><div class="line">            currentLength++ ;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            element[i] = x ;</div><div class="line">            currentLength++ ;</div><div class="line">            <span class="keyword">if</span>(currentLength&gt;maxLength)&#123;</div><div class="line">                maxLength = currentLength ;</div><div class="line">                currentIndex = x ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [maxLength,s.substr(currentIndex-maxLength+<span class="number">1</span>,maxLength)] ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>算法的时间复杂度为O(n)，参考如下验证时间为O(n)的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomStr</span>(<span class="params">len</span>) </span>&#123;    <span class="comment">//随机获取字符串，len为随机字符串的长度   </span></div><div class="line">　　<span class="keyword">var</span> len = len || <span class="number">32</span>;</div><div class="line">　　<span class="keyword">var</span> $chars = <span class="string">'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'</span>;    <span class="comment">/****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/</span></div><div class="line">　　<span class="keyword">var</span> maxPos = $chars.length;</div><div class="line">　　<span class="keyword">var</span> pwd = <span class="string">''</span>;</div><div class="line">　　<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">　　　　pwd += $chars.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * maxPos));</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> pwd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> validate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> str = getRandomStr(<span class="number">100000</span>) ;</div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'str100000'</span>) ;</div><div class="line">    <span class="built_in">console</span>.log(lengthOfLongestSubstring(str)) ;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'str100000'</span>) ;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> str = getRandomStr(<span class="number">1000000</span>) ;</div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'str1000000'</span>) ;</div><div class="line">    <span class="built_in">console</span>.log(lengthOfLongestSubstring(str)) ;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'str1000000'</span>) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">validate() ;</div></pre></td></tr></table></figure>
<p>执行时间如下图所示：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/9.png?raw=true" alt="Alt text"></p>
<p>3、王二的解决思路如下：把字符串看成一个游标，每<code>for</code>循环一次就相当于在游标上走一格，算法会设置一个<code>element</code>对象，每走一格，算法会判断<code>element</code>对象中有没有这一格的值。</p>
<p>如果没有，就会将这一格的值加入到<code>element</code>对象中，加完后再将<code>element</code>的长度与<code>maxLength</code>作比较，将较大值重新赋值给<code>maxLength</code>。</p>
<p>如果有，会将<code>element</code>对象中这一格之前的值都给清除掉。</p>
<p>4、不过leetcode上大神们有更巧妙的解决思路，参考如下（原文点击<a href="https://discuss.leetcode.com/topic/8232/11-line-simple-java-solution-o-n-with-explanation" target="_blank" rel="external">这里</a>）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</div><div class="line">    <span class="keyword">int</span> max=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;s.length(); ++i)&#123;</div><div class="line">        <span class="keyword">if</span> (map.containsKey(s.charAt(i)))&#123;</div><div class="line">            j = Math.max(j,map.get(s.charAt(i))+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        map.put(s.charAt(i),i);</div><div class="line">        max = Math.max(max,i-j+<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大神的思路是这样的 ：</p>
<blockquote>
<p>the basic idea is, keep a hashmap which stores the characters in string as keys and their positions as values, and keep two pointers which define the max substring. move the right pointer to scan through the string , and meanwhile update the hashmap. If the character is already in the hashmap, then move the left pointer to the right of the same character last found. Note that the two pointers can only move forward.</p>
</blockquote>
<p>5、于是王二参考大神的思路写下了如下的算法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> map = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> maxLength=<span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> currentIndex = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;s.length; ++i)&#123;</div><div class="line">        <span class="keyword">if</span> (map.hasOwnProperty(s[i]))&#123;</div><div class="line">            j = <span class="built_in">Math</span>.max(j,map[s[i]]+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        map[s[i]] = i;</div><div class="line">        temp = <span class="built_in">Math</span>.max(maxLength,i-j+<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(temp&gt;maxLength)&#123;</div><div class="line">            maxLength = temp ;</div><div class="line">            currentIndex = i ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [maxLength,s.substr(currentIndex-maxLength+<span class="number">1</span>,maxLength)];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它的算法的时间复杂度为O(n)，而且执行效率更高，参考如下验证代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomStr</span>(<span class="params">len</span>) </span>&#123;    <span class="comment">//随机获取字符串，len为随机字符串的长度   </span></div><div class="line">　　<span class="keyword">var</span> len = len || <span class="number">32</span>;</div><div class="line">　　<span class="keyword">var</span> $chars = <span class="string">'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'</span>;    <span class="comment">/****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/</span></div><div class="line">　　<span class="keyword">var</span> maxPos = $chars.length;</div><div class="line">　　<span class="keyword">var</span> pwd = <span class="string">''</span>;</div><div class="line">　　<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">　　　　pwd += $chars.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * maxPos));</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> pwd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> validate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> str = getRandomStr(<span class="number">100000</span>) ;</div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'str100000'</span>) ;</div><div class="line">    <span class="built_in">console</span>.log(lengthOfLongestSubstring(str)) ;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'str100000'</span>) ;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> str = getRandomStr(<span class="number">1000000</span>) ;</div><div class="line">    <span class="built_in">console</span>.time(<span class="string">'str1000000'</span>) ;</div><div class="line">    <span class="built_in">console</span>.log(lengthOfLongestSubstring(str)) ;</div><div class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'str1000000'</span>) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">validate() ;</div></pre></td></tr></table></figure>
<p>执行时间如下图所示：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/9.png?raw=true" alt="Alt text"></p>
<h3 id="二、Longest-Palindromic-Substring"><a href="#二、Longest-Palindromic-Substring" class="headerlink" title="二、Longest Palindromic Substring"></a>二、Longest Palindromic Substring</h3><p>1、问题描述如下：</p>
<p>Given a string <code>s</code>, find the longest palindromic substring in <code>s</code>. </p>
<p><strong>Example:</strong></p>
<blockquote>
<p>Input: “babad”<br>Output: “bab”<br>Note: “aba” is also a valid answer.</p>
</blockquote>
<p><strong>Example:</strong></p>
<blockquote>
<p>Input: “cbbd”<br>Output: “bb”</p>
</blockquote>
<p>原问题地址点<a href="https://leetcode.com/problems/longest-palindromic-substring/description/" target="_blank" rel="external">这里</a></p>
<p>2、王二的算法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</div><div class="line">    s = <span class="string">' '</span>+s.split(<span class="string">''</span>).join(<span class="string">' '</span>)+<span class="string">' '</span>;</div><div class="line">    <span class="keyword">var</span> out = <span class="string">''</span> ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span> ; x&lt;s.length ; x++)&#123;</div><div class="line">        <span class="keyword">var</span> temp = s[x] ;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> y=<span class="number">1</span> ; y&lt;=x ; y++)&#123;</div><div class="line">            <span class="keyword">if</span>(s[x-y]===s[x+y])&#123;</div><div class="line">                temp = s[x-y] + temp + s[x+y] ;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">break</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(out.length&lt;temp.length)&#123;</div><div class="line">            out = temp ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> out.split(<span class="regexp">/\s+/</span>).join(<span class="string">''</span>) ;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>该算法也是O(n)的时间复杂度。</p>
<blockquote>
<p>在解决这个问题的时候，王二遇到了一个问题：上述代码如果直接<code>for</code>循环，那么遇到偶数个回文时就不会正确处理，那该怎么办呢？王二的解决方法是在单个字符之间插入空格，那么将空格算进去后，返回的回文数一定是奇数个，最后返回的时候再将空格都去除掉，问题就解决了。</p>
</blockquote>
<p><strong>最后推荐一个很好的刷题的网站<a href="https://discuss.leetcode.com" target="_blank" rel="external">leetcode</a></strong></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python基础语法小结（二）]]></title>
      <url>/2017/10/21/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>打算最近有时间看一看Python的基础语法,这一节里主要记录了<strong>函数</strong>中<strong>内置函数</strong>、<strong>参数返回值</strong>、<strong>默认函数</strong>、<strong>可变参数</strong>、<strong>关键字参数</strong>、<strong>递归函数</strong>中值得留意的地方。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、函数"><a href="#一、函数" class="headerlink" title="一、函数"></a>一、函数</h3><p>1、python内置了很多有用的函数，我们可以直接从pyhton的<a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="external">官方网站</a>中查看到。</p>
<p>2、如果想定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>3、python 的函数可以返回多个值，但其实就是一个<code>tuple</code>。</p>
<p>4、默认参数</p>
<p>python 的函数传的参数数量需要与函数定义参数的数量一致，如果不一致，就会报错，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n)</span>:</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n = n - <span class="number">1</span></div><div class="line">        s = s * x</div><div class="line">    <span class="keyword">return</span> s</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>, <span class="number">3</span>)</div><div class="line"><span class="number">125</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: power() missing <span class="number">1</span> required positional argument: <span class="string">'n'</span></div></pre></td></tr></table></figure>
<p>为了避免这种情况，可以使用默认参数，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n = n - <span class="number">1</span></div><div class="line">        s = s * x</div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure>
<p>需要注意的是，设置默认参数时，必选参数在前，默认参数在后，否则Python的解释器会报错。另外，当默认参数的默认值是一个引用变量时，我们会很有可能掉进坑里，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div></pre></td></tr></table></figure>
<p>当正常调用时，结果似乎不错：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'END'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end([<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>])</div><div class="line">[<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'END'</span>]</div></pre></td></tr></table></figure>
<p>当使用默认参数调用时，一开始结果也是对的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>]</div></pre></td></tr></table></figure>
<p>但是，再次调用<code>add_end()</code>时，结果就不对了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>, <span class="string">'END'</span>]</div></pre></td></tr></table></figure>
<p>很多初学者很疑惑，默认参数是[]，但是函数似乎每次都“记住了”上次添加了’END’后的list。</p>
<p>原因解释如下：<br>Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。</p>
<p>所以，定义默认参数要牢记一点：默认参数必须指向不变对象！</p>
<p><strong>在JS的ES6语法中，为函数设置默认参数时，不会出现以上Python中遇到的问题，在这一点上，JS和Python有差异</strong></p>
<p>要修改上面的例子，我们可以用None这个不变对象来实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        L = []</div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div></pre></td></tr></table></figure>
<p>现在，无论调用多少次，都不会有问题：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</div><div class="line">[<span class="string">'END'</span>]</div></pre></td></tr></table></figure>
<p>5、可变参数<br>定义可变参数和定义一个<code>list</code>或<code>tuple</code>参数相比，仅仅在参数前面加了一个<em>号。在函数内部，参数<code>numbers</code>接收到的是一个<code>tuple</code>，因此，函数代码完全不变。<code>Python</code>还允许我们在<code>list</code>或<code>tuple</code>前面加一个</em>号，把<code>list</code>或<code>tuple</code>的元素变成可变参数传进去。</p>
<p>6、关键字参数<br>可变参数允许我们传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个<code>tuple</code>。而关键字参数允许我们可以传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<code>dict</code>。参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</div></pre></td></tr></table></figure>
<p>函数<code>person</code>除了必选参数<code>name</code>和<code>age</code>外，还接受关键字参数<code>kw</code>。在调用该函数时，可以只传入必选参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Michael'</span>, <span class="number">30</span>)</div><div class="line">name: Michael age: <span class="number">30</span> other: &#123;&#125;</div></pre></td></tr></table></figure>
<p>也可以传入任意个数的关键字参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</div><div class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</div><div class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
<p>和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</div><div class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</div></pre></td></tr></table></figure>
<p>7、尾递归<br>在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。</p>
<p>这个时候可以使用尾递归来优化算法，王二认为，尾递归的核心要素在于<strong>函数<code>return</code>出来的东西不能对其父作用域有依赖关系</strong></p>
<p>参考文章<br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316784721058975e02b46cc45cb836bb0827607738d000" target="_blank" rel="external">廖雪峰的官方网站</a></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python基础语法小结（一）]]></title>
      <url>/2017/10/19/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>打算最近有时间看一看Python的基础语法,这一节里主要记录了<strong>数据类型和变量</strong>、<strong>list</strong>   、<strong>tuple</strong>、<strong>循环</strong>、<strong>dict</strong>、<strong>set</strong>中值得留意的地方。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、数据类型和变量"><a href="#一、数据类型和变量" class="headerlink" title="一、数据类型和变量"></a>一、数据类型和变量</h3><p>1、在需要在字符中使用特殊字符时，<code>python</code>用反斜杠<code>(\)</code>转义字符。下表是开发中一些常用的转义字符：</p>
<table>
<thead>
<tr>
<th style="text-align:left">转义字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>\</code>(在行尾时)</td>
<td style="text-align:left">续行符</td>
</tr>
<tr>
<td style="text-align:left"><code>\\</code></td>
<td style="text-align:left">反斜杠符号</td>
</tr>
<tr>
<td style="text-align:left"><code>\&#39;</code></td>
<td style="text-align:left">单引号</td>
</tr>
<tr>
<td style="text-align:left"><code>\&quot;</code></td>
<td style="text-align:left">双引号</td>
</tr>
<tr>
<td style="text-align:left"><code>\n</code></td>
<td style="text-align:left">换行</td>
</tr>
<tr>
<td style="text-align:left"><code>\t</code></td>
<td style="text-align:left">横向制表符</td>
</tr>
</tbody>
</table>
<p>2、如果字符串里面有很多字符都需要转义，就需要加很多<code>\</code>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义，参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\\\t\\'</span>)</div><div class="line">\       \</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'\\\t\\'</span>)</div><div class="line">\\\t\\</div></pre></td></tr></table></figure>
<p>3、如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容。</p>
<p>4、在<code>python</code>中，在Python中，布尔值的首字母是大写的（<code>True</code>，<code>False</code>）</p>
<p>5、在<code>python3</code>中，有两种除法：</p>
<p>一种除法是<code>/</code>,其计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> / <span class="number">3</span></div><div class="line"><span class="number">3.3333333333333335</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span> / <span class="number">3</span></div><div class="line"><span class="number">3.0</span></div></pre></td></tr></table></figure>
<p>还有一种除法是<code>//</code>，称为地板除，两个整数的除法仍然是整数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> // <span class="number">3</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>这一点和<code>python2</code>的语法有差异。</p>
<h3 id="二、使用list"><a href="#二、使用list" class="headerlink" title="二、使用list"></a>二、使用list</h3><p>1、<code>list</code>是一种有序的集合，可以随时添加和删除其中的元素。</p>
<p>2、用<code>len()</code>函数可以获得<code>list</code>元素的个数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(classmates)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p>3、<code>list</code>可以用负数做索引，例如<code>-1</code>做索引，可以直接获取最后一个元素：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">-1</span>]</div><div class="line"><span class="string">'Tracy'</span></div></pre></td></tr></table></figure>
<p>4、<code>append</code>可以往list中追加元素到末尾。</p>
<p>5、也可以把元素插入到指定的位置，比如索引号为1的位置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.insert(<span class="number">1</span>, <span class="string">'Jack'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</div><div class="line">[<span class="string">'Michael'</span>, <span class="string">'Jack'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</div></pre></td></tr></table></figure>
<p>6、<code>pop</code> 会删除list末尾的元素，如果要删除指定位置的元素，可以用<code>pop(i)</code>方法，其中<code>i</code>是索引位置。</p>
<p>7、如果要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; classmates[1] = &apos;Sarah&apos;</div><div class="line">&gt;&gt;&gt; classmates</div><div class="line">[&apos;Michael&apos;, &apos;Sarah&apos;, &apos;Tracy&apos;]</div></pre></td></tr></table></figure>
<h3 id="三、使用tuple"><a href="#三、使用tuple" class="headerlink" title="三、使用tuple"></a>三、使用tuple</h3><p>1、<code>tuple</code>和<code>list</code>非常类似，但是<code>tuple</code>一旦初始化就不能修改。</p>
<p>2、如果要定义一个空的<code>tuple</code>，可以写成<code>()</code>；但是，要定义一个只有1个元素的<code>tuple</code>，如果你这么定义：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<p>定义的不是<code>tuple</code>，是<code>1</code>这个数！这是因为括号<code>()</code>既可以表示<code>tuple</code>，又可以表示数学公式中的小括号，这就产生了歧义，因此，<code>Python</code>规定，这种情况下，按小括号进行计算，计算结果自然是<code>1</code>。<br>所以，只有1个元素的<code>tuple</code>定义时必须加一个逗号<code>,</code>，来消除歧义：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>,)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="number">1</span>,)</div></pre></td></tr></table></figure>
<h3 id="四、循环"><a href="#四、循环" class="headerlink" title="四、循环"></a>四、循环</h3><p>1、如果要计算1-100的整数之和，从1写到100有点困难，幸好<code>Python</code>提供一个<code>range()</code>函数，可以生成一个整数序列，再通过<code>list()</code>函数可以转换为<code>list</code>。比如<code>range(5)</code>生成的序列是从0开始小于5的整数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">5</span>))</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<p>如果要计算0～100的和，可以参考如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sum = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</div><div class="line">    sum = sum + x</div><div class="line">print(sum)</div></pre></td></tr></table></figure>
<h3 id="五、使用dict"><a href="#五、使用dict" class="headerlink" title="五、使用dict"></a>五、使用dict</h3><p>1、<code>Python</code>内置了字典：<code>dict</code>的支持，<code>dict</code>全称<code>dictionary</code>，在其他语言中也称为<code>map</code>，使用键-值（key-value）存储，具有极快的查找速度。</p>
<p>2、如果要删除<code>dict</code>中的一个<code>key</code>，可以用<code>pop(key)</code>方法，对应的<code>value</code>也会从<code>dict</code>中删除。</p>
<p>3、和list比较，dict有以下几个特点：</p>
<blockquote>
<ul>
<li>查找和插入的速度极快，不会随着key的增加而变慢；</li>
<li>需要占用大量的内存，内存浪费多。</li>
</ul>
</blockquote>
<p>而list相反：</p>
<blockquote>
<ul>
<li>查找和插入的时间随着元素的增加而增加；</li>
<li>占用空间小，浪费内存很少。</li>
</ul>
</blockquote>
<p>所以，dict是用空间来换取时间的一种方法。</p>
<h3 id="六、使用set"><a href="#六、使用set" class="headerlink" title="六、使用set"></a>六、使用set</h3><p>1、set中不可以放入可变对象，例如，下面代码会出错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; set([1, 1, 2, 2, [3], 3])</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: unhashable type: &apos;list&apos;</div></pre></td></tr></table></figure>
<p>这一点和JS里的Set有出入，在JS中，引用类型对象也可以放入Set对象中。</p>
<p>参考文章<br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143167793538255adf33371774853a0ef943280573f4d000" target="_blank" rel="external">廖雪峰的官方网站</a></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一道算法题以及关于其时间复杂度的一些讨论]]></title>
      <url>/2017/10/19/leetcode%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近在leetcode上看了一些算法题，其中有一个<code>Two Sum</code>的算法，其中涉及一些关于时间复杂度的问题，在这里做一个讨论 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、算法描述如下："><a href="#一、算法描述如下：" class="headerlink" title="一、算法描述如下："></a>一、算法描述如下：</h3><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<blockquote>
<p><strong>Example:</strong><br>Given nums = [2, 7, 11, 15], target = 9,<br>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>
</blockquote>
<p>如果想看leetcode上关于two sum的描述可以<a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="external">点这里</a></p>
<h3 id="二、解决思路"><a href="#二、解决思路" class="headerlink" title="二、解决思路"></a>二、解决思路</h3><p>1、王二最开始写下了如下算法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span> (<span class="params">nums,target</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> out ;</div><div class="line">    nums.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element1,index1</span>) </span>&#123;</div><div class="line">        nums.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element2,index2</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(index2&lt;=index1) <span class="keyword">return</span> ;</div><div class="line">            <span class="keyword">if</span>(element1+element2===target &amp;&amp; !out)&#123;</div><div class="line">                out = [index1,index2]</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> out ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是以上算法有一个缺陷，<code>Array.prototype.forEach</code>在遍历数组时中途不能跳出循环，除非我手动抛出一个错误，但是这样就显得非常不优雅了。</p>
<p>2、于是王二想到了可以用for循环，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span> (<span class="params">nums,target</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;nums.length;x++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> y=x+<span class="number">1</span>; y&lt;nums.length;y++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums[x]+nums[y]===target)&#123;</div><div class="line">                <span class="keyword">return</span> [x,y] ;</div><div class="line">            &#125;    </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样写的话，只要一找到符合条件的数组，就能跳出循环，相比第一种方法效率提高了不少。</p>
<p>3、不过王二觉得两层for循环是在是不太好看，甚至觉得有点low，一定有其他的解决方案，于是又细细思索了一下，改进了代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span> (<span class="params">nums,target</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;nums.length;x++)&#123;</div><div class="line">        <span class="keyword">var</span> y = nums.lastIndexOf(target-nums[x])</div><div class="line">        <span class="keyword">if</span>(y&gt;<span class="number">0</span>) <span class="keyword">return</span> x===y?<span class="literal">undefined</span>:[x,y] ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样写的话代码就显得优雅精悍的多了，但它本质上还是两层循环，时间复杂度仍然为O(n^2)，因为<strong><code>indexOf</code>是数组的元素存在性检查方法。需要遍历所有元素来检查，此方法的时间复杂度是O(n)</strong></p>
<p>参考如下验证时间为O(n^2)的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largeArray</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [] ;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">1</span> ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x&lt;index;x++)&#123;</div><div class="line">        arr.push(count++);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr ;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span> (<span class="params">nums,target</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.time() ;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;nums.length;x++)&#123;</div><div class="line">        <span class="keyword">var</span> y = nums.lastIndexOf(target-nums[x])</div><div class="line">        <span class="keyword">if</span>(y&gt;<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> x===y?<span class="literal">undefined</span>:[x,y] ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.timeEnd() ;</div><div class="line">&#125;</div><div class="line"><span class="comment">//注意arr1与arr2分开执行</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr1 = largeArray(<span class="number">10000</span>);</div><div class="line"><span class="comment">//var arr2 = largeArray(100000);</span></div><div class="line"></div><div class="line">twoSum(arr1,<span class="number">10000000</span>) <span class="comment">//为10000000时，方法由于找不到适配的结果，所以会遍历所有情况</span></div><div class="line"><span class="comment">//twoSum(arr2,10000000)</span></div></pre></td></tr></table></figure></p>
<p>执行时间如下图所示：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/7.png?raw=true" alt="Alt text"></p>
<p>可以发现在数组长度多了10倍的情况下，执行时间多了近100倍。</p>
<p>4、leetcode上有大神用java写下了如下代码(<a href="https://discuss.leetcode.com/topic/2447/accepted-java-o-n-solution" target="_blank" rel="external">链接在这里</a>)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</div><div class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (map.containsKey(target - numbers[i])) &#123;</div><div class="line">            result[<span class="number">1</span>] = i + <span class="number">1</span>;</div><div class="line">            result[<span class="number">0</span>] = map.get(target - numbers[i]);</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">        map.put(numbers[i], i + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它的时间复杂度为O(n)，原因是作者巧妙地运用了HashMap的<code>containsKey()</code>方法，由于HashMap使用哈希表来存储元素，所以在查询key时，其时间复杂度为O(1)。</p>
<p>5、于是我也用js复原了一下上面的java算法，参考如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span> (<span class="params">nums,target</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;nums.length;x++)&#123;</div><div class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(target-nums[x])) &#123;</div><div class="line">            <span class="keyword">return</span> [obj[target-nums[x]],x] ;</div><div class="line">        &#125;</div><div class="line">        obj[nums[x]]=x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的<code>Object.prototype.hasOwnProperty</code>类似java中HashMap的<code>containsKey()</code>方法，时间复杂度为O(1)；<br>所以以上代码的时间复杂度也变成了O(n)</p>
<p>参考如下验证时间为O(n)的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largeArray</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [] ;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">1</span> ;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x&lt;index;x++)&#123;</div><div class="line">        arr.push(count++);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr ;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span> (<span class="params">nums,target</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.time() ;</div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;nums.length;x++)&#123;</div><div class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(target-nums[x])) &#123;</div><div class="line">            <span class="keyword">return</span> [obj[target-nums[x]],x] ;</div><div class="line">        &#125;</div><div class="line">        obj[nums[x]]=x;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.timeEnd() ;</div><div class="line">&#125;</div><div class="line"><span class="comment">//注意arr1与arr2分开执行</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr1 = largeArray(<span class="number">10000</span>);</div><div class="line"><span class="comment">//var arr2 = largeArray(100000);</span></div><div class="line"></div><div class="line">twoSum(arr1,<span class="number">10000000</span>) <span class="comment">//为10000000时，方法由于找不到适配的结果，所以会遍历所有情况</span></div><div class="line"><span class="comment">//twoSum(arr2,10000000)</span></div></pre></td></tr></table></figure></p>
<p>执行时间如下图所示：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/8.png?raw=true" alt="Alt text"></p>
<p>可以发现在数组长度多了10倍的情况下，执行时间也只多了不到10倍。</p>
<h3 id="二、小结"><a href="#二、小结" class="headerlink" title="二、小结"></a>二、小结</h3><p>上述代码中，在数组长度很大的情况下，时间复杂度为O(n^2)与时间复杂度为O(n)的执行效率相差了近万倍，有时候会严重地影响性能，从这一点来看，以后写算法的时候要特别注意算法的时间复杂度；</p>
<p>参考文章：<br><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="external">leetcode</a><br><a href="https://segmentfault.com/q/1010000004594079/a-1020000004597959" target="_blank" rel="external">segmentfault</a><br><a href="http://blog.csdn.net/u013468917/article/details/51362156" target="_blank" rel="external">CSDN”<em>旧时光</em>“的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS样式踩坑小结]]></title>
      <url>/2017/10/12/CSS%E6%A0%B7%E5%BC%8F%E8%B8%A9%E5%9D%91%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近做了一些项目，在CSS方面遇到了不少坑，在这里做一个小结 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、iOS上的Safari没有滑动惯性"><a href="#一、iOS上的Safari没有滑动惯性" class="headerlink" title="一、iOS上的Safari没有滑动惯性"></a>一、iOS上的Safari没有滑动惯性</h3><p>在开发iphone微信端的时候，如果给一个<code>div</code>设置样式为滑动,样式如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">overflow-y</span>:scroll ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>会发现Safari的滑动很僵硬，这时候可以用以下样式来解决：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">-webkit-overflow-scrolling</span>: touch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="二、去除iphone中点击按钮会出现一个半透明的灰色背景的问题"><a href="#二、去除iphone中点击按钮会出现一个半透明的灰色背景的问题" class="headerlink" title="二、去除iphone中点击按钮会出现一个半透明的灰色背景的问题"></a>二、去除iphone中点击按钮会出现一个半透明的灰色背景的问题</h3><p>在开发iphone微信端的时候，同样发现，如果点击一个按钮，按钮会出现一个半透明的灰色背景，这时候可以用以下样式来解决：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>,<span class="selector-tag">img</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">div</span>&#123;                       </div><div class="line">  <span class="attribute">-webkit-tap-highlight-color</span>:<span class="built_in">rgba</span>(255,255,255,0); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、div中保留文本的空格、换行以及tab字符的处理"><a href="#三、div中保留文本的空格、换行以及tab字符的处理" class="headerlink" title="三、div中保留文本的空格、换行以及tab字符的处理"></a>三、div中保留文本的空格、换行以及tab字符的处理</h3><p>在后台用<code>textarea</code>标签写入文本放入前端显示的时候，发现之前在<code>textarea</code>中的文本都被格式化了（浏览器默认把文本中的空格、换行以及tab字符都处理掉了），如果想保留文本的格式，可以用以下样式来解决：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">white-space</span>: pre-wrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要特别注意的是，<code>white-space</code>有五种值可以选择，<code>normal</code>、<code>pre</code> 、<code>nowrap</code> 、<code>pre-wrap</code>、<code>pre-wrap</code>,每一种值都有不同的表现形式，其中：</p>
<blockquote>
<ul>
<li><code>normal</code> 是 <code>white-space</code> 的默认值；</li>
<li><code>pre</code> 会保留文本中额外的空格, 而且会保留文本中的换行；</li>
<li><code>nowrap</code> 不会保留文本中额外的空格，而且会禁止文本中的换行；</li>
<li><code>pre-wrap</code> 会保留文本中额外的空格, 而且会让文本正常的换行；</li>
<li><code>pre-line</code> 不会保留文本中额外的空格，但是会让文本正常的换行；</li>
</ul>
</blockquote>
<p>这样解释读者会有一些迷惑，接下来用代码进一步说明，参考如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></div><div class="line"><span class="undefined">        white-space: pre</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.b</span>&#123;</span></div><div class="line"><span class="undefined">        white-space: nowrap</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.c</span>&#123;</span></div><div class="line"><span class="undefined">        white-space: pre-wrap</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.d</span>&#123;</span></div><div class="line"><span class="undefined">        white-space: pre-line</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.e</span>&#123;</span></div><div class="line"><span class="undefined">        white-space: normal</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d"</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"e"</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里我们要特地留意一下 <code>pre</code> 与 <code>pre-wrap</code> 的区别，正常情况下，两者的现实没有差异，如下图：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/1.jpeg?raw=true" alt="Alt text"></p>
<p>但是如果将窗口拉窄,我们会发现，<code>pre-wrap</code>会让文本根据窗口宽窄自动换行，而<code>pre</code>的换行不会受窗口宽窄影响：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/2.jpeg?raw=true" alt="Alt text"></p>
<h3 id="四、让盒子里的字超出长度后，可以缩略显示变成点点点"><a href="#四、让盒子里的字超出长度后，可以缩略显示变成点点点" class="headerlink" title="四、让盒子里的字超出长度后，可以缩略显示变成点点点"></a>四、让盒子里的字超出长度后，可以缩略显示变成点点点</h3><p>1、在 <code>div</code> 框里的内容超出长度后，我们可以让超出部分的内容变成点点点，样式如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">    <span class="attribute">white-space</span>:nowrap; </div><div class="line">    <span class="attribute">text-overflow</span>:ellipsis;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们就能获得我们想要的样式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></div><div class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>; </span></div><div class="line"><span class="undefined">        border: 1px solid gray;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.ellipsis</span>&#123;</span></div><div class="line"><span class="css">        <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span></div><div class="line"><span class="css">        <span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>; </span></div><div class="line"><span class="css">        <span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>Wow,CSS is very very very very very cool !<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a ellipsis"</span>&gt;</span>Wow,CSS is very very very very very cool !<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/3.jpeg?raw=true" alt="Alt text"></p>
<p>2、但是<strong>如果我们想让div里的内容两行或者三行之后再显示点点点</strong>，我们应该怎么办呢？如果你也有疑惑，可以参考如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></div><div class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>; </span></div><div class="line"><span class="undefined">        border: 1px solid gray;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.ellipsis</span>&#123;</span></div><div class="line"><span class="undefined">        display: -webkit-box;</span></div><div class="line"><span class="undefined">        -webkit-box-orient: vertical;</span></div><div class="line"><span class="undefined">        -webkit-line-clamp: 2;</span></div><div class="line"><span class="undefined">        overflow: hidden;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>Wow,CSS is very very very very very cool !<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a ellipsis"</span>&gt;</span>Wow,CSS is very very very very very cool !<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/4.jpeg?raw=true" alt="Alt text"></p>
<blockquote>
<p>这时候变成三行后再省略也相当简单，直接将 <code>-webkit-line-clamp</code> 变成 3 就行了。</p>
</blockquote>
<p>3、特别特别需要注意的是，如果遇到丧心病狂的测试，他会给出一长串连续的英文字符，那么以上代码有可能会失效，这时候就需要<code>word-break: break-all;</code> 来帮助我们，参考如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></div><div class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>; </span></div><div class="line"><span class="undefined">        border: 1px solid gray;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.break</span>&#123;</span></div><div class="line"><span class="undefined">        word-break: break-all ;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.ellipsis</span>&#123;</span></div><div class="line"><span class="undefined">        display: -webkit-box;</span></div><div class="line"><span class="undefined">        -webkit-box-orient: vertical;</span></div><div class="line"><span class="undefined">        -webkit-line-clamp: 2;</span></div><div class="line"><span class="undefined">        overflow: hidden;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>ssssssasjdjdfjsdfksdfgksdfgskdfgskjdfksdf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a ellipsis"</span>&gt;</span>ssssssasjdjdfjsdfksdfgksdfgskdfgskjdfksdf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a break ellipsis"</span>&gt;</span>ssssssasjdjdfjsdfksdfgksdfgskdfgskjdfksdf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a break"</span>&gt;</span>ssssssasjdjdfjsdfksdfgksdfgskdfgskjdfksdf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/5.jpeg?raw=true" alt="Alt text"></p>
<h3 id="五、word-wrap和word-break的区别"><a href="#五、word-wrap和word-break的区别" class="headerlink" title="五、word-wrap和word-break的区别"></a>五、word-wrap和word-break的区别</h3><p>1、word-wrap和word-break都能使过长的字符串断开，防止其溢出，那他们两的区别又是什么呢？</p>
<p>2、我们先从<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-break" target="_blank" rel="external">MDN</a>文档里了解它们的概要：</p>
<p>CSS 属性 <code>word-break</code> 指定了怎样在单词内断行。<br>他的属性有：</p>
<blockquote>
<ul>
<li><code>normal</code>   使用默认的断行规则。</li>
<li><code>break-all</code>   对于non-CJK (CJK 指中文/日文/韩文) 文本，可在任意字符间断行。</li>
<li><code>keep-all</code>   CJK 文本不断行。 Non-CJK 文本表现同 normal。</li>
</ul>
</blockquote>
<p>CSS 属性 <code>word-wrap</code> 是用来说明当一个不能被分开的字符串太长而不能填充其包裹盒时，为防止其溢出，浏览器是否允许这样的单词中断换行。<br>他的属性有：</p>
<blockquote>
<ul>
<li><code>normal</code>   表示在正常的单词结束处换行。</li>
<li><code>break-word</code>   表示如果行内没有多余的地方容纳该单词到结尾，则那些正常的不能被被分割的单词会被强制分割换行。</li>
</ul>
</blockquote>
<p>3、仅仅看解释并不能看出什么头绪，接下来用代码来演示他们的差异，代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.a</span>&#123;</span></div><div class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>; </span></div><div class="line"><span class="undefined">    border: 1px solid gray;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.break</span>&#123;</span></div><div class="line"><span class="undefined">    word-break: break-all ;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.wrap</span>&#123;</span></div><div class="line"><span class="undefined">    word-wrap: break-word ;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>you are vvvvvvvvvvvvvvvvvvvvvvvery beautiful!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a break"</span>&gt;</span>you are vvvvvvvvvvvvvvvvvvvvvvvery beautiful!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a wrap"</span>&gt;</span>you are vvvvvvvvvvvvvvvvvvvvvvvery beautiful!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/6.jpeg?raw=true" alt="Alt text"></p>
<p>我们发现，当使用<code>word-wrap: break-word;</code>时，如果这个时候文本溢出，它会首先尝试挪到下一行，看看下一行的宽度够不够，不够的话才会进行单词内的断句。而使用<code>word-break:break-all</code>时，他会直接进行单词内的断句。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中Object.keys、Object.values、Object.entries的使用方法]]></title>
      <url>/2017/10/11/JS%E4%B8%ADObject-keys%E3%80%81Object-values%E3%80%81Object-entries%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>一直好奇JS中Object上静态方法的使用方式，上网找了不少教程，今天在这里和大家分享一下 <code>Object.keys</code>、<code>Object.values</code>、<code>Object.entries</code>的使用方法 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、大致了解"><a href="#一、大致了解" class="headerlink" title="一、大致了解"></a>一、大致了解</h3><p>首先我们需要了解的是<code>Object.keys</code>是<code>ES5</code>中引入的的方法，在<code>ES2017</code>中，引入了跟<code>Object.keys</code>配套的<code>Object.values</code>和<code>Object.entries</code>，作为遍历一个对象的补充手段。</p>
<blockquote>
<p>需要注意的是，<code>Object.keys()</code>,<code>Object.values()</code>,<code>Object.entries()</code>都会返回一个由一个给定对象的<strong>自身可枚举属性</strong>组成的数组，数组中属性名的排列顺序和使用 <code>for...in</code> 循环遍历该对象时返回的顺序一致( 区别在于 <code>for...in</code> 还会循环枚举原型链中的属性 )。</p>
</blockquote>
<p>参考一些代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.keys(obj); <span class="comment">// ['a','b','c']</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.values(obj); <span class="comment">// [1,2,3]</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.entries(obj); <span class="comment">// [['a',1],['b',2],['c',3]]</span></div></pre></td></tr></table></figure></p>
<p>我们会发现，<code>Object.keys</code>会<strong>返回参数对象自身的所有可遍历属性的键名形成的数组</strong>，<code>Object.values</code>会<strong>返回参数对象自身的所有可遍历属性的键值形成的数组</strong>，<code>Object.entries</code>会<strong>返回参数对象自身的所有可遍历属性的键值对数组形成的数组</strong></p>
<h3 id="二、其他一些例子"><a href="#二、其他一些例子" class="headerlink" title="二、其他一些例子"></a>二、其他一些例子</h3><p>再来看一些<code>Object.keys</code>、<code>Object.values</code>、<code>Object.entries</code>的其他使用方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Array 对象 */</span> </div><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(arr)); <span class="comment">// ["0", "1", "2"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(arr)); <span class="comment">// ["a", "b", "c"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(arr)); <span class="comment">// [["0", "a"], ["1", "b"], ["2", "c"]]</span></div><div class="line"></div><div class="line"><span class="comment">/* 类数组 对象 */</span> </div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span> : <span class="string">"a"</span>, <span class="number">1</span> : <span class="string">"b"</span>, <span class="number">2</span> : <span class="string">"c"</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// ["0", "1", "2"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// ["a", "b", "c"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [["0", "a"], ["1", "b"], ["2", "c"]]</span></div><div class="line"></div><div class="line"><span class="comment">/* 类数组 对象, 随机排序 */</span></div><div class="line"><span class="keyword">var</span> obj1 = &#123; <span class="number">100</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">7</span>: <span class="string">'c'</span> &#125;; </div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj1)); <span class="comment">// ["2", "7", "100"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj1)); <span class="comment">// ["b", "c", "a"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj1)); <span class="comment">// [["2", "b"],["7", "c"],["100", "a"]]</span></div><div class="line"></div><div class="line"><span class="comment">/* a 是个不可枚举的属性 */</span> </div><div class="line"><span class="keyword">var</span> obj2 = &#123;&#125;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj2,<span class="string">'a'</span>, &#123;</div><div class="line">    value : <span class="string">"hala"</span></div><div class="line">&#125;);</div><div class="line">obj2.b = <span class="string">"heihei"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj2)); <span class="comment">// ['b']</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj2)); <span class="comment">// ['heihei']</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj2)); <span class="comment">// [["b", "heihei"]]</span></div></pre></td></tr></table></figure></p>
<h3 id="三、注意点"><a href="#三、注意点" class="headerlink" title="三、注意点"></a>三、注意点</h3><p>在<code>ES5</code>里，如果传入的参数不是对象（而是一个原始值），那么它会抛出 <code>TypeError</code>。但是在<code>ES2015</code>中，非对象的参数将被强制转换为一个对象，参考如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.keys(<span class="string">"foo"</span>); <span class="comment">// TypeError: "foo" is not an object (ES5 code)</span></div><div class="line"><span class="built_in">Object</span>.keys(<span class="string">"foo"</span>);<span class="comment">// ["0", "1", "2"]                           (ES2015 code)</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.values(<span class="string">"foo"</span>); <span class="comment">// TypeError: "foo" is not an object (ES5 code)</span></div><div class="line"><span class="built_in">Object</span>.values(<span class="string">"foo"</span>);<span class="comment">// ["f", "o", "0"]                         (ES2015 code)</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.entries(<span class="string">"foo"</span>); <span class="comment">// TypeError: "foo" is not an object (ES5 code)</span></div><div class="line"><span class="built_in">Object</span>.entries(<span class="string">"foo"</span>);<span class="comment">// [["0", "f"],["1", "o"],["2", "o"]]     (ES2015 code)</span></div></pre></td></tr></table></figure></p>
<h3 id="四、Object-entries的另外用法"><a href="#四、Object-entries的另外用法" class="headerlink" title="四、Object.entries的另外用法"></a>四、Object.entries的另外用法</h3><p><code>new Map()</code> 构造函数接受一个可迭代的<code>entries</code>。借助<code>Object.entries</code>方法你可以很容易的将<code>Object</code>转换为<code>Map</code>,参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;; </div><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));</div><div class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map &#123; foo: "bar", baz: 42 &#125;</span></div></pre></td></tr></table></figure>
<p>参考文档<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">MDN web docs</a><br><a href="http://es6.ruanyifeng.com/#docs/object#Object-keys，Object-values，Object-entries" target="_blank" rel="external">阮一峰ES6语法</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中Object.create的使用方法]]></title>
      <url>/2017/10/10/JS%E4%B8%ADObject-defineProperty%E4%B8%8EObject-create%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%952/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>一直好奇JS中Object上静态方法的使用方式，上网找了不少教程，今天在这里和大家分享一下 <code>Object.create</code>的使用方法 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、Object-create"><a href="#一、Object-create" class="headerlink" title="一、Object.create"></a>一、Object.create</h3><p>1、<code>Object.create()</code> 方法会使用指定的原型对象及其属性去创建一个新的对象，语法如下：</p>
<blockquote>
<p>Object.create(proto, [ propertiesObject ])</p>
</blockquote>
<p>其中：</p>
<blockquote>
<ul>
<li><code>proto</code>一个对象，新创建对象的原型</li>
<li><code>propertiesObject</code>可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与<code>Object.defineProperties()</code>的第二个参数一样）。</li>
<li>函数将返回一个定原型对象上添加新属性后的新对象</li>
<li>如果 <code>propertiesObject</code> 参数不是 <code>null</code> 也不是对象，则抛出一个 <code>TypeError</code> 异常。</li>
</ul>
</blockquote>
<p>2、一些例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">v</span>:<span class="number">41</span>&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.create(a)</div><div class="line">b.__proto__ === a <span class="comment">//true </span></div><div class="line"><span class="comment">//Object.create返回的对象的原型是其第一个参数。</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">o = &#123;&#125;;</div><div class="line"><span class="comment">// 以字面量方式创建的空对象就相当于:</span></div><div class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</div><div class="line">  <span class="comment">// foo会成为所创建对象的数据属性</span></div><div class="line">  foo: &#123; </div><div class="line">    writable:<span class="literal">true</span>,</div><div class="line">    configurable:<span class="literal">true</span>,</div><div class="line">    value: <span class="string">"hello"</span> </div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// bar会成为所创建对象的访问器属性</span></div><div class="line">  bar: &#123;</div><div class="line">    configurable: <span class="literal">false</span>,</div><div class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">10</span> &#125;,</div><div class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Setting `o.bar` to"</span>, value);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个以另一个空对象为原型,且拥有一个属性p的对象</span></div><div class="line">o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span> &#125; &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:</span></div><div class="line">o.p = <span class="number">24</span></div><div class="line">o.p <span class="comment">//42</span></div><div class="line"></div><div class="line">o.q = <span class="number">12</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;  <span class="comment">//for..in..不可枚举</span></div><div class="line">   <span class="built_in">console</span>.log(prop)</div><div class="line">&#125;</div><div class="line"><span class="comment">//"q"</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> o.p <span class="comment">// Nothing happens</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个可写的,可枚举的,可配置的属性p</span></div><div class="line">o2 = <span class="built_in">Object</span>.create(&#123;&#125;, &#123;</div><div class="line">  p: &#123;</div><div class="line">    value: <span class="number">42</span>, </div><div class="line">    writable: <span class="literal">true</span>,</div><div class="line">    enumerable: <span class="literal">true</span>,</div><div class="line">    configurable: <span class="literal">true</span> </div><div class="line">  &#125; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>3、使用 <code>Object.create</code> 实现类式继承,参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Shape - superclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.y = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x += x;</div><div class="line">    <span class="keyword">this</span>.y += y;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"Shape moved."</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Rectangle - subclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">//call super constructor.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// subclass extends superclass</span></div><div class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</div><div class="line">Rectangle.prototype.constructor = Rectangle;</div><div class="line"></div><div class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Is rect an instance of Rectangle?'</span>,</div><div class="line">  rect <span class="keyword">instanceof</span> Rectangle); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Is rect an instance of Shape?'</span>,</div><div class="line">  rect <span class="keyword">instanceof</span> Shape); <span class="comment">// true</span></div><div class="line"></div><div class="line">rect.move(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">//Outputs, "Shape moved."</span></div></pre></td></tr></table></figure>
<p>如果有兴趣了解用其他方式实现类继承，可以参考我的这篇博客<a href="http://www.wangyulue.com/2017/09/18/%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B%E9%93%BE/#more" target="_blank" rel="external">理解原型链</a>;</p>
<p>参考文档<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">MDN web docs</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中Object.defineProperty的使用方法]]></title>
      <url>/2017/10/10/JS%E4%B8%ADObject-defineProperty%E4%B8%8EObject-create%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>一直好奇JS中Object上静态方法的使用方式，上网找了不少教程，今天在这里和大家分享一下 <code>Object.defineProperty</code>的使用方法 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、Object-defineProperty"><a href="#一、Object-defineProperty" class="headerlink" title="一、Object.defineProperty"></a>一、Object.defineProperty</h3><p>1、<code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象，语法如下：</p>
<blockquote>
<p>Object.defineProperty(obj, prop, descriptor)</p>
</blockquote>
<p>其中：</p>
<blockquote>
<ul>
<li><code>obj</code>是需要被操作的目标对象</li>
<li><code>prop</code>是目标对象需要定义或修改的属性的名称</li>
<li><code>descriptor</code>是将被定义或修改的属性的描述符</li>
<li>函数将返回被传递给函数的对象</li>
</ul>
</blockquote>
<p>2、一个简单的实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">value</span> : <span class="number">37</span>&#125;);  <span class="comment">//&#123;a: 37&#125;</span></div></pre></td></tr></table></figure>
<p>上述代码中，我们用<code>Object.defineProperty</code>为对象o创建的了一个新属性a,它的值为37，但是我们也发现了一些问题，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">value</span> : <span class="number">37</span>&#125;);  <span class="comment">//&#123;a: 37&#125;</span></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 打印 37</span></div><div class="line">o.a = <span class="number">25</span>; <span class="comment">// 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）</span></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 打印 37， 赋值不起作用。</span></div></pre></td></tr></table></figure>
<p>我们发现，对o.a赋值似乎不起作用，原来<code>Object.defineProperty</code>的第三个参数<code>descriptor</code>有很多属性描述符，其中就有<strong>是否能被赋值运算符改变value</strong>的属性描述符。</p>
<p>3、具体的属性描述符如下：</p>
<blockquote>
<ul>
<li><code>configurable</code> 当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。<strong>默认为 false</strong>。</li>
<li><code>enumerable</code> 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中<strong>(可以被for..in..遍历)</strong>。<strong>默认为 false</strong>。</li>
<li><code>value</code> 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。<strong>默认为 undefined</strong>。</li>
<li><code>writable</code> 当且仅当该属性的 writable 为 true 时，该属性才能被赋值运算符改变。<strong>默认为 false</strong>。</li>
<li><code>get</code> 一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。<strong>默认为 undefined</strong>。</li>
<li><code>set</code> 一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。<strong>默认为 undefined</strong>。</li>
</ul>
</blockquote>
<p>4、这时候我们改造一下代码，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;</div><div class="line">    value : <span class="number">37</span>,</div><div class="line">    writable : <span class="literal">true</span>,</div><div class="line">    enumerable : <span class="literal">true</span>,</div><div class="line">    configurable : <span class="literal">true</span></div><div class="line">&#125;);  <span class="comment">//&#123;a: 37&#125;</span></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 打印 37</span></div><div class="line">o.a = <span class="number">25</span>;</div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 打印 25</span></div></pre></td></tr></table></figure>
<p>这样的话我们就可以正确地为属性赋值了。</p>
<p>5、需要注意的是，对象里目前存在的属性描述符有两种主要形式：<strong>数据描述符</strong>和<strong>存取描述符</strong>。数据描述符是一个拥有可写或不可写值的属性。存取描述符是由一对 getter-setter 函数功能来描述的属性。<strong>描述符必须是两种形式之一；不能同时是两者。</strong><br>其中，数据描述符和存取描述符均具有以下可选键值：<code>configurable</code>，<code>enumerable</code>，<code>value</code>，<code>writable</code><br>存取描述符同时具有以下可选键值：<code>get</code>，<code>set</code>。</p>
<p>如果两者同时使用，会报如下错误：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"conflict"</span>, &#123;</div><div class="line">  value: <span class="number">0x9f91102</span>, </div><div class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="number">0xdeadbeef</span>; </div><div class="line">  &#125; </div><div class="line">&#125;);</div><div class="line"><span class="comment">//Uncaught TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute</span></div></pre></td></tr></table></figure>
<p>6、在这里，我们需要特别注意 <code>configurable</code> 这个属性描述符，如果它的值为<code>false</code>，那么除了 <code>writable</code> 外，其他特性都不能被修改(包括其自身)，并且 <code>writable</code> 只能从 <code>true</code> 修改为 <code>false</code>，而且数据和存取描述符也不能相互切换。</p>
<p>如果尝试修改，会报如下错误：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123; </div><div class="line">    get : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;, </div><div class="line">    configurable : <span class="literal">false</span> </div><div class="line">&#125;);</div><div class="line"><span class="comment">// throws a TypeError</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">configurable</span> : <span class="literal">true</span>&#125;); </div><div class="line"><span class="comment">// throws a TypeError</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">enumerable</span> : <span class="literal">true</span>&#125;); </div><div class="line"><span class="comment">// throws a TypeError (set was undefined previously) </span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">set</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;); </div><div class="line"><span class="comment">// throws a TypeError (even though the new get does exactly the same thing) </span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">get</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;&#125;);</div><div class="line"><span class="comment">// throws a TypeError</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">value</span> : <span class="number">12</span>&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// logs 1</span></div><div class="line"><span class="keyword">delete</span> o.a; <span class="comment">// Nothing happens</span></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// logs 1</span></div></pre></td></tr></table></figure>
<p>7、最后，我们又要留意一下存取描述符<code>set</code>与<code>get</code>，vuejs的底层就是通过<code>set</code>与<code>get</code>监听数据变动来实现mvvm的双向绑定的，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 取出所有属性遍历</span></div><div class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">        defineReactive(data, key, data[key]);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</div><div class="line">    observe(val); <span class="comment">// 监听子属性</span></div><div class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</div><div class="line">        enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></div><div class="line">        configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></div><div class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> val;</div><div class="line">        &#125;,</div><div class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</div><div class="line">            val = newVal;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="string">'10'</span>,<span class="attr">b</span>:<span class="string">'20'</span>&#125;</div><div class="line">observe(obj)</div><div class="line">obj.a <span class="comment">// '10'</span></div><div class="line">obj.a = <span class="string">'100'</span> </div><div class="line"><span class="comment">// 哈哈哈，监听到值变化了  10  --&gt;  100</span></div><div class="line"><span class="comment">// '100'</span></div></pre></td></tr></table></figure>
<p>参考文档<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">MDN web docs</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让input里面placeholder水平居中]]></title>
      <url>/2017/10/10/%E8%AE%A9input%E9%87%8C%E9%9D%A2placeholder%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候我们想让input里面placeholder水平居中，这个时候我们可以这样做 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        input&#123;</span></div><div class="line"><span class="undefined">            width: 200px;</span></div><div class="line"><span class="undefined">            height: 30px;</span></div><div class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#333</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">::-ms-input-placeholder</span>&#123;<span class="attribute">text-align</span>: center;&#125;</span></div><div class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span>&#123;<span class="attribute">text-align</span>: center;&#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>参考文章：<br><a href="https://www.zhihu.com/question/29414807/answer/44338831" target="_blank" rel="external">知乎问题“如何让input里面placeholder水平居中？”</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端备忘 </tag>
            
            <tag> 转载 </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器原生API实现Base64编码转换]]></title>
      <url>/2017/10/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%94%9FAPI%E5%AE%9E%E7%8E%B0Base64%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近发现浏览器的两个原生API <code>atob()</code>、<code>btoa()</code> 可以实现编码转换 </p>
</blockquote>
<a id="more"></a>
<p>1、代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">btoa(<span class="string">"hello world"</span>); <span class="comment">// "aGVsbG8gd29ybGQ="</span></div><div class="line">atob(<span class="string">"aGVsbG8gd29ybGQ="</span>); <span class="comment">// "hello world"</span></div></pre></td></tr></table></figure></p>
<hr>
<p>2017-11-01添加</p>
<p>如果转换的字符串中有中文的话，编码转换会失败，这时候就需要<code>window.encodeURIComponent</code>和<code>window.decodeURIComponent</code>的帮助了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"China，中国"</span>;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.btoa(<span class="built_in">window</span>.encodeURIComponent(str))</div><div class="line"><span class="comment">//"Q2hpbmElRUYlQkMlOEMlRTQlQjglQUQlRTUlOUIlQkQ="</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.decodeURIComponent(<span class="built_in">window</span>.atob(<span class="string">'Q2hpbmElRUYlQkMlOEMlRTQlQjglQUQlRTUlOUIlQkQ='</span>))</div><div class="line"><span class="comment">//"China，中国"</span></div></pre></td></tr></table></figure>
<hr>
<p>2、再科（bai）普(du) 一下base64的编码原理：</p>
<blockquote>
<p>转码过程例子：<br>3<em>8=4</em>6<br>内存1个字节占8位<br>转前： s 1 3<br>先转成ascii：对应 115 49 51<br>2进制： 01110011 00110001 00110011<br>6个一组（4组） 011100110011000100110011<br>然后才有后面的 011100 110011 000100 110011<br>然后计算机是8位8位的存数 6不够，自动就补两个高位0了<br>所有有了 高位补0<br>科学计算器输入 00011100 00110011 00000100 00110011<br>得到 28 51 4 51<br>查对下照表 c z E z</p>
</blockquote>
<p>3、如果好奇<code>atob()</code>与<code>btoa()</code>的具体实现，可参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *  Licensed under the BSD 3-Clause License.</span></div><div class="line"><span class="comment"> *    http://opensource.org/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *  References:</span></div><div class="line"><span class="comment"> *    http://en.wikipedia.org/wiki/Base64</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line">    <span class="comment">// existing version for noConflict()</span></div><div class="line">    <span class="keyword">var</span> _Base64 = global.Base64;</div><div class="line">    <span class="keyword">var</span> version = <span class="string">"2.3.2"</span>;</div><div class="line">    <span class="comment">// if node.js, we use Buffer</span></div><div class="line">    <span class="keyword">var</span> buffer;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            buffer = <span class="built_in">require</span>(<span class="string">'buffer'</span>).Buffer;</div><div class="line">        &#125; <span class="keyword">catch</span> (err) &#123;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// constants</span></div><div class="line">    <span class="keyword">var</span> b64chars</div><div class="line">        = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>;</div><div class="line">    <span class="keyword">var</span> b64tab = <span class="function"><span class="keyword">function</span>(<span class="params">bin</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> t = &#123;&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = bin.length; i &lt; l; i++) t[bin.charAt(i)] = i;</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;(b64chars);</div><div class="line">    <span class="keyword">var</span> fromCharCode = <span class="built_in">String</span>.fromCharCode;</div><div class="line">    <span class="comment">// encoder stuff</span></div><div class="line">    <span class="keyword">var</span> cb_utob = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (c.length &lt; <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">var</span> cc = c.charCodeAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> cc &lt; <span class="number">0x80</span> ? c</div><div class="line">                : cc &lt; <span class="number">0x800</span> ? (fromCharCode(<span class="number">0xc0</span> | (cc &gt;&gt;&gt; <span class="number">6</span>))</div><div class="line">                                + fromCharCode(<span class="number">0x80</span> | (cc &amp; <span class="number">0x3f</span>)))</div><div class="line">                : (fromCharCode(<span class="number">0xe0</span> | ((cc &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0f</span>))</div><div class="line">                   + fromCharCode(<span class="number">0x80</span> | ((cc &gt;&gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x3f</span>))</div><div class="line">                   + fromCharCode(<span class="number">0x80</span> | ( cc         &amp; <span class="number">0x3f</span>)));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> cc = <span class="number">0x10000</span></div><div class="line">                + (c.charCodeAt(<span class="number">0</span>) - <span class="number">0xD800</span>) * <span class="number">0x400</span></div><div class="line">                + (c.charCodeAt(<span class="number">1</span>) - <span class="number">0xDC00</span>);</div><div class="line">            <span class="keyword">return</span> (fromCharCode(<span class="number">0xf0</span> | ((cc &gt;&gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x07</span>))</div><div class="line">                    + fromCharCode(<span class="number">0x80</span> | ((cc &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3f</span>))</div><div class="line">                    + fromCharCode(<span class="number">0x80</span> | ((cc &gt;&gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x3f</span>))</div><div class="line">                    + fromCharCode(<span class="number">0x80</span> | ( cc         &amp; <span class="number">0x3f</span>)));</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> re_utob = <span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g</span>;</div><div class="line">    <span class="keyword">var</span> utob = <span class="function"><span class="keyword">function</span>(<span class="params">u</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> u.replace(re_utob, cb_utob);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> cb_encode = <span class="function"><span class="keyword">function</span>(<span class="params">ccc</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> padlen = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>][ccc.length % <span class="number">3</span>],</div><div class="line">        ord = ccc.charCodeAt(<span class="number">0</span>) &lt;&lt; <span class="number">16</span></div><div class="line">            | ((ccc.length &gt; <span class="number">1</span> ? ccc.charCodeAt(<span class="number">1</span>) : <span class="number">0</span>) &lt;&lt; <span class="number">8</span>)</div><div class="line">            | ((ccc.length &gt; <span class="number">2</span> ? ccc.charCodeAt(<span class="number">2</span>) : <span class="number">0</span>)),</div><div class="line">        chars = [</div><div class="line">            b64chars.charAt( ord &gt;&gt;&gt; <span class="number">18</span>),</div><div class="line">            b64chars.charAt((ord &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">63</span>),</div><div class="line">            padlen &gt;= <span class="number">2</span> ? <span class="string">'='</span> : b64chars.charAt((ord &gt;&gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>),</div><div class="line">            padlen &gt;= <span class="number">1</span> ? <span class="string">'='</span> : b64chars.charAt(ord &amp; <span class="number">63</span>)</div><div class="line">        ];</div><div class="line">        <span class="keyword">return</span> chars.join(<span class="string">''</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> btoa = global.btoa ? <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> global.btoa(b);</div><div class="line">    &#125; : <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> b.replace(<span class="regexp">/[\s\S]&#123;1,3&#125;/g</span>, cb_encode);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> _encode = buffer ?</div><div class="line">        buffer.from &amp;&amp; buffer.from !== <span class="built_in">Uint8Array</span>.from ? <span class="function"><span class="keyword">function</span> (<span class="params">u</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (u.constructor === buffer.constructor ? u : buffer.from(u))</div><div class="line">                .toString(<span class="string">'base64'</span>)</div><div class="line">        &#125;</div><div class="line">        :  <span class="function"><span class="keyword">function</span> (<span class="params">u</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (u.constructor === buffer.constructor ? u : <span class="keyword">new</span>  buffer(u))</div><div class="line">                .toString(<span class="string">'base64'</span>)</div><div class="line">        &#125;</div><div class="line">        : <span class="function"><span class="keyword">function</span> (<span class="params">u</span>) </span>&#123; <span class="keyword">return</span> btoa(utob(u)) &#125;</div><div class="line">    ;</div><div class="line">    <span class="keyword">var</span> encode = <span class="function"><span class="keyword">function</span>(<span class="params">u, urisafe</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> !urisafe</div><div class="line">            ? _encode(<span class="built_in">String</span>(u))</div><div class="line">            : _encode(<span class="built_in">String</span>(u)).replace(<span class="regexp">/[+\/]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m0</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> m0 == <span class="string">'+'</span> ? <span class="string">'-'</span> : <span class="string">'_'</span>;</div><div class="line">            &#125;).replace(<span class="regexp">/=/g</span>, <span class="string">''</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">encodeURI</span> = <span class="function"><span class="keyword">function</span>(<span class="params">u</span>) </span>&#123; <span class="keyword">return</span> encode(u, <span class="literal">true</span>) &#125;;</div><div class="line">    <span class="comment">// decoder stuff</span></div><div class="line">    <span class="keyword">var</span> re_btou = <span class="keyword">new</span> <span class="built_in">RegExp</span>([</div><div class="line">        <span class="string">'[\xC0-\xDF][\x80-\xBF]'</span>,</div><div class="line">        <span class="string">'[\xE0-\xEF][\x80-\xBF]&#123;2&#125;'</span>,</div><div class="line">        <span class="string">'[\xF0-\xF7][\x80-\xBF]&#123;3&#125;'</span></div><div class="line">    ].join(<span class="string">'|'</span>), <span class="string">'g'</span>);</div><div class="line">    <span class="keyword">var</span> cb_btou = <span class="function"><span class="keyword">function</span>(<span class="params">cccc</span>) </span>&#123;</div><div class="line">        <span class="keyword">switch</span>(cccc.length) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">            <span class="keyword">var</span> cp = ((<span class="number">0x07</span> &amp; cccc.charCodeAt(<span class="number">0</span>)) &lt;&lt; <span class="number">18</span>)</div><div class="line">                |    ((<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">1</span>)) &lt;&lt; <span class="number">12</span>)</div><div class="line">                |    ((<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">2</span>)) &lt;&lt;  <span class="number">6</span>)</div><div class="line">                |     (<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">3</span>)),</div><div class="line">            offset = cp - <span class="number">0x10000</span>;</div><div class="line">            <span class="keyword">return</span> (fromCharCode((offset  &gt;&gt;&gt; <span class="number">10</span>) + <span class="number">0xD800</span>)</div><div class="line">                    + fromCharCode((offset &amp; <span class="number">0x3FF</span>) + <span class="number">0xDC00</span>));</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            <span class="keyword">return</span> fromCharCode(</div><div class="line">                ((<span class="number">0x0f</span> &amp; cccc.charCodeAt(<span class="number">0</span>)) &lt;&lt; <span class="number">12</span>)</div><div class="line">                    | ((<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">1</span>)) &lt;&lt; <span class="number">6</span>)</div><div class="line">                    |  (<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">2</span>))</div><div class="line">            );</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span>  fromCharCode(</div><div class="line">                ((<span class="number">0x1f</span> &amp; cccc.charCodeAt(<span class="number">0</span>)) &lt;&lt; <span class="number">6</span>)</div><div class="line">                    |  (<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">1</span>))</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> btou = <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> b.replace(re_btou, cb_btou);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> cb_decode = <span class="function"><span class="keyword">function</span>(<span class="params">cccc</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> len = cccc.length,</div><div class="line">        padlen = len % <span class="number">4</span>,</div><div class="line">        n = (len &gt; <span class="number">0</span> ? b64tab[cccc.charAt(<span class="number">0</span>)] &lt;&lt; <span class="number">18</span> : <span class="number">0</span>)</div><div class="line">            | (len &gt; <span class="number">1</span> ? b64tab[cccc.charAt(<span class="number">1</span>)] &lt;&lt; <span class="number">12</span> : <span class="number">0</span>)</div><div class="line">            | (len &gt; <span class="number">2</span> ? b64tab[cccc.charAt(<span class="number">2</span>)] &lt;&lt;  <span class="number">6</span> : <span class="number">0</span>)</div><div class="line">            | (len &gt; <span class="number">3</span> ? b64tab[cccc.charAt(<span class="number">3</span>)]       : <span class="number">0</span>),</div><div class="line">        chars = [</div><div class="line">            fromCharCode( n &gt;&gt;&gt; <span class="number">16</span>),</div><div class="line">            fromCharCode((n &gt;&gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>),</div><div class="line">            fromCharCode( n         &amp; <span class="number">0xff</span>)</div><div class="line">        ];</div><div class="line">        chars.length -= [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>][padlen];</div><div class="line">        <span class="keyword">return</span> chars.join(<span class="string">''</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> atob = global.atob ? <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> global.atob(a);</div><div class="line">    &#125; : <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a.replace(<span class="regexp">/[\s\S]&#123;1,4&#125;/g</span>, cb_decode);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> _decode = buffer ?</div><div class="line">        buffer.from &amp;&amp; buffer.from !== <span class="built_in">Uint8Array</span>.from ? <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (a.constructor === buffer.constructor</div><div class="line">                    ? a : buffer.from(a, <span class="string">'base64'</span>)).toString();</div><div class="line">        &#125;</div><div class="line">        : <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (a.constructor === buffer.constructor</div><div class="line">                    ? a : <span class="keyword">new</span> buffer(a, <span class="string">'base64'</span>)).toString();</div><div class="line">        &#125;</div><div class="line">        : <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> btou(atob(a)) &#125;;</div><div class="line">    <span class="keyword">var</span> decode = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> _decode(</div><div class="line">            <span class="built_in">String</span>(a).replace(<span class="regexp">/[-_]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m0</span>) </span>&#123; <span class="keyword">return</span> m0 == <span class="string">'-'</span> ? <span class="string">'+'</span> : <span class="string">'/'</span> &#125;)</div><div class="line">                .replace(<span class="regexp">/[^A-Za-z0-9\+\/]/g</span>, <span class="string">''</span>)</div><div class="line">        );</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> Base64 = global.Base64;</div><div class="line">        global.Base64 = _Base64;</div><div class="line">        <span class="keyword">return</span> Base64;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// export Base64</span></div><div class="line">    global.Base64 = &#123;</div><div class="line">        VERSION: version,</div><div class="line">        atob: atob,</div><div class="line">        btoa: btoa,</div><div class="line">        fromBase64: decode,</div><div class="line">        toBase64: encode,</div><div class="line">        utob: utob,</div><div class="line">        encode: encode,</div><div class="line">        <span class="built_in">encodeURI</span>: <span class="built_in">encodeURI</span>,</div><div class="line">        btou: btou,</div><div class="line">        decode: decode,</div><div class="line">        noConflict: noConflict</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// if ES5 is available, make Base64.extendString() available</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.defineProperty === <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">var</span> noEnum = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;<span class="attr">value</span>:v,<span class="attr">enumerable</span>:<span class="literal">false</span>,<span class="attr">writable</span>:<span class="literal">true</span>,<span class="attr">configurable</span>:<span class="literal">true</span>&#125;;</div><div class="line">        &#125;;</div><div class="line">        global.Base64.extendString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">Object</span>.defineProperty(</div><div class="line">                <span class="built_in">String</span>.prototype, <span class="string">'fromBase64'</span>, noEnum(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> decode(<span class="keyword">this</span>)</div><div class="line">                &#125;));</div><div class="line">            <span class="built_in">Object</span>.defineProperty(</div><div class="line">                <span class="built_in">String</span>.prototype, <span class="string">'toBase64'</span>, noEnum(<span class="function"><span class="keyword">function</span> (<span class="params">urisafe</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> encode(<span class="keyword">this</span>, urisafe)</div><div class="line">                &#125;));</div><div class="line">            <span class="built_in">Object</span>.defineProperty(</div><div class="line">                <span class="built_in">String</span>.prototype, <span class="string">'toBase64URI'</span>, noEnum(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> encode(<span class="keyword">this</span>, <span class="literal">true</span>)</div><div class="line">                &#125;));</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// export Base64 to the namespace</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">if</span> (global[<span class="string">'Meteor'</span>]) &#123; <span class="comment">// Meteor.js</span></div><div class="line">        Base64 = global.Base64;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// module.exports and AMD are mutually exclusive.</span></div><div class="line">    <span class="comment">// module.exports has precedence.</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</div><div class="line">        <span class="built_in">module</span>.exports.Base64 = global.Base64;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;		</div><div class="line">        <span class="comment">// AMD. Register as an anonymous module.	</span></div><div class="line">        define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> global.Base64 &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// that's it!</span></div><div class="line">&#125;)(   <span class="keyword">typeof</span> self   !== <span class="string">'undefined'</span> ? self</div><div class="line">    : <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> ? <span class="built_in">window</span></div><div class="line">    : <span class="keyword">typeof</span> global !== <span class="string">'undefined'</span> ? global</div><div class="line">    : <span class="keyword">this</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>以上代码是GitHub上<code>js-base64</code>的开源代码，感兴趣的同学可以<a href="https://github.com/dankogai/js-base64" target="_blank" rel="external">戳这里</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS格式化日期函数]]></title>
      <url>/2017/10/01/JS%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在JAVA中用<code>SimpleDateFormat</code>对象可以格式化日期，<code>JS</code>中没有原生方法，这个时候可以考虑自己写一个 </p>
</blockquote>
<a id="more"></a>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  对Date的扩展，将 Date 转化为指定格式的String</span></div><div class="line"><span class="comment">     月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， </span></div><div class="line"><span class="comment">     年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) </span></div><div class="line"><span class="comment">     例子： </span></div><div class="line"><span class="comment"> *   (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==&gt; 2006-07-02 08:09:04.423 </span></div><div class="line"><span class="comment"> *   (new Date()).Format("yyyy-M-d h:m:s.S")      ==&gt; 2006-7-2 8:9:4.18 </span></div><div class="line"><span class="comment"> *   Date.prototype.Format = function (fmt) &#123; //author: meizz </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="built_in">Date</span>.prototype.parse=<span class="function"><span class="keyword">function</span>(<span class="params">fmt</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = &#123;</div><div class="line">        <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//月份 </span></div><div class="line">        <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//日 </span></div><div class="line">        <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//小时 </span></div><div class="line">        <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//分 </span></div><div class="line">        <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒 </span></div><div class="line">        <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度 </span></div><div class="line">        <span class="string">"S"</span>: <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒 </span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o)</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</div><div class="line">    <span class="keyword">return</span> fmt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一种写法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  对Date的扩展，将 Date 转化为指定格式的String * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)</span></div><div class="line"><span class="comment">     可以用 1-2 个占位符 * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) </span></div><div class="line"><span class="comment">     例子： </span></div><div class="line"><span class="comment"> *   (new Date()).pattern("yyyy-MM-dd hh:mm:ss.S")==&gt; 2006-07-02 08:09:04.423      </span></div><div class="line"><span class="comment"> *   (new Date()).pattern("yyyy-MM-dd E HH:mm:ss") ==&gt; 2009-03-10 二 20:09:04      </span></div><div class="line"><span class="comment"> *   (new Date()).pattern("yyyy-MM-dd EE hh:mm:ss") ==&gt; 2009-03-10 周二 08:09:04      </span></div><div class="line"><span class="comment"> *   (new Date()).pattern("yyyy-MM-dd EEE hh:mm:ss") ==&gt; 2009-03-10 星期二 08:09:04      </span></div><div class="line"><span class="comment"> *   (new Date()).pattern("yyyy-M-d h:m:s.S") ==&gt; 2006-7-2 8:9:4.18      </span></div><div class="line"><span class="comment"> */</span>        </div><div class="line"><span class="built_in">Date</span>.prototype.pattern=<span class="function"><span class="keyword">function</span>(<span class="params">fmt</span>) </span>&#123;         </div><div class="line">    <span class="keyword">var</span> o = &#123;         </div><div class="line">    <span class="string">"M+"</span> : <span class="keyword">this</span>.getMonth()+<span class="number">1</span>, <span class="comment">//月份         </span></div><div class="line">    <span class="string">"d+"</span> : <span class="keyword">this</span>.getDate(), <span class="comment">//日         </span></div><div class="line">    <span class="string">"h+"</span> : <span class="keyword">this</span>.getHours()%<span class="number">12</span> == <span class="number">0</span> ? <span class="number">12</span> : <span class="keyword">this</span>.getHours()%<span class="number">12</span>, <span class="comment">//小时         </span></div><div class="line">    <span class="string">"H+"</span> : <span class="keyword">this</span>.getHours(), <span class="comment">//小时         </span></div><div class="line">    <span class="string">"m+"</span> : <span class="keyword">this</span>.getMinutes(), <span class="comment">//分         </span></div><div class="line">    <span class="string">"s+"</span> : <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒         </span></div><div class="line">    <span class="string">"q+"</span> : <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth()+<span class="number">3</span>)/<span class="number">3</span>), <span class="comment">//季度         </span></div><div class="line">    <span class="string">"S"</span> : <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒         </span></div><div class="line">    &#125;;         </div><div class="line">    <span class="keyword">var</span> week = &#123;         </div><div class="line">    <span class="string">"0"</span> : <span class="string">"/u65e5"</span>,         </div><div class="line">    <span class="string">"1"</span> : <span class="string">"/u4e00"</span>,         </div><div class="line">    <span class="string">"2"</span> : <span class="string">"/u4e8c"</span>,         </div><div class="line">    <span class="string">"3"</span> : <span class="string">"/u4e09"</span>,         </div><div class="line">    <span class="string">"4"</span> : <span class="string">"/u56db"</span>,         </div><div class="line">    <span class="string">"5"</span> : <span class="string">"/u4e94"</span>,         </div><div class="line">    <span class="string">"6"</span> : <span class="string">"/u516d"</span>        </div><div class="line">    &#125;;         </div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/(y+)/</span>.test(fmt))&#123;         </div><div class="line">        fmt=fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear()+<span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));         </div><div class="line">    &#125;         </div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/(E+)/</span>.test(fmt))&#123;         </div><div class="line">        fmt=fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, ((<span class="built_in">RegExp</span>.$<span class="number">1.</span>length&gt;<span class="number">1</span>) ? (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length&gt;<span class="number">2</span> ? <span class="string">"/u661f/u671f"</span> : <span class="string">"/u5468"</span>) : <span class="string">""</span>)+week[<span class="keyword">this</span>.getDay()+<span class="string">""</span>]);         </div><div class="line">    &#125;         </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o)&#123;         </div><div class="line">        <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span>+ k +<span class="string">")"</span>).test(fmt))&#123;         </div><div class="line">            fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length==<span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span>+ o[k]).substr((<span class="string">""</span>+ o[k]).length)));         </div><div class="line">        &#125;         </div><div class="line">    &#125;         </div><div class="line">    <span class="keyword">return</span> fmt;         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考博客<br><a href="http://www.cnblogs.com/zhangpengshou/archive/2012/07/19/2599053.html" target="_blank" rel="external">‘一路前行’的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
            <tag> 转载 </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAC上如何自由切换python2和python3并正确使用pip]]></title>
      <url>/2017/10/01/MAC%E4%B8%8A%E5%A6%82%E4%BD%95%E8%87%AA%E7%94%B1%E5%88%87%E6%8D%A2python2%E5%92%8Cpython3%E5%B9%B6%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8pip/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>MAC上默认的Python版本是2的版本，这时候怎么才能用上3的语法呢？用pip安装依赖的时候怎么才能根据不同的版本安装不同的依赖库呢？如果你对此也有疑问，或许这篇文章能帮助你 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、下载Python3最新版本"><a href="#一、下载Python3最新版本" class="headerlink" title="一、下载Python3最新版本"></a>一、下载Python3最新版本</h3><p>如果还没有下载<code>python3</code>最新的版本，可以进入<a href="https://www.python.org/" target="_blank" rel="external">python</a>的官网进行下载。</p>
<h3 id="二、正确的使用Python3进行编译"><a href="#二、正确的使用Python3进行编译" class="headerlink" title="二、正确的使用Python3进行编译"></a>二、正确的使用Python3进行编译</h3><p>一开始以为用上Python3需要一些特殊的操作，后来发现自己还是 too young too simple sometimes native，事实上，不需要什么特殊的操作，要用Python2就用<code>Python</code>命令编译，就像下面这样：</p>
<blockquote>
<p>python ./demo.py</p>
</blockquote>
<p>要用Python3就用<code>Python3</code>命令编译，就像下面这样：</p>
<blockquote>
<p>python3 ./demo.py</p>
</blockquote>
<p>就这么简单。</p>
<h3 id="三、安装pip"><a href="#三、安装pip" class="headerlink" title="三、安装pip"></a>三、安装pip</h3><p><code>pip</code>是<code>python</code>的包管理工具，类似<code>node.js</code>中的<code>npm</code>,在MAC中，安装<code>pip</code>很简单，输入如下命令即可安装：</p>
<blockquote>
<p> sudo easy_install pip</p>
</blockquote>
<h3 id="四、在python2和python3上正确的使用pip"><a href="#四、在python2和python3上正确的使用pip" class="headerlink" title="四、在python2和python3上正确的使用pip"></a>四、在python2和python3上正确的使用pip</h3><p>对于 Linux ##</p>
<blockquote>
<p>sudo pip install sth</p>
</blockquote>
<p>或者明确版本</p>
<blockquote>
<p>sudo pip2 install sth<br>sudo pip3 install sth<br>sudo python2 -m pip install sth<br>sudo /path/to/python -m pip install sth</p>
</blockquote>
<p>对于 Windows NT ##<br>如果仅安装 python2</p>
<blockquote>
<p>pip install sth</p>
</blockquote>
<p>如果安装有 python3, 则需要明确 pip 版本</p>
<blockquote>
<p>py -2 -m pip install sth<br>py -3 -m pip install sth</p>
</blockquote>
<p>这一条参考的是知乎上<a href="https://www.zhihu.com/question/21653286" target="_blank" rel="external">同时装了Python3和Python2，怎么用pip？</a>下<code>Johnny Wong</code>的回答,如果还有疑问，可以点进去了解详情。</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IE浏览器跳转报400错误的问题]]></title>
      <url>/2017/09/30/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%B3%E8%BD%AC%E6%8A%A5400%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近开发中，遇到一个问题，在Chrome中可以正常跳转的链接在IE中跳转就会报400错误 </p>
</blockquote>
<p>如果URL的参数中带有中文，那么在IE中，则很有可能会报400错误，这个时候正确的做法是用js自带的encodeURL对URL进行编码，后传到另个一面后再用decodeURL进行解码。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端踩坑 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS转换HTML转义符]]></title>
      <url>/2017/09/30/JS%E8%BD%AC%E6%8D%A2HTML%E8%BD%AC%E4%B9%89%E7%AC%A6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>前两天在公司写代码，在后台请求的数据放到前台时显示错乱，检查后发现如果文本里有<code>&lt;</code>,后面再紧跟字母的话，html就会显示错误，要解决这个问题，可以对文本里的特殊字符进行转义 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、去掉html标签"><a href="#一、去掉html标签" class="headerlink" title="一、去掉html标签"></a>一、去掉html标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHtmlTab</span>(<span class="params">tab</span>) </span>&#123;</div><div class="line"> <span class="keyword">return</span> tab.replace(<span class="regexp">/&lt;[^&lt;&gt;]+?&gt;/g</span>,<span class="string">''</span>);<span class="comment">//删除所有HTML标签</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、普通字符转换成转意符"><a href="#二、普通字符转换成转意符" class="headerlink" title="二、普通字符转换成转意符"></a>二、普通字符转换成转意符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">html2Escape</span>(<span class="params">sHtml</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> sHtml.replace(<span class="regexp">/[&lt;&gt;&amp;"]/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> &#123;<span class="string">'&lt;'</span>:<span class="string">'&amp;lt;'</span>,<span class="string">'&gt;'</span>:<span class="string">'&amp;gt;'</span>,<span class="string">'&amp;'</span>:<span class="string">'&amp;amp;'</span>,<span class="string">'"'</span>:<span class="string">'&amp;quot;'</span>&#125;[c];&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、转意符换成普通字符"><a href="#三、转意符换成普通字符" class="headerlink" title="三、转意符换成普通字符"></a>三、转意符换成普通字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape2Html</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arrEntities=&#123;<span class="string">'lt'</span>:<span class="string">'&lt;'</span>,<span class="string">'gt'</span>:<span class="string">'&gt;'</span>,<span class="string">'nbsp'</span>:<span class="string">' '</span>,<span class="string">'amp'</span>:<span class="string">'&amp;'</span>,<span class="string">'quot'</span>:<span class="string">'"'</span>&#125;;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;(lt|gt|nbsp|amp|quot);/ig</span>,<span class="function"><span class="keyword">function</span>(<span class="params">all,t</span>)</span>&#123;<span class="keyword">return</span> arrEntities[t];&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、-nbsp-转成空格"><a href="#三、-nbsp-转成空格" class="headerlink" title="三、&nbsp;转成空格"></a>三、&nbsp;转成空格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nbsp2Space</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arrEntities = &#123;<span class="string">'nbsp'</span> : <span class="string">' '</span>&#125;;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;(nbsp);/ig</span>, <span class="function"><span class="keyword">function</span>(<span class="params">all, t</span>)</span>&#123;<span class="keyword">return</span> arrEntities[t]&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、回车转为br标签"><a href="#四、回车转为br标签" class="headerlink" title="四、回车转为br标签"></a>四、回车转为br标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">return2Br</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    eturn str.replace(<span class="regexp">/\r?\n/g</span>,<span class="string">"&lt;br /&gt;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="五、去除开头结尾换行-并将连续3次以上换行转换成2次换行"><a href="#五、去除开头结尾换行-并将连续3次以上换行转换成2次换行" class="headerlink" title="五、去除开头结尾换行,并将连续3次以上换行转换成2次换行"></a>五、去除开头结尾换行,并将连续3次以上换行转换成2次换行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trimBr</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    str=str.replace(<span class="regexp">/((\s|&amp;nbsp;)*\r?\n)&#123;3,&#125;/g</span>,<span class="string">"\r\n\r\n"</span>);<span class="comment">//限制最多2次换行</span></div><div class="line">    str=str.replace(<span class="regexp">/^((\s|&amp;nbsp;)*\r?\n)+/g</span>,<span class="string">''</span>);<span class="comment">//清除开头换行</span></div><div class="line">    str=str.replace(<span class="regexp">/((\s|&amp;nbsp;)*\r?\n)+$/g</span>,<span class="string">''</span>);<span class="comment">//清除结尾换行</span></div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="六、将多个连续空格合并成一个空格"><a href="#六、将多个连续空格合并成一个空格" class="headerlink" title="六、将多个连续空格合并成一个空格"></a>六、将多个连续空格合并成一个空格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSpace</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    str=str.replace(<span class="regexp">/(\s|&amp;nbsp;)+/g</span>,<span class="string">' '</span>);</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考博客：<br><a href="www.sjyhome.com/javascript/js-html-escape.html">SJY之家</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
            <tag> 转载 </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js过滤emoji表情符号]]></title>
      <url>/2017/09/30/js%E8%BF%87%E6%BB%A4emoji%E8%A1%A8%E6%83%85%E7%AC%A6%E5%8F%B7/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候，在手机的输入框输入emoji，插入数据库时会报错，这时候有一个解决方案是用js正则把emoji表情给过滤掉 </p>
</blockquote>
<a id="more"></a>
<p>unicode定义的emoji是四个字符，而Mysql的utf8编码最多3个字节，所以数据插不进去。所以数据库会报错：</p>
<blockquote>
<p>SQLException: Incorrect string value</p>
</blockquote>
<p>这时候有三种解决方案：</p>
<blockquote>
<ul>
<li>把emoji直接过滤掉；</li>
<li>将Mysql的编码从utf8转换成utf8mb4;</li>
<li>unicode emoji转义为softbank的emoji;</li>
</ul>
</blockquote>
<p>这次只讨论第一种方案, 以下是正则代码,很简短，只有一行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name = name.replace(<span class="regexp">/\ud83c[\udf00-\udfff]|\ud83d[\udc00-\ude4f]|\ud83d[\ude80-\udeff]/g</span>, <span class="string">""</span>);</div></pre></td></tr></table></figure></p>
<p>参考博客：<br><a href="http://blog.csdn.net/ugg/article/details/44225723" target="_blank" rel="external">“逸学堂”的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[获取随机字符串]]></title>
      <url>/2017/09/29/%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如何获取一段随机字符串？下面的方法或许能帮到你 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   *  Get the a random string</span></div><div class="line"><span class="comment">   *  @param  &#123;integer&#125;  len   length of the random string</span></div><div class="line"><span class="comment">   *  @return &#123;string&#125;</span></div><div class="line"><span class="comment">   */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStrRandom</span>(<span class="params">len</span>) </span>&#123;       <span class="comment">//len为字符串长度</span></div><div class="line">　　<span class="keyword">var</span> len = len || <span class="number">32</span>;</div><div class="line">　　<span class="keyword">var</span> $chars = <span class="string">'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'</span>;    <span class="comment">/****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/</span></div><div class="line">　　<span class="keyword">var</span> maxPos = $chars.length;</div><div class="line">　　<span class="keyword">var</span> pwd = <span class="string">''</span>;</div><div class="line">　　<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">　　　　pwd += $chars.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * maxPos));</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> pwd;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS字符串截取函数slice(),substring(),substr()的区别]]></title>
      <url>/2017/09/28/JS%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96%E5%87%BD%E6%95%B0slice-substring-substr%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在JS中,slice()、substring()、substr()都有截取字符串的作用，那他们有哪些用法上的区别呢？如果你也有疑惑，这篇文章或许能够帮助到你。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、substring"><a href="#一、substring" class="headerlink" title="一、substring()"></a>一、substring()</h3><p><code>substring()</code>方法返回一个索引和另一个索引之间的字符串，语法如下：</p>
<blockquote>
<p>str.substring(indexStart, [indexEnd])</p>
</blockquote>
<p>下面有六点需要注意：</p>
<blockquote>
<ul>
<li>substring()从提取的字符indexStart可达但不包括 indexEnd</li>
<li>如果indexStart 等于indexEnd，substring()返回一个空字符串。</li>
<li>如果indexEnd省略，则将substring()字符提取到字符串的末尾。</li>
<li>如果任一参数小于0或是NaN，它被视为为0。</li>
<li>如果任何一个参数都大于stringName.length，则被视为是stringName.length。</li>
<li>如果indexStart大于indexEnd，那么效果substring()就好像这两个论点被交换了一样； 例如，str.substring(1, 0) == str.substring(0, 1)</li>
</ul>
</blockquote>
<p>以下是一些示例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abcdefghij'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1, 2): '</span>   + str.substring(<span class="number">1</span>, <span class="number">2</span>));   <span class="comment">// '(1, 2): b'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1, 1): '</span>   + str.substring(<span class="number">1</span>, <span class="number">1</span>));   <span class="comment">// '(1, 1): '</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3, 2): '</span>  + str.substring(<span class="number">-3</span>, <span class="number">2</span>));  <span class="comment">// '(-3, 2): ab'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3): '</span>     + str.substring(<span class="number">-3</span>));     <span class="comment">// '(-3): abcdefghij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1): '</span>      + str.substring(<span class="number">1</span>));      <span class="comment">// '(1): bcdefghij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-20, 2): '</span> + str.substring(<span class="number">-20</span>, <span class="number">2</span>)); <span class="comment">// '(-20, 2): ab'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(2, 20): '</span>  + str.substring(<span class="number">2</span>, <span class="number">20</span>));  <span class="comment">// '(2, 20): cdefghij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(20, 2): '</span>  + str.substring(<span class="number">20</span>, <span class="number">2</span>));  <span class="comment">// '(20, 2): cdefghij'</span></div></pre></td></tr></table></figure></p>
<h3 id="二、substr"><a href="#二、substr" class="headerlink" title="二、substr()"></a>二、substr()</h3><p><code>substr()</code>方法返回从指定位置开始的字符串中指定字符数的字符，语法如下：</p>
<blockquote>
<p>str.substr(start, [length])</p>
</blockquote>
<p>下面有四点需要注意：</p>
<blockquote>
<ul>
<li><code>substr()</code>会从<code>start</code>获取长度为<code>length</code>字符（如果截取到字符串的末尾，则会停止截取）。</li>
<li>如果<code>start</code>是正的并且大于或等于字符串的长度，则<code>substr()</code>返回一个空字符串。</li>
<li>若<code>start</code>为负数,则将该值加上字符串长度后再进行计算（如果加上字符串的长度后还是负数，则从0开始截取）。</li>
<li>如果<code>length</code>为0或为负数，<code>substr()</code>返回一个空字符串。如果<code>length</code>省略，则将<code>substr()</code>字符提取到字符串的末尾。</li>
</ul>
</blockquote>
<p>以下是一些示例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abcdefghij'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1, 2): '</span>   + str.substr(<span class="number">1</span>, <span class="number">2</span>));   <span class="comment">// '(1, 2): bc'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3, 2): '</span>  + str.substr(<span class="number">-3</span>, <span class="number">2</span>));  <span class="comment">// '(-3, 2): hi'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3): '</span>     + str.substr(<span class="number">-3</span>));     <span class="comment">// '(-3): hij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1): '</span>      + str.substr(<span class="number">1</span>));      <span class="comment">// '(1): bcdefghij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-20, 2): '</span> + str.substr(<span class="number">-20</span>, <span class="number">2</span>)); <span class="comment">// '(-20, 2): ab'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(20, 2): '</span>  + str.substr(<span class="number">20</span>, <span class="number">2</span>));  <span class="comment">// '(20, 2): '</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>需要注意的是，Microsoft的JScript不支持起始索引的负值。如果要使用此功能，可以使用以下兼容性代码来解决此错误：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// only run when the substr() function is broken</span></div><div class="line"><span class="keyword">if</span> (<span class="string">'ab'</span>.substr(<span class="number">-1</span>) != <span class="string">'b'</span>) &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   *  Get the substring of a string</span></div><div class="line"><span class="comment">   *  @param  &#123;integer&#125;  start   where to start the substring</span></div><div class="line"><span class="comment">   *  @param  &#123;integer&#125;  length  how many characters to return</span></div><div class="line"><span class="comment">   *  @return &#123;string&#125;</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="built_in">String</span>.prototype.substr = <span class="function"><span class="keyword">function</span>(<span class="params">substr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">start, length</span>) </span>&#123;</div><div class="line">      <span class="comment">// call the original method</span></div><div class="line">      <span class="keyword">return</span> substr.call(<span class="keyword">this</span>,</div><div class="line">      	<span class="comment">// did we get a negative start, calculate how much it is from the beginning of the string</span></div><div class="line">        <span class="comment">// adjust the start parameter for negative value</span></div><div class="line">        start &lt; <span class="number">0</span> ? <span class="keyword">this</span>.length + start : start,</div><div class="line">        length)</div><div class="line">    &#125;</div><div class="line">  &#125;(<span class="built_in">String</span>.prototype.substr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、substring-与substr-的主要区别"><a href="#三、substring-与substr-的主要区别" class="headerlink" title="三、substring()与substr()的主要区别"></a>三、substring()与substr()的主要区别</h3><p><code>substring()</code>方法的参数表示起始和结束索引，<code>substr()</code>方法的参数表示起始索引和要包含在生成的字符串中的字符的长度,示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">'Mozilla'</span>;</div><div class="line"><span class="built_in">console</span>.log(text.substring(<span class="number">2</span>,<span class="number">5</span>)); <span class="comment">// =&gt; "zil"</span></div><div class="line"><span class="built_in">console</span>.log(text.substr(<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// =&gt; "zil"</span></div></pre></td></tr></table></figure>
<h3 id="四、slice"><a href="#四、slice" class="headerlink" title="四、slice()"></a>四、slice()</h3><p><code>slice()</code>方法返回一个索引和另一个索引之间的字符串，语法如下：</p>
<blockquote>
<p>str.slice(beginIndex[, endIndex])</p>
</blockquote>
<p>下面有三点需要注意：</p>
<blockquote>
<ul>
<li>若<code>beginIndex</code>为负数,则将该值加上字符串长度后再进行计算（如果加上字符串的长度后还是负数，则从0开始截取）。</li>
<li>如果<code>beginIndex</code>大于或等于字符串的长度，则<code>slice()</code>返回一个空字符串。</li>
<li>如果<code>endIndex</code>省略，则将<code>slice()</code>字符提取到字符串的末尾。如果为负，它被视为<code>strLength + endIndex</code>其中<code>strLength</code>是字符串的长度。</li>
</ul>
</blockquote>
<p>以下是一些示例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abcdefghij'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1, 2): '</span>   + str.slice(<span class="number">1</span>, <span class="number">2</span>));   <span class="comment">// '(1, 2): b'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3, 2): '</span>  + str.slice(<span class="number">-3</span>, <span class="number">2</span>));  <span class="comment">// '(-3, 2): '</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3, 9): '</span>  + str.slice(<span class="number">-3</span>, <span class="number">9</span>));  <span class="comment">// '(-3, 9): hi'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3): '</span>     + str.slice(<span class="number">-3</span>));     <span class="comment">// '(-3): hij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3，-1): '</span> + str.slice(<span class="number">-3</span>，<span class="number">-1</span>));     <span class="comment">// '(-3，-1): hi'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(0，-1): '</span>  + str.slice(<span class="number">0</span>，<span class="number">-1</span>));     <span class="comment">// '(0，-1): abcdefghi'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1): '</span>      + str.slice(<span class="number">1</span>));      <span class="comment">// '(1): bcdefghij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-20, 2): '</span> + str.slice(<span class="number">-20</span>, <span class="number">2</span>)); <span class="comment">// '(-20, 2): ab'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(20): '</span>     + str.slice(<span class="number">20</span>));  <span class="comment">// '(20): '</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(20, 2): '</span>  + str.slice(<span class="number">20</span>, <span class="number">2</span>));  <span class="comment">// '(20, 2): '</span></div></pre></td></tr></table></figure></p>
<p>参考文档<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="external">MDN web docs</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中如何进行对象的深拷贝]]></title>
      <url>/2017/09/21/JS%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在JS中，一般的=号传递的都是对象/数组的引用，并没有真正地拷贝一个对象，那如何进行对象的深度拷贝呢？如果你对此也有疑问，这篇文章或许能够帮助到你。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、对象引用、浅层拷贝与深层拷贝的区别"><a href="#一、对象引用、浅层拷贝与深层拷贝的区别" class="headerlink" title="一、对象引用、浅层拷贝与深层拷贝的区别"></a>一、对象引用、浅层拷贝与深层拷贝的区别</h3><p>js的对象引用传递理解起来很简单，参考如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'wanger'</span>&#125;</div><div class="line"><span class="keyword">var</span> b = a ;</div><div class="line">a===b <span class="comment">// true</span></div><div class="line">b.name = <span class="string">'zhangsan'</span></div><div class="line">a.name <span class="comment">//'zhangan'</span></div></pre></td></tr></table></figure></p>
<p>上述代码中，使用了<code>=</code>进行赋值，于是b指向了a所指向的栈的对象，也就是a与b指向了同一个栈对象，所以在对b.name赋值时，a.name也发生了变化。为了避免上面的情况，可以对对象进行拷贝，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'wanger'</span>&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a)</div><div class="line">a===b <span class="comment">// false</span></div><div class="line">b.name = <span class="string">'zhangsan'</span></div><div class="line">a.name <span class="comment">//'wanger'</span></div></pre></td></tr></table></figure>
<p>上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆，这时候a与b指向的是不同的栈对象，所以对b.name重新复制也不会影响到a.name。<strong>但是如果a.name是一个对象的引用，而不是一个字符串，那么上面的代码也会遇到一些问题</strong>，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:&#123;<span class="attr">firstName</span>:<span class="string">'wang'</span>,<span class="attr">lastName</span>:<span class="string">'er'</span>&#125;&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a)</div><div class="line">a===b <span class="comment">// false</span></div><div class="line">b.name.firstName = <span class="string">'zhang'</span></div><div class="line">a.name.firstName <span class="comment">//'zhang'</span></div></pre></td></tr></table></figure>
<p>b.name.firstName又影响到了a.name.firstName，这是因为Object.assign()方法只是浅层拷贝，a.name是一个栈对象的引用，赋值给b时，b.name也同样是这个栈对象的引用，很多时候，我们不想让这种事情发生，所以我们就需要用到对象的深拷贝。</p>
<h3 id="二、使用JSON-parse（）与JSON-stringify（）对对象进行拷贝"><a href="#二、使用JSON-parse（）与JSON-stringify（）对对象进行拷贝" class="headerlink" title="二、使用JSON.parse（）与JSON.stringify（）对对象进行拷贝"></a>二、使用JSON.parse（）与JSON.stringify（）对对象进行拷贝</h3><p>通常情况下，我们可以使用JSON.parse（）与 JSON.stringify（）实现对象的深克隆，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方法只适用于<strong>纯数据json对象的深度克隆</strong>，因为有些时候，这种方法也有缺陷，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">a</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'hello world'</span>)&#125;,<span class="attr">b</span>:&#123;<span class="attr">c</span>:<span class="number">1</span>&#125;,<span class="attr">c</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="attr">d</span>:<span class="string">"wanger"</span>,<span class="attr">e</span>:<span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="attr">f</span>:<span class="literal">null</span>,<span class="attr">g</span>:<span class="literal">undefined</span>&#125;</div><div class="line"><span class="keyword">var</span> b = clone(a)</div></pre></td></tr></table></figure>
<p>打印如下：<br><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/8.png?raw=true" alt="Alt text"><br>我们发现，上述的方法会忽略值为function以及undefied的字段，而且对date类型的支持也不太友好。</p>
<p>更要紧的是，上述方法只能克隆原始对象自身的值，不能克隆它继承的值，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> wanger = <span class="keyword">new</span> Person(<span class="string">'王二'</span>)</div><div class="line"><span class="keyword">var</span> newwanger = clone(wanger)</div><div class="line">wanger.constructor === Person <span class="comment">// true</span></div><div class="line">newwanger.constructor === <span class="built_in">Object</span> <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>打印如下：<br><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/9.png?raw=true" alt="Alt text"></p>
<p>我们发现，克隆的对象的构造函数已经变成了Object,而原来的对象的构造是Person。</p>
<h3 id="三、目前没有发现bug的对象深拷贝方法"><a href="#三、目前没有发现bug的对象深拷贝方法" class="headerlink" title="三、目前没有发现bug的对象深拷贝方法"></a>三、目前没有发现bug的对象深拷贝方法</h3><p>王二在网上参考了不少文章，方法都不尽完美，于是在前人基础上改造了一下，方法如下，目前没有发现有什么bug：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; </div><div class="line">    <span class="keyword">if</span>(obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span> </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj;</div><div class="line">    <span class="keyword">if</span>(obj.constructor===<span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj); </div><div class="line">    <span class="keyword">var</span> newObj = <span class="keyword">new</span> obj.constructor ();  <span class="comment">//保持继承链</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;   <span class="comment">//不遍历其原型链上的属性</span></div><div class="line">            <span class="keyword">var</span> val = obj[key];</div><div class="line">            newObj[key] = <span class="keyword">typeof</span> val === <span class="string">'object'</span> ? <span class="built_in">arguments</span>.callee(val) : val; <span class="comment">// 使用arguments.callee解除与函数名的耦合</span></div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> newObj;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里有三点需要注意：<br>1、用<code>new obj.constructor ()</code>构造函数新建一个空的对象，而不是使用<code>{}</code>或者<code>[]</code>,这样可以保持原形链的继承；<br>2、用<code>obj.hasOwnProperty(key)</code>来判断属性是否来自原型链上，因为<code>for..in..</code>也会遍历其原型链上的可枚举属性。<br>3、上面的函数用到递归算法，在函数有名字，而且名字以后也不会变的情况下，这样定义没有问题。但问题是这个函数的执行与函数名 factorial 紧紧耦合在了一起。为了消除这种紧密耦合的现象，需要使用 <code>arguments.callee</code>。</p>
<hr>
<p>2017-10-03添加，之前没有考虑正则对象的问题，这里做一下修改：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; </div><div class="line">    <span class="keyword">if</span>(obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span> </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj;</div><div class="line">    <span class="keyword">if</span>(obj.constructor===<span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj); </div><div class="line">    <span class="keyword">if</span>(obj.constructor === <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</div><div class="line">    <span class="keyword">var</span> newObj = <span class="keyword">new</span> obj.constructor ();  <span class="comment">//保持继承链</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;   <span class="comment">//不遍历其原型链上的属性</span></div><div class="line">            <span class="keyword">var</span> val = obj[key];</div><div class="line">            newObj[key] = <span class="keyword">typeof</span> val === <span class="string">'object'</span> ? <span class="built_in">arguments</span>.callee(val) : val; <span class="comment">// 使用arguments.callee解除与函数名的耦合</span></div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> newObj;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中apply、call、bind的用法]]></title>
      <url>/2017/09/20/JS%E4%B8%ADapply%E3%80%81call%E3%80%81bind%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>apply()和call()都是为了改变某个函数运行时的上下文而存在的（就是为了改变函数内部this的指向）,bind()会创建一个新的函数, 当被调用时，将其this关键字设置为提供的值 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、了解apply-的作用"><a href="#一、了解apply-的作用" class="headerlink" title="一、了解apply()的作用"></a>一、了解apply()的作用</h3><p>1、先来一个实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wanger = &#123;</div><div class="line">    name: <span class="string">'王二'</span>,</div><div class="line">    birth: <span class="number">1995</span>,</div><div class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">        <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">wanger.age(); <span class="comment">// 17年调用是22,18年调用就变成23了</span></div></pre></td></tr></table></figure></p>
<p>上面的对象定义了一个wanger对象，里面有个age方法，当调用age方法时，就可以得到王二的年龄；<br>这时候，下面又来了一个张三:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> zhangsan = &#123;</div><div class="line">    name: <span class="string">'张三'</span>,</div><div class="line">    birth: <span class="number">1992</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>他没有age方法，但他也想知道自己的年龄，那该怎么办呢？<br>或许我们可以借用王二的age方法来帮助张三知道自己的年龄，这时候，apply()就能帮到我们：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wanger.age.apply(zhangsan); <span class="comment">//17年调用是25,18年调用就变成26了</span></div></pre></td></tr></table></figure></p>
<p>上面apply()中的zhangsan成功地调用到了wanger的age方法。</p>
<p>在MDN中，是这么解释apply方法的：</p>
<blockquote>
<p>在调用一个存在的函数时，你可以为其指定一个 <code>this</code> 对象。 <code>this</code> 指当前对象，也就是正在调用这个函数的对象。 使用 <code>apply</code>， 你可以只写一次这个方法然后在另一个对象中继承它，而不用在新对象中重复写该方法。</p>
</blockquote>
<h3 id="二、apply-与call-的区别"><a href="#二、apply-与call-的区别" class="headerlink" title="二、apply()与call()的区别"></a>二、apply()与call()的区别</h3><blockquote>
<p>call()方法的作用和apply()方法类似，只有一个区别，就是call()方法接受的是若干个<strong>参数的列表</strong>，而apply()方法接受的是一个包含多个<strong>参数的数组</strong></p>
</blockquote>
<p>王二和张三要获得期末考试语文和数学加起来的成绩，如下代码所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wanger = &#123;</div><div class="line">    name: <span class="string">'王二'</span>,</div><div class="line">    score: <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> x+y ;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> zhangsan = &#123;</div><div class="line">    name: <span class="string">'张三'</span>,</div><div class="line">&#125;;</div><div class="line">wanger.score.apply(zhangsan,[<span class="number">100</span>,<span class="number">98</span>]);  <span class="comment">//198</span></div><div class="line">wanger.score.call(zhangsan,<span class="number">100</span>,<span class="number">98</span>);  <span class="comment">//198</span></div></pre></td></tr></table></figure></p>
<p>以上两种方法都能获得张三的成绩；</p>
<p>两个方法用途差不多，为什么还要分成两个方法呢？还有那个谁，对，apply,还要放个数组进去，累不累啊？</p>
<p>但是设计者这样设计是有用途的，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wanger = &#123;</div><div class="line">    name: <span class="string">'王二'</span>,</div><div class="line">    score: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> [...arguments].reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y) ; <span class="comment">//获得传入成绩的总和</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> zhangsan = &#123;</div><div class="line">    name: <span class="string">'张三'</span>,</div><div class="line">&#125;;</div><div class="line">wanger.score.apply(zhangsan,[<span class="number">100</span>,<span class="number">98</span>,<span class="number">95</span>]);  <span class="comment">//293</span></div><div class="line">wanger.score.call(zhangsan,<span class="number">100</span>,<span class="number">98</span>,<span class="number">95</span>);  <span class="comment">//293</span></div><div class="line"></div><div class="line">wanger.score.apply(zhangsan,[<span class="number">100</span>,<span class="number">98</span>,<span class="number">95</span>,<span class="number">96</span>]);  <span class="comment">//389</span></div><div class="line">wanger.score.call(zhangsan,<span class="number">100</span>,<span class="number">98</span>,<span class="number">95</span>,<span class="number">96</span>);  <span class="comment">//389</span></div></pre></td></tr></table></figure>
<blockquote>
<p>当传入的的参数的值不固定时，call()的灵活性就明显不如apply()了，apply()只要传一个数组就搞定了。</p>
</blockquote>
<h3 id="三、bind-是干什么用的"><a href="#三、bind-是干什么用的" class="headerlink" title="三、bind()是干什么用的"></a>三、bind()是干什么用的</h3><p>在MDN中，是这么解释bind方法的：</p>
<blockquote>
<p>bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值</p>
</blockquote>
<p>可以参考如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wanger = &#123;</div><div class="line">    name: <span class="string">'王二'</span>,</div><div class="line">    birth: <span class="number">1995</span>,</div><div class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">        <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> zhangsan = &#123;</div><div class="line">    name: <span class="string">'张三'</span>,</div><div class="line">    birth: <span class="number">1992</span>,</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> getAge = wanger.age.bind(zhangsan); </div><div class="line">getAge() ;</div></pre></td></tr></table></figure></p>
<p>这里bind()与call(),apply()有一个重要的区别：<strong>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</strong></p>
<h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><blockquote>
<ul>
<li>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；</li>
<li>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；</li>
<li>apply 、 call 、bind 三者都可以利用后续参数传参；</li>
<li>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</li>
</ul>
</blockquote>
<p>参考文献：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">MDN web docs</a><br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345005399057070809cfaa347dfb7207900cfd116fb000" target="_blank" rel="external">廖雪峰的官方网站</a><br><a href="http://web.jobbole.com/83642/" target="_blank" rel="external">“chokcoco”的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解原型链]]></title>
      <url>/2017/09/18/%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在JS中，原型链有时候让人觉得很胡里花哨，又是<code>prototype</code>、<code>__proto__</code>又是各种指向什么的，让人觉得很头疼。如果你也有这种感觉，或许这篇文章可以帮助到你 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、认识原型"><a href="#一、认识原型" class="headerlink" title="一、认识原型"></a>一、认识原型</h3><p>1、先来一串代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.msg = msg;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"wanger"</span>)</div><div class="line"></div><div class="line">person1.constructor===Person;    <span class="comment">//true</span></div><div class="line">Person === Person.prototype.constructor; <span class="comment">//true</span></div><div class="line">person1.__proto__ === Person.prototype; <span class="comment">//true</span></div><div class="line">person1.__proto__.constructor === person1.constructor <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>看晕了吧？是不是很胡里花哨？不用担心，其实一张图就能了明白这其中的关系：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/1.png?raw=true" alt="Alt text"></p>
<blockquote>
<ul>
<li>蓝色的是构造函数</li>
<li>绿色的是构造函数实例出来的对象</li>
<li><strong>橙色的是构造函数的prototype,也是构造函数实例出来的对象的原型（它其实也是一个对象）</strong></li>
</ul>
</blockquote>
<p>2、这里特别要注意的是<code>prototype</code>与<code>__proto__</code>的区别，<code>prototype</code>是函数才有的属性，而<code>__proto__</code>是每个对象都有的属性。(<code>__proto__</code>不是一个规范属性，只是部分浏览器实现了此属性，对应的标准属性是<code>[[Prototype]]</code>)。</p>
<h3 id="二、认识原型链"><a href="#二、认识原型链" class="headerlink" title="二、认识原型链"></a>二、认识原型链</h3><p>1、我们刚刚了解了原型，那原型链在哪儿呢？不要着急，再上一张图：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/3.png?raw=true" alt="Alt text"></p>
<p>通过这张图我们可以了解到,person1的原型链是：</p>
<blockquote>
<p>person1 —-&gt; Person.prototype —-&gt; Object.prototype —-&gt; null</p>
</blockquote>
<p>2、事实上，函数也是一个对象，所以，Person的原型链是：</p>
<blockquote>
<p>Person —-&gt; Function.prototype —-&gt; Object.prototype —-&gt; null</p>
</blockquote>
<p>由于Function.prototype定义了apply()等方法，因此，Person就可以调用apply()方法。</p>
<p>3、如果把原型链的关系都显示清楚，那会复杂一些，如下图：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/2.png?raw=true" alt="Alt text"></p>
<blockquote>
<p>这里需要特别注意的是：<strong>所有函数的原型都是Function.prototype</strong>,包括<code>Function</code>构造函数和<code>Object</code>构造函数（如图中的标红部分）</p>
</blockquote>
<h3 id="三、原型链的继承"><a href="#三、原型链的继承" class="headerlink" title="三、原型链的继承"></a>三、原型链的继承</h3><p>1、假设我们要基于Person扩展出Student，Student的构造如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用Person构造函数，绑定this变量:</span></div><div class="line">    Person.call(<span class="keyword">this</span>, props);</div><div class="line">    <span class="keyword">this</span>.grade = props.grade || <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是，调用了<code>Person</code>构造函数不等于继承了<code>Person</code>，<code>Student</code>创建的对象的原型是：</p>
<blockquote>
<p>new Student() —-&gt; Student.prototype —-&gt; Object.prototype —-&gt; null</p>
</blockquote>
<p>示意图如下所示：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/5.png?raw=true" alt="Alt text"></p>
<p>必须想办法把原型链修改为：</p>
<blockquote>
<p>new Student() —-&gt; Student.prototype —-&gt; Person.prototype —-&gt; Object.prototype —-&gt; null</p>
</blockquote>
<p>示意图如下所示：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/6.png?raw=true" alt="Alt text"></p>
<p>那我们应该怎么修改呢？仔细观察两张图的差异，我们会发现，如果我们将<code>Student</code>的<code>prototype</code>改成<code>person1</code>对象不就大功告成了？于是有了下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Student.prototype = person1 ;</div></pre></td></tr></table></figure>
<p>但是这时候有个问题:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Student.prototype.constructor === Student; <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>原来<code>Student.prototype</code>(即<code>person1</code>)的<code>constructor</code>指向的还是<code>Person</code>，这时候还需要我们再改一下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Student.prototype.constructor = Student;</div></pre></td></tr></table></figure></p>
<p>这样就能把Student的原型链顺利的修改为： new Student() —-&gt; Student.prototype —-&gt; Person.prototype —-&gt; Object.prototype —-&gt; null 了；</p>
<p>完整的代码显示如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.msg = msg;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用Person构造函数，绑定this变量:</span></div><div class="line">    Person.call(<span class="keyword">this</span>, props);</div><div class="line">    <span class="keyword">this</span>.grade = props.grade || <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"wanger"</span>)</div><div class="line">Student.prototype = person1 ;</div><div class="line">Student.prototype.constructor = Student;</div></pre></td></tr></table></figure></p>
<h3 id="三、用以上原型链继承带来的问题"><a href="#三、用以上原型链继承带来的问题" class="headerlink" title="三、用以上原型链继承带来的问题"></a>三、用以上原型链继承带来的问题</h3><p>1、如果在控制台执行一遍上述的代码，我们会发现一些问题，如图所示：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/7.png?raw=true" alt="Alt text"></p>
<blockquote>
<p><code>Student.prototype</code>上含有之前person1带有的属性，那么，这样的继承的方法就显得不那么完美了</p>
</blockquote>
<p>2、这个时候，我们可以借助一个中间对象来实现正确的原型链，这个中间对象的原型要指向Person.prototype。为了实现这一点，参考道爷（就是发明JSON的那个道格拉斯）的代码，中间对象可以用一个空函数F来实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.msg = msg;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用Person构造函数，绑定this变量:</span></div><div class="line">    Person.call(<span class="keyword">this</span>, props);</div><div class="line">    <span class="keyword">this</span>.grade = props.grade || <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 空函数F:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 把F的原型指向Person.prototype:</span></div><div class="line">F.prototype = Person.prototype;</div><div class="line"></div><div class="line"><span class="comment">// 把Student的原型指向一个新的F对象，F对象的原型正好指向Person.prototype:</span></div><div class="line">Student.prototype = <span class="keyword">new</span> F();</div><div class="line"></div><div class="line"><span class="comment">// 把Student原型的构造函数修复为Student:</span></div><div class="line">Student.prototype.constructor = Student;</div><div class="line"></div><div class="line"><span class="comment">// 继续在Student原型（就是new F()对象）上定义方法：</span></div><div class="line">Student.prototype.getGrade = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.grade;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 创建wanger:</span></div><div class="line"><span class="keyword">var</span> wanger = <span class="keyword">new</span> Student(&#123;</div><div class="line">    name: <span class="string">'王二'</span>,</div><div class="line">    grade: <span class="number">9</span></div><div class="line">&#125;);</div><div class="line">wanger.msg; <span class="comment">// '王二'</span></div><div class="line">wanger.grade; <span class="comment">// 9</span></div><div class="line"></div><div class="line"><span class="comment">// 验证原型:</span></div><div class="line">wanger.__proto__ === Student.prototype; <span class="comment">// true</span></div><div class="line">wanger.__proto__.__proto__ === Person.prototype; <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 验证继承关系:</span></div><div class="line">wanger <span class="keyword">instanceof</span> Student; <span class="comment">// true</span></div><div class="line">wanger <span class="keyword">instanceof</span> Person; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这其中主要用到了一个空函数F作为过桥函数。为什么道爷会用过桥函数？用过桥函数F(){}主要是为了清空构造的属性。如果有些原Person的构造用不到，那么过桥函数将是一个好的解决方案</p>
</blockquote>
<p>这样写的话，<code>Student.prototype</code>上就没有任何自带的私有属性，这是理想的继承的方法</p>
<p>3、如果把继承这个动作用一个inherits()函数封装起来，还可以隐藏F的定义，并简化代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">Child, Parent</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    F.prototype = Parent.prototype;</div><div class="line">    Child.prototype = <span class="keyword">new</span> F();</div><div class="line">    Child.prototype.constructor = Child;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>封装后，写起来就像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.msg = msg;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用Person构造函数，绑定this变量:</span></div><div class="line">    Person.call(<span class="keyword">this</span>, props);</div><div class="line">    <span class="keyword">this</span>.grade = props.grade || <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">inherits(Student,Person) ;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这样再一封装的话，代码就很完美了。</p>
</blockquote>
<p>事实上，我们也可以在<code>inherits</code>中使用<code>Object.create()</code>来进行操作，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">Child, Parent</span>) </span>&#123;</div><div class="line">    Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype);</div><div class="line">    Child.prototype.constructor = Child;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果有兴趣了解<code>Object.create()</code>的其他用法，可以参考我的这篇博客<a href="http://www.wangyulue.com/2017/10/10/JS%E4%B8%ADObject-defineProperty%E4%B8%8EObject-create%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%952/#more" target="_blank" rel="external">JS中Object.create的使用方法</a>;</p>
<h3 id="四、ES6的新关键字class"><a href="#四、ES6的新关键字class" class="headerlink" title="四、ES6的新关键字class"></a>四、ES6的新关键字class</h3><p>在ES6中，新的关键字class，extends被正式被引入，它采用的类似java的继承写法，写起来就像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, grade) &#123;</div><div class="line">        <span class="keyword">super</span>(msg); <span class="comment">// 记得用super调用父类的构造方法!</span></div><div class="line">        <span class="keyword">this</span>.grade = grade || <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    myGrade() &#123;</div><div class="line">        alert(<span class="string">'I am at grade '</span> + <span class="keyword">this</span>.grade);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样写的话会更通俗易懂，继承也相当方便。读者可以进入<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001458267339633fd3a83c597d04b5fb59f7d1f6792efb3000" target="_blank" rel="external">廖雪峰的官方网站</a>详细了解class的用法</p>
<p>参考文献：<br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000" target="_blank" rel="external">廖雪峰的官方网站</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在 vue-cli 中用 proxyTable 解决开发环境的跨域问题]]></title>
      <url>/2017/09/12/%E5%9C%A8-vue-cli-%E4%B8%AD%E7%94%A8-proxyTable-%E8%A7%A3%E5%86%B3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>前端开发工程中难免会遇到跨域问题，如果你用的是vue，不要担心，官方手脚架早已帮你准备好了解决方案 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>如果读者还不太了解 <code>vue-cil</code> , 或许<a href="https://vuejs-templates.github.io/webpack/" target="_blank" rel="external">vue-cil文档</a>可以帮助到你 , 事实上,文档中就有用 <a href="https://vuejs-templates.github.io/webpack/proxy.html" target="_blank" rel="external">proxyTable</a> 进行代理请求的相关介绍</p>
</blockquote>
<h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><p>在 <code>config/index.js</code> 写下以下关键代码 ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// config/index.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    dev: &#123;</div><div class="line">        proxyTable: &#123;</div><div class="line">            <span class="comment">// proxy all requests starting with /api to jsonplaceholder</span></div><div class="line">            <span class="string">'/api'</span>: &#123;</div><div class="line">                target: <span class="string">'http://jsonplaceholder.typicode.com'</span>,</div><div class="line">                changeOrigin: <span class="literal">true</span>,</div><div class="line">                pathRewrite: &#123;</div><div class="line">                    <span class="string">'^/api'</span>: <span class="string">''</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的示例将代理请求 <code>/api/posts/test</code> 到 <code>http://jsonplaceholder.typicode.com/posts/test</code></p>
<h4 id="实际开发中的配置"><a href="#实际开发中的配置" class="headerlink" title="实际开发中的配置"></a>实际开发中的配置</h4><p>王二在开发中进行的如下的配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">proxyTable: &#123;</div><div class="line">    <span class="string">"/middleware"</span>: &#123;</div><div class="line">    target: <span class="string">"http://192.168.2.57:80"</span>,</div><div class="line">    pathRewrite: &#123;</div><div class="line">        <span class="string">'^/middleware'</span>: <span class="string">'/patient/1070/middleware'</span></div><div class="line">    &#125;,</div><div class="line">    changeOrigin: <span class="literal">true</span>,</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>这样就会将代理请求 <code>/middleware/balabala</code> 到 <code>http://192.168.2.57:80/patient/1070/middleware/balabala</code></p>
<blockquote>
<p>需要注意的是，这这种代理请求只适用于开发环境，其背后的设置来自于其使用的插件<a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="external">http-proxy-middleware</a>，有兴趣可以了解了解</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS验证身份证的合法性]]></title>
      <url>/2017/09/12/js%E9%AA%8C%E8%AF%81%E8%BA%AB%E4%BB%BD%E8%AF%81%E7%9A%84%E5%90%88%E6%B3%95%E6%80%A7/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近公司业务需求需要验证身份证的合法性，以下分享一个可以判断身份合法性的方法 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">IdentityCodeValid</span>(<span class="params">code</span>) </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cap</span> (<span class="params">str</span>)</span>&#123;    <span class="comment">//如果身份证验证中有x,则变为X再做判断；</span></div><div class="line">        <span class="keyword">var</span> temp = str.split(<span class="string">""</span>);</div><div class="line">        temp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">i,index</span>)</span>&#123;<span class="keyword">if</span>(i===<span class="string">'x'</span>)&#123;temp[index]=<span class="string">"X"</span>&#125;&#125;);<span class="keyword">return</span> temp.join(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> code = cap(code);</div><div class="line">    <span class="keyword">var</span> copycode = code ;</div><div class="line">    <span class="keyword">var</span> city=&#123;<span class="number">11</span>:<span class="string">"北京"</span>,<span class="number">12</span>:<span class="string">"天津"</span>,<span class="number">13</span>:<span class="string">"河北"</span>,<span class="number">14</span>:<span class="string">"山西"</span>,<span class="number">15</span>:<span class="string">"内蒙古"</span>,<span class="number">21</span>:<span class="string">"辽宁"</span>,<span class="number">22</span>:<span class="string">"吉林"</span>,<span class="number">23</span>:<span class="string">"黑龙江 "</span>,<span class="number">31</span>:<span class="string">"上海"</span>,<span class="number">32</span>:<span class="string">"江苏"</span>,<span class="number">33</span>:<span class="string">"浙江"</span>,<span class="number">34</span>:<span class="string">"安徽"</span>,<span class="number">35</span>:<span class="string">"福建"</span>,<span class="number">36</span>:<span class="string">"江西"</span>,<span class="number">37</span>:<span class="string">"山东"</span>,<span class="number">41</span>:<span class="string">"河南"</span>,<span class="number">42</span>:<span class="string">"湖北 "</span>,<span class="number">43</span>:<span class="string">"湖南"</span>,<span class="number">44</span>:<span class="string">"广东"</span>,<span class="number">45</span>:<span class="string">"广西"</span>,<span class="number">46</span>:<span class="string">"海南"</span>,<span class="number">50</span>:<span class="string">"重庆"</span>,<span class="number">51</span>:<span class="string">"四川"</span>,<span class="number">52</span>:<span class="string">"贵州"</span>,<span class="number">53</span>:<span class="string">"云南"</span>,<span class="number">54</span>:<span class="string">"西藏 "</span>,<span class="number">61</span>:<span class="string">"陕西"</span>,<span class="number">62</span>:<span class="string">"甘肃"</span>,<span class="number">63</span>:<span class="string">"青海"</span>,<span class="number">64</span>:<span class="string">"宁夏"</span>,<span class="number">65</span>:<span class="string">"新疆"</span>,<span class="number">71</span>:<span class="string">"台湾"</span>,<span class="number">81</span>:<span class="string">"香港"</span>,<span class="number">82</span>:<span class="string">"澳门"</span>,<span class="number">91</span>:<span class="string">"国外 "</span>&#125;;</div><div class="line">    <span class="keyword">var</span> tip = <span class="string">""</span>;</div><div class="line">    <span class="keyword">var</span> pass= <span class="literal">true</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!code || !<span class="regexp">/^\d&#123;6&#125;(18|19|20)?\d&#123;2&#125;(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;(\d|X)$/i</span>.test(code))&#123;</div><div class="line">        tip = <span class="string">"身份证号格式错误"</span>;</div><div class="line">        pass = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!city[code.substr(<span class="number">0</span>,<span class="number">2</span>)])&#123;</div><div class="line">        tip = <span class="string">"地址编码错误"</span>;</div><div class="line">        pass = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//18位身份证需要验证最后一位校验位</span></div><div class="line">        <span class="keyword">if</span>(code.length == <span class="number">18</span>)&#123;</div><div class="line">            code = code.split(<span class="string">''</span>);</div><div class="line">            <span class="comment">//∑(ai×Wi)(mod 11)</span></div><div class="line">            <span class="comment">//加权因子</span></div><div class="line">            <span class="keyword">var</span> factor = [ <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span> ];</div><div class="line">            <span class="comment">//校验位</span></div><div class="line">            <span class="keyword">var</span> parity = [ <span class="number">1</span>, <span class="number">0</span>, <span class="string">'X'</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span> ];</div><div class="line">            <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">var</span> ai = <span class="number">0</span>;</div><div class="line">            <span class="keyword">var</span> wi = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++)</div><div class="line">            &#123;</div><div class="line">                ai = code[i];</div><div class="line">                wi = factor[i];</div><div class="line">                sum += ai * wi;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> last = parity[sum % <span class="number">11</span>];</div><div class="line">            <span class="keyword">if</span>(parity[sum % <span class="number">11</span>] != code[<span class="number">17</span>])&#123;</div><div class="line">                tip = <span class="string">"校验位错误"</span>;</div><div class="line">                pass =<span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断出生日期是否合法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">date</span>)</span>&#123;    <span class="comment">//date 传 例如：2013-01-01、2013/01/01、2013/01/32、2013/02/29</span></div><div class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">Date</span>(date).getDate()==date.substring(date.length<span class="number">-2</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">code</span>)</span>&#123;    <span class="comment">//得到类似2013-01-01、2013/01/01、2013/01/32、2013/02/29的日期格式</span></div><div class="line">        <span class="keyword">var</span> date = <span class="string">''</span> ;</div><div class="line">        <span class="keyword">if</span>(code.length===<span class="number">18</span>)&#123;</div><div class="line">             date = code.substring(<span class="number">6</span>,<span class="number">14</span>)</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(code.length===<span class="number">15</span>)&#123;</div><div class="line">             date = <span class="string">'19'</span>+code.substring(<span class="number">6</span>,<span class="number">12</span>)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">        &#125;</div><div class="line">        date = date.substr(<span class="number">0</span>,<span class="number">4</span>)+<span class="string">'-'</span>+date.substr(<span class="number">4</span>,<span class="number">2</span>)+<span class="string">'-'</span>+date.substr(<span class="number">6</span>,<span class="number">2</span>);</div><div class="line">        <span class="keyword">return</span> date;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!check(getDate(copycode)))&#123;</div><div class="line">        pass = <span class="literal">false</span> ;</div><div class="line">        tip = <span class="string">"日期格式不正确"</span></div><div class="line">    &#125;</div><div class="line"><span class="comment">//   if(!pass) alert(tip);</span></div><div class="line">    <span class="keyword">return</span> pass;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考文献<br><a href="http://www.cnblogs.com/lzrabbit/archive/2011/10/23/2221643.html" target="_blank" rel="external">“懒惰的肥兔”的博客</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jsonp的一般原理]]></title>
      <url>/2017/08/14/jsonp%E7%9A%84%E4%B8%80%E8%88%AC%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>浏览器中，由于有 <code>同源策略</code> 的存在，ajax跨域请求数据往往失败，这时候JSONP或许会帮到我们</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>由于<a href="https://baike.baidu.com/item/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/3927875?fr=aladdin" target="_blank" rel="external">同源策略</a>，一般来说位于server1.example.com的网页无法与不是 server1.example.com的服务器沟通,这时候Jsonp可以帮助我们进行跨域的数据交互,另一个解决这个问题的新方法是<a href="https://baike.baidu.com/item/CORS/16411212#viewPageContent" target="_blank" rel="external">CORS</a>，咱们今天主要聊聊Jsonp。</p>
</blockquote>
<h4 id="一、JSONP是怎么产生的"><a href="#一、JSONP是怎么产生的" class="headerlink" title="一、JSONP是怎么产生的"></a>一、JSONP是怎么产生的</h4><p>1、由于同源策略的存在，Ajax直接请求数据存在跨域无权限访问的问题。<br>2、但我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>）；<br>3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；<br>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；<br>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。<br>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。<br>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p>
<h4 id="二、JSONP的客户端具体实现"><a href="#二、JSONP的客户端具体实现" class="headerlink" title="二、JSONP的客户端具体实现"></a>二、JSONP的客户端具体实现</h4><p>不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：</p>
<p>1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。<br>远程服务器remoteserver.com根目录下有个remote.js文件代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">'我是远程文件'</span>);</div></pre></td></tr></table></figure></p>
<p>本地服务器localserver.com下有个jsonp.html页面代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://remoteserver.com/remote.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。</p>
<p>2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。<br>远程服务器remoteserver.com根目录下remote.js文件代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localHandler(&#123;<span class="string">"result"</span>:<span class="string">"我是远程js带来的数据"</span>&#125;);</div></pre></td></tr></table></figure></p>
<p>本地服务器localserver.com下jsonp.html页面代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> localHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        alert(<span class="string">'我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：'</span> + data.result);</span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://remoteserver.com/remote.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。</p>
<p>3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。<br>看jsonp.html页面的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 得到航班信息查询结果后的回调函数</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        alert(<span class="string">'你查询的航班结果是：票价 '</span> + data.price + <span class="string">' 元，'</span> + <span class="string">'余票 '</span> + data.tickets + <span class="string">' 张。'</span>);</span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="javascript">    <span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> url = <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler"</span>;</span></div><div class="line"><span class="javascript">    <span class="comment">// 创建script标签，设置其属性</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></div><div class="line"><span class="javascript">    script.setAttribute(<span class="string">'src'</span>, url);</span></div><div class="line"><span class="javascript">    <span class="comment">// 把script标签加入head，此时调用开始</span></span></div><div class="line"><span class="javascript">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script); </span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。<br>我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做<strong>flightHandler</strong>，所以请把查询结果传入这个函数中进行调用。<br>OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flightHandler(&#123;</div><div class="line">    <span class="string">"code"</span>: <span class="string">"CA1998"</span>,</div><div class="line">    <span class="string">"price"</span>: <span class="number">1780</span>,</div><div class="line">    <span class="string">"tickets"</span>: <span class="number">5</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</p>
<p>4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。</p>
<p>什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></div><div class="line"><span class="javascript">            $.ajax(&#123;</span></div><div class="line"><span class="javascript">                type: <span class="string">"get"</span>,</span></div><div class="line"><span class="javascript">                <span class="keyword">async</span>: <span class="literal">false</span>,</span></div><div class="line"><span class="javascript">                url: <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998"</span>,</span></div><div class="line"><span class="javascript">                dataType: <span class="string">"jsonp"</span>,</span></div><div class="line"><span class="javascript">                jsonp: <span class="string">"callback"</span>,<span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></span></div><div class="line"><span class="javascript">                jsonpCallback:<span class="string">"flightHandler"</span>,<span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</span></span></div><div class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                    alert(<span class="string">'您查询到航班信息：票价： '</span> + json.price + <span class="string">' 元，余票： '</span> + json.tickets + <span class="string">' 张。'</span>);</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="javascript">                error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">                    alert(<span class="string">'fail'</span>);</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里没有写flightHandler这个函数，但是也运行成功了，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时自动帮你生成回调函数并把数据取出来供success属性方法来调用。</p>
<h4 id="三、其他注意点"><a href="#三、其他注意点" class="headerlink" title="三、其他注意点"></a>三、其他注意点</h4><p>1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；</p>
<p>2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本。</p>
<p>3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。</p>
<p>4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</p>
<blockquote>
<p>文章转载自<a href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html" target="_blank" rel="external">“随它去吧”的博客</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将特殊英文字符转为中文字符]]></title>
      <url>/2017/08/14/%E5%B0%86%E7%89%B9%E6%AE%8A%E8%8B%B1%E6%96%87%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B8%BA%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候将前台的数据传到后台，再从后台读取时，由于有特殊英文字符，会出现json转为对象出错的情况，这时候，一种解决方案就是<strong>在传到后台之前，将特殊的英文字符转为中文字符</strong> </p>
</blockquote>
<blockquote>
<p>以下是一个英文字符转为中文字符的简单方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpecialJson</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> res = str.replace(<span class="regexp">/\"/g</span>,<span class="string">"“"</span>).replace(<span class="regexp">/\[/g</span>,<span class="string">"【"</span>).replace(<span class="regexp">/\]/g</span>,<span class="string">"】"</span>).replace(<span class="regexp">/\&#123;/g</span>,<span class="string">"｛"</span>).replace(<span class="regexp">/\&#125;/g</span>,<span class="string">"｝"</span>)  ;</div><div class="line">	<span class="keyword">return</span> res ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[了解事件冒泡]]></title>
      <url>/2017/08/14/%E4%BA%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>事件冒泡是前端er经常会遇到的问题，那在这里我们来用简短的代码来了解一下到底什么是事件冒泡 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>在这里我们主要讨论 <code>event.stopPropagation()</code> 与 <code>event.preventDefault()</code> 的区别，先来一段可执行的代码：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最外层-1');"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是中间层-1');"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最里层-1');"</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span>点击我-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最外层-2');"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是中间层-2');"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最里层-2');"</span> <span class="attr">id</span>=<span class="string">"test2"</span>&gt;</span>点击我-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最外层-3');"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是中间层-3');"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最里层-3');"</span> <span class="attr">id</span>=<span class="string">"test3"</span>&gt;</span>点击我-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">            $(<span class="string">"#test1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></div><div class="line"><span class="undefined">                event.stopPropagation();</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="javascript">            $(<span class="string">"#test2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></div><div class="line"><span class="undefined">                event.preventDefault();</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="javascript">            $(<span class="string">"#test3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span> ;</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>event.stopPropagation();</code><br>事件处理过程中，阻止了事件冒泡，但不会阻击默认行为（它就执行了超链接的跳转） </li>
<li><code>event.preventDefault();</code><br>如果把它放在头部A标签的click事件中，点击“点击我”。<br>会发现它依次弹出：我是最里层—-我是中间层—-我是最外层，但最后却没有跳转到百度<br>它的作用是：事件处理过程中，不阻击事件冒泡，但阻击默认行为（它只执行所有弹框，却没有执行超链接跳转）</li>
<li><code>return false;</code><br>事件处理过程中，阻止了事件冒泡，也阻止了默认行为（比如刚才它就没有执行超链接的跳转） </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过FileReader将图片转为Base64编码]]></title>
      <url>/2017/08/14/%E9%80%9A%E8%BF%87FileReader%E5%B0%86%E5%9B%BE%E7%89%87%E8%BD%AC%E4%B8%BABase64%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如果我们想将图片转为base64编码，可以通过H5的FileReader接口来达成目标 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>封装好的方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param &#123;string&#125;   dom		input[name='file']的dom对象</span></div><div class="line"><span class="comment">* @param &#123;function&#125; fn		回调函数</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_base64</span>(<span class="params">dom,fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> file = dom.files[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span>(!file) <span class="keyword">return</span> ;           </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">window</span>.FileReader)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"当前浏览器不支持FileReader！"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125; </div><div class="line">    r = <span class="keyword">new</span> FileReader();</div><div class="line">    r.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(fn) fn(r) ;   </div><div class="line">    &#125;;</div><div class="line">    r.readAsDataURL(file);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>再来一段可执行的html代码，大家可以动手试试哈</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">id</span>=<span class="string">"upload_file"</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"base64_output"</span> <span class="attr">style</span>=<span class="string">"min-width:800px;min-height: 500px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">$_</span>(<span class="params">id</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="javascript">            $_(<span class="string">"upload_file"</span>).onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">var</span> dom = $_(<span class="string">'upload_file'</span>);</span></div><div class="line"><span class="javascript">                get_base64(dom,<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                    $_(<span class="string">'base64_output'</span>).value = r.result;</span></div><div class="line"><span class="undefined">                &#125;);</span></div><div class="line"><span class="undefined">            &#125;;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">get_base64</span>(<span class="params">dom,fn</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">var</span> file = dom.files[<span class="number">0</span>];</span></div><div class="line"><span class="javascript">                <span class="keyword">if</span>(!file) <span class="keyword">return</span> ;</span></div><div class="line"><span class="javascript">                <span class="keyword">if</span>(!<span class="built_in">window</span>.FileReader)&#123;</span></div><div class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"当前浏览器不支持FileReader！"</span>);</span></div><div class="line"><span class="javascript">                    <span class="keyword">return</span>;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="javascript">                r = <span class="keyword">new</span> FileReader();</span></div><div class="line"><span class="javascript">                r.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">if</span>(fn) fn(r) ;</span></div><div class="line"><span class="undefined">                &#125;;</span></div><div class="line"><span class="undefined">                r.readAsDataURL(file);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高亮文本里的关键字]]></title>
      <url>/2017/08/14/%E9%AB%98%E4%BA%AE%E6%96%87%E6%9C%AC%E9%87%8C%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如何高亮html代码里的关键字？下面的方法或许能帮到你 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>封装好的方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param &#123;string&#125; data		要搜索的文本</span></div><div class="line"><span class="comment">* @param &#123;string&#125; key		要高亮的关键词</span></div><div class="line"><span class="comment">* @param &#123;string&#125; bgColor	背景颜色，默认orange</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyLight</span>(<span class="params">data, key, bgColor</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> sText = data ;</div><div class="line">    bgColor = bgColor || <span class="string">"orange"</span>,</div><div class="line">    sKey = <span class="string">"&lt;span style='background-color: "</span>+bgColor+<span class="string">";'&gt;"</span>+key+<span class="string">"&lt;/span&gt;"</span>,</div><div class="line">    num = <span class="number">-1</span>,</div><div class="line">    rStr = <span class="keyword">new</span> <span class="built_in">RegExp</span>(key, <span class="string">"g"</span>),</div><div class="line">    rHtml = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\&lt;.*?\&gt;"</span>,<span class="string">"ig"</span>), <span class="comment">//匹配html元素</span></div><div class="line">    aHtml = sText.match(rHtml); <span class="comment">//存放html元素的数组</span></div><div class="line">    sText = sText.replace(rHtml, <span class="string">'&#123;~&#125;'</span>);  <span class="comment">//替换html标签</span></div><div class="line">    sText = sText.replace(rStr,sKey); <span class="comment">//替换key</span></div><div class="line">    sText = sText.replace(<span class="regexp">/&#123;~&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//恢复html标签</span></div><div class="line">        num++;</div><div class="line">        <span class="keyword">return</span> aHtml[num];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> sText;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>再来一段可执行的html代码，大家可以动手试试哈</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">keyLight</span>(<span class="params">data, key, bgColor</span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> sText = data ;</span></div><div class="line"><span class="javascript">            bgColor = bgColor || <span class="string">"orange"</span>,</span></div><div class="line"><span class="javascript">            sKey = <span class="string">"&lt;span style='background-color: "</span>+bgColor+<span class="string">";'&gt;"</span>+key+<span class="string">"&lt;/span&gt;"</span>,</span></div><div class="line"><span class="undefined">            num = -1,</span></div><div class="line"><span class="javascript">            rStr = <span class="keyword">new</span> <span class="built_in">RegExp</span>(key, <span class="string">"g"</span>),</span></div><div class="line"><span class="javascript">            rHtml = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\&lt;.*?\&gt;"</span>,<span class="string">"ig"</span>), <span class="comment">//匹配html元素</span></span></div><div class="line"><span class="javascript">            aHtml = sText.match(rHtml); <span class="comment">//存放html元素的数组</span></span></div><div class="line"><span class="javascript">            sText = sText.replace(rHtml, <span class="string">'&#123;~&#125;'</span>);  <span class="comment">//替换html标签</span></span></div><div class="line"><span class="javascript">            sText = sText.replace(rStr,sKey); <span class="comment">//替换key</span></span></div><div class="line"><span class="javascript">            sText = sText.replace(<span class="regexp">/&#123;~&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//恢复html标签</span></span></div><div class="line"><span class="undefined">                num++;</span></div><div class="line"><span class="javascript">                <span class="keyword">return</span> aHtml[num];</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="javascript">            <span class="keyword">return</span> sText;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> html = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).innerHTML ;</span></div><div class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).innerHTML = keyLight(html,<span class="string">'试'</span>) ;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解ES6中的Promise]]></title>
      <url>/2017/08/10/%E7%90%86%E8%A7%A3ES6%E4%B8%AD%E7%9A%84Promise/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在ES6中，Promise被列为正式规范，Promise可以规范化回调，避免回调地狱 </p>
</blockquote>
<a id="more"></a>
<h4 id="一、Promise的作用"><a href="#一、Promise的作用" class="headerlink" title="一、Promise的作用"></a>一、Promise的作用</h4><p>在ajax请求数据的过程中，我们可以异步拿到我们想要的数据，然后在回调中做相应的数据处理。<br>这样做看上去并没有什么麻烦，但是如果这个时候，我们还需要做另外一个ajax请求，这个新的ajax请求的其中一个参数，得从上一个ajax请求中获取，这个时候我们就需要在回调函数中再写一个异步请求，然后在这个异步函数的回调函数里在写相应的数据处理。要是连续嵌套个三四层，往往就很恶心了。<br>写起来就像下面这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    type:<span class="string">'get'</span>,</div><div class="line">    url:<span class="string">'url_1'</span>, </div><div class="line">    data: <span class="string">'data'</span></div><div class="line">    success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">        <span class="comment">//相应的数据处理</span></div><div class="line">        <span class="keyword">var</span> data = res.data</div><div class="line">        $.ajax(&#123;</div><div class="line">            type:<span class="string">'get'</span>,</div><div class="line">            url:<span class="string">'url_2'</span>, </div><div class="line">            data: data</div><div class="line">            success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">                <span class="comment">//相应的数据处理</span></div><div class="line">                $.ajax(&#123;</div><div class="line">                    type:<span class="string">'get'</span>,</div><div class="line">                    url:<span class="string">'url_3'</span>, </div><div class="line">                    data: data</div><div class="line">                    success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">                        <span class="comment">//相应的数据处理</span></div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>在这种情况下Promise就能发挥它的威力了；</p>
<h4 id="二、来一个实例"><a href="#二、来一个实例" class="headerlink" title="二、来一个实例"></a>二、来一个实例</h4><p>先不谈语法，下面先来一个实例，建立感性的认识</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">data</span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"我是从上一个回调函数里传过来的数据"</span>,data) ;</span></div><div class="line"><span class="javascript">                $.ajax(&#123;</span></div><div class="line"><span class="javascript">                    type:<span class="string">'post'</span>,</span></div><div class="line"><span class="javascript">                    dataType: <span class="string">'jsonp'</span>,</span></div><div class="line"><span class="javascript">                    url:<span class="string">'http://api.money.126.net/data/feed/0000001,1399001'</span>,   <span class="comment">//jsonp跨域调用上证与深证的股票指数</span></span></div><div class="line"><span class="undefined">                    data:&#123;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="javascript">                    success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res) ;</span></div><div class="line"><span class="undefined">                        resolve(res) ;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="javascript">                    error:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"Error:"</span>) ;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res) ;</span></div><div class="line"><span class="undefined">                        reject(res) ;</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;)</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">data</span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"我是从上一个回调函数里传过来的数据"</span>,data) ;</span></div><div class="line"><span class="javascript">                $.ajax(&#123;</span></div><div class="line"><span class="javascript">                    type:<span class="string">'post'</span>,</span></div><div class="line"><span class="javascript">                    dataType: <span class="string">'jsonp'</span>,</span></div><div class="line"><span class="javascript">                    url:<span class="string">'https://api.douban.com/v2/movie/top250'</span>,  <span class="comment">//跨域调用豆top250的电影</span></span></div><div class="line"><span class="javascript">                    success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res) ;</span></div><div class="line"><span class="undefined">                        resolve(res) ;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="javascript">                    error:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"Error:"</span>) ;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res) ;</span></div><div class="line"><span class="undefined">                        reject(res)</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;)</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        a().then(b).then(a).then(b).catch(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"final Error:"</span>,a)&#125;) ;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>打印结果如下所示：<br><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1708/3.png?raw=true" alt="Alt text"></p>
<blockquote>
<p>可以发现，<code>Promise</code> 通过简单的链式调用就能得到之前多层回调才能达成的效果;而且从代码的结构来看，有效地减小了各个请求之间的耦合;</p>
</blockquote>
<h4 id="三、深入Promise"><a href="#三、深入Promise" class="headerlink" title="三、深入Promise"></a>三、深入Promise</h4><p>别的不谈，先打印一下 <code>Promise</code> , <code>console.dir(Promise)</code> , 看看它究竟是哪号人物：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1708/4.png?raw=true" alt="Alt text"></p>
<blockquote>
<p>原来 <code>Promise</code> 本身是一个构造函数，自己身上有 <code>all</code>、 <code>reject</code>、 <code>resolve</code> 这几个的方法，在其 <code>prototype</code> 上有 <code>then</code> 、 <code>catch</code> 这两个方法。那么用Promise new出来的对象也会有 <code>then</code> 、 <code>catch</code> 这两个方法。</p>
</blockquote>
<h4 id="四、注意上面实例中的resolve与reject"><a href="#四、注意上面实例中的resolve与reject" class="headerlink" title="四、注意上面实例中的resolve与reject"></a>四、注意上面实例中的resolve与reject</h4><p>1、我们发现，在 <code>new Promise(function(resolve,reject){})</code> 里传了两个方法 <code>resolve</code> 、 <code>reject</code> 作为参数，这两个方法通常会在函数的回调里被用到。一旦执行到<code>resolve()</code> 或者 <code>reject()</code> ，那么这个函数会停止执行，然后触发后面的 <code>then()</code> 或者 <code>catch()</code> 方法。准确一点来说，执行到<code>resolve()</code> 会触发 <code>then()</code> 方法，执行到 <code>reject()</code> 会触发 <code>catch()</code> 方法。</p>
<p>2、<code>resolve</code> 和 <code>reject</code> 方法里可以传入参数 ，就像 <code>resolve(data)</code> 和 <code>reject(data)</code> 。 如果这样做 ，那么在后面的 <code>then()</code> 或者 <code>catch()</code> 里传入一个带参数的函数 ， 就像 <code>then(function(data){})</code> 或者 <code>catch(function(data){})</code> ， 就能得到 <code>data</code> 的数据 。</p>
<p>3、说的再专业一些，<code>Promise</code> 对象有三种状态，他们分别是：</p>
<ul>
<li>pending: 等待中，或者进行中，表示还没有得到结果</li>
<li>resolved(Fulfilled): 已经完成，表示得到了我们想要的结果，可以继续往下执行</li>
<li>rejected: 也表示得到结果，但是由于结果并非我们所愿，因此拒绝执行</li>
</ul>
<p>这三种状态不受外界影响，而且状态只能从 <code>pending</code> 改变为 <code>resolved</code> 或者<code>rejected</code> ，并且不可逆。在 <code>Promise</code> 对象的构造函数中，<code>resolve</code> 和 <code>reject</code> 就是用来处理Promise的状态变化。<br>一般来说，调用 <code>resolve</code> 或 <code>reject</code> 以后，Promise 的使命就完成了，后继操作应该放到 <code>then</code> 或者 <code>catch</code> 方法里面，而不应该直接写在 <code>resolve()</code> 或 <code>reject()</code> 的后面 <strong>(事实的情况是，<code>resolve()</code> 或 <code>reject()</code> 的后面的代码也不会执行)</strong>。</p>
<h4 id="五、new-Promise-里的函数是立刻执行的"><a href="#五、new-Promise-里的函数是立刻执行的" class="headerlink" title="五、new Promise() 里的函数是立刻执行的"></a>五、<code>new Promise()</code> 里的函数是立刻执行的</h4><p>需要注意的的是，<code>new Promise()</code> 里的函数是立刻执行的 ，也就是说 ，当你执行下面这段代码时，就已经开始执行异步请求了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span></div><div class="line"><span class="javascript">    $.ajax(&#123;</span></div><div class="line"><span class="javascript">        type:<span class="string">'post'</span>,</span></div><div class="line"><span class="javascript">        dataType: <span class="string">'jsonp'</span>,</span></div><div class="line"><span class="javascript">        url:<span class="string">'http://api.money.126.net/data/feed/0000001,1399001'</span>,</span></div><div class="line"><span class="undefined">        data:&#123;</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(res) ;</span></div><div class="line"><span class="undefined">            resolve(res) ;</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        error:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="undefined">            reject(res) ;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这也是为什么，在上面第二段的实例中，需要用 <code>a()</code> 和 <code>b()</code> 函数把 <code>new Promise()</code> 给包起来</p>
<h4 id="六、then-函数的返回值一定是-Promise-对象"><a href="#六、then-函数的返回值一定是-Promise-对象" class="headerlink" title="六、then() 函数的返回值一定是 Promise 对象"></a>六、<code>then()</code> 函数的返回值一定是 <code>Promise</code> 对象</h4><p>还需要注意的的是，<code>then()</code> 函数的返回值一定是 <code>Promise</code> 对象，哪怕手动 <code>return</code> 一个值也无济于事，如下面的代码，照样能运行成功：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"hello"</span>);<span class="keyword">return</span> <span class="number">1</span>&#125;).then(b) ;</div></pre></td></tr></table></figure></p>
<p>这也解释了为什么我们可以链式调用 <code>then()</code> 函数。</p>
<h4 id="七、Promise-all-与Promise-race-的用法"><a href="#七、Promise-all-与Promise-race-的用法" class="headerlink" title="七、Promise.all()与Promise.race()的用法"></a>七、<code>Promise.all()</code>与<code>Promise.race()</code>的用法</h4><p>想要从两个不同的 <code>ajax</code> 请求里分别获得信息，这两个任务是可以并行执行的，就可以用 <code>Promise.all()</code> 实现：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> p1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        setTimeout(resolve, <span class="number">500</span>, <span class="string">'P1'</span>);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125; ;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> p2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        setTimeout(resolve, <span class="number">1000</span>, <span class="string">'P2'</span>);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125; ;</span></div><div class="line"><span class="javascript"><span class="comment">// 同时执行p1和p2，并在它们都完成后执行then</span></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">Promise</span>.all([p1(), p2()]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(results); <span class="comment">// 获得一个Array: ['P1', 'P2']</span></span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>有些时候，多个异步任务是为了容错。比如，分别发两个不同的 <code>ajax</code> 请求读取用户的个人信息，只需要获得先返回的结果即可，这种情况下，就可以用<code>Promise.race()</code> 实现：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> p1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        setTimeout(resolve, <span class="number">500</span>, <span class="string">'P1'</span>);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125; ;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> p2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        setTimeout(resolve, <span class="number">1000</span>, <span class="string">'P2'</span>);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125; ;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">Promise</span>.all([p1(), p2()]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(results); <span class="comment">// 'P1'</span></span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于 <code>p1</code> 执行较快，<code>Promise</code> 的 <code>then()</code> 将获得结果 <code>&#39;P1&#39;</code> 。 <code>p2</code> 仍在继续执行，但执行结果将被丢弃。</p>
<p><strong>如果我们组合使用Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。</strong></p>
<p>参考文献：<br><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="external">阮一峰ES6入门</a><br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000" target="_blank" rel="external">廖雪峰的官方网站</a><br><a href="https://www.sitepoint.com/overview-javascript-promises/" target="_blank" rel="external">sitepoint</a><br><a href="http://www.cnblogs.com/lvdabao/p/es6-promise-1.html" target="_blank" rel="external">“吕大豹”的博客园</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webApp调用百度地图API获取当前位置以及其他的一些操作]]></title>
      <url>/2017/08/09/webApp%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E4%BD%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近公司有业务需求，需要获得当前位置与各个医院的距离，在这里我主要调用百度地图的API接口，以下做一个总结 </p>
</blockquote>
<a id="more"></a>
<h4 id="一、先上一个简单的实例"><a href="#一、先上一个简单的实例" class="headerlink" title="一、先上一个简单的实例"></a>一、先上一个简单的实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5调用百度地图API<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=GG3pK0aFOLuRioYyTFhG75tOD2hBZ0CG"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"margin:50px 10px;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;height:480px;border:1px solid gray;margin:30px auto"</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        /**</span></div><div class="line"><span class="undefined">         * 写了一个map方法用以调出地图</span></div><div class="line"><span class="undefined">         * @param &#123;number&#125; x		经度</span></div><div class="line"><span class="undefined">         * @param &#123;number&#125; y		纬度，这个例子里写的是上海的经纬度</span></div><div class="line"><span class="javascript">         * @param &#123;<span class="built_in">String</span>&#125; dom		要渲染的dom的id</span></div><div class="line"><span class="javascript">         * @param &#123;<span class="built_in">Object</span>&#125; size		地图的放大级别，范围<span class="number">0</span><span class="number">-19</span></span></div><div class="line"><span class="undefined">         */</span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">x,y,dom,size</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(dom);</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(x,y);</span></div><div class="line"><span class="undefined">            map.centerAndZoom(point,size||15);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        map(<span class="number">121.48789949</span>,<span class="number">31.24916171</span>,<span class="string">"container"</span>);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>其中需要注意的是引用的 <code>script</code> 标签里的 <code>GG3pK0aFOLuRioYyTFhG75tOD2hBZ0CG</code> 这个秘钥是需要自己注册申请的，这里给一个注册的<strong><a href="http://lbsyun.baidu.com/" target="_blank" rel="external">传送门</a></strong>，当然在测试中使用王二的这个秘钥也没有关系</p>
</blockquote>
<h4 id="二、并不一定需要经纬度，地名也是OK的"><a href="#二、并不一定需要经纬度，地名也是OK的" class="headerlink" title="二、并不一定需要经纬度，地名也是OK的"></a>二、并不一定需要经纬度，地名也是OK的</h4><p>将上面代码的第22行换成如下试试：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.centerAndZoom(<span class="string">"南京"</span>,<span class="number">15</span>);   <span class="comment">//中心点坐标可以是经纬度，也可以是地名</span></div></pre></td></tr></table></figure>
<h4 id="三、有时候我们需要一个标注，如下图所示"><a href="#三、有时候我们需要一个标注，如下图所示" class="headerlink" title="三、有时候我们需要一个标注，如下图所示"></a>三、有时候我们需要一个标注，如下图所示</h4><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1708/1.png?raw=true" alt="Alt text"></p>
<p>这时候可以在插入两行代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(point);        <span class="comment">// 创建标注</span></div><div class="line">map.addOverlay(marker);     <span class="comment">// 将标注添加到地图中</span></div></pre></td></tr></table></figure>
<p>写完整起来就像这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">x,y,dom,size</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(dom);</div><div class="line">    <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(x,y);</div><div class="line">    map.centerAndZoom(point,size||<span class="number">15</span>);</div><div class="line">    <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(point);</div><div class="line">    map.addOverlay(marker);</div><div class="line">&#125;</div><div class="line">map(<span class="number">121.48789949</span>,<span class="number">31.24916171</span>,<span class="string">"container"</span>);</div></pre></td></tr></table></figure></p>
<h4 id="四、有时候我们还需要一个标签，如下图所示"><a href="#四、有时候我们还需要一个标签，如下图所示" class="headerlink" title="四、有时候我们还需要一个标签，如下图所示"></a>四、有时候我们还需要一个标签，如下图所示</h4><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1708/2.png?raw=true" alt="Alt text"></p>
<p>这时候可以插入如下的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> label = <span class="keyword">new</span> BMap.Label(<span class="string">"上海浦西"</span>, &#123;   <span class="comment">//新建一个标签，并设置标签文本</span></div><div class="line">    offset: <span class="keyword">new</span> BMap.Size(<span class="number">15</span>, <span class="number">-25</span>)      <span class="comment">//设置标签的偏移量</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">label.setStyle(&#123;    <span class="comment">//为标签设置样式</span></div><div class="line">    width: <span class="string">"80px"</span>,</div><div class="line">    color: <span class="string">'#fff'</span>,</div><div class="line">    background: <span class="string">'#ff8355'</span>,</div><div class="line">    border: <span class="string">'1px solid "#ff8355"'</span>,</div><div class="line">    borderRadius: <span class="string">"5px"</span>,</div><div class="line">    textAlign: <span class="string">"center"</span>,</div><div class="line">    height: <span class="string">"26px"</span>,</div><div class="line">    lineHeight: <span class="string">"26px"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">marker.setLabel(label);  <span class="comment">// 为标注添加一个标签</span></div></pre></td></tr></table></figure>
<p>写成方法就像下面这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">x,y,dom,text,size</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(dom);</div><div class="line">    <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(x,y);</div><div class="line">    map.centerAndZoom(point,size||<span class="number">15</span>);</div><div class="line">    <span class="keyword">var</span> label = <span class="keyword">new</span> BMap.Label(text, &#123;</div><div class="line">        offset: <span class="keyword">new</span> BMap.Size(<span class="number">15</span>, <span class="number">-25</span>)</div><div class="line">    &#125;);</div><div class="line">    label.setStyle(&#123;</div><div class="line">        width: <span class="string">"80px"</span>,</div><div class="line">        color: <span class="string">'#fff'</span>,</div><div class="line">        background: <span class="string">'#ff8355'</span>,</div><div class="line">        border: <span class="string">'1px solid "#ff8355"'</span>,</div><div class="line">        borderRadius: <span class="string">"5px"</span>,</div><div class="line">        textAlign: <span class="string">"center"</span>,</div><div class="line">        height: <span class="string">"26px"</span>,</div><div class="line">        lineHeight: <span class="string">"26px"</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(point);</div><div class="line">    marker.setLabel(label);</div><div class="line">    map.addOverlay(marker);</div><div class="line">&#125;</div><div class="line">map(<span class="number">121.48789949</span>,<span class="number">31.24916171</span>,<span class="string">"container"</span>,<span class="string">"上海浦西"</span>);</div></pre></td></tr></table></figure></p>
<h4 id="五、获取当前的经纬度"><a href="#五、获取当前的经纬度" class="headerlink" title="五、获取当前的经纬度"></a>五、获取当前的经纬度</h4><p>获取当前的经纬度直接调用下面这个方法就好了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentPosition</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> geolocation = <span class="keyword">new</span> BMap.Geolocation();</div><div class="line">    geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;   <span class="comment">//回调函数里有当前经纬度的信息</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getStatus() == BMAP_STATUS_SUCCESS)&#123;</div><div class="line">            <span class="built_in">console</span>.log(r.point) ; </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            alert(<span class="string">'failed:'</span>+<span class="keyword">this</span>.getStatus());</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">getCurrentPosition() ;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>不过回调的时间会长一些，2s左右</p>
</blockquote>
<h4 id="六、通过两地的经纬度获取两地的距离"><a href="#六、通过两地的经纬度获取两地的距离" class="headerlink" title="六、通过两地的经纬度获取两地的距离"></a>六、通过两地的经纬度获取两地的距离</h4><p>这里用到了一些数学和地理知识：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">distance</span> (<span class="params">start,end</span>) </span>&#123;    <span class="comment">//</span></div><div class="line">    <span class="keyword">var</span> x1 = (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*start.y;</div><div class="line">    <span class="keyword">var</span> x2 = (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*end.y;</div><div class="line">    <span class="keyword">var</span> y1 = (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*start.x;</div><div class="line">    <span class="keyword">var</span> y2 = (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*end.x;</div><div class="line">    <span class="keyword">var</span> R = <span class="number">6371</span> ;  <span class="comment">//地球半径</span></div><div class="line">    <span class="keyword">var</span> dis = <span class="built_in">Math</span>.acos(<span class="built_in">Math</span>.sin(x1)*<span class="built_in">Math</span>.sin(x2)+<span class="built_in">Math</span>.cos(x1)*<span class="built_in">Math</span>.cos(x2)*<span class="built_in">Math</span>.cos(y2-y1))*R;</div><div class="line">    <span class="keyword">return</span> dis.toFixed(<span class="number">2</span>) ;  <span class="comment">//四舍五入保留两位小数，返回string类型</span></div><div class="line">&#125;</div><div class="line">distance(&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>&#125;,&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">1</span>&#125;) <span class="comment">//算出经度为0，纬度为0 与 经度为0，纬度为1 两点之间的距离</span></div></pre></td></tr></table></figure></p>
<h4 id="七、百度地图API其他的一些功能，例如搜索、给出出行路线"><a href="#七、百度地图API其他的一些功能，例如搜索、给出出行路线" class="headerlink" title="七、百度地图API其他的一些功能，例如搜索、给出出行路线"></a>七、百度地图API其他的一些功能，例如搜索、给出出行路线</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建信息窗口对象</span></div><div class="line"><span class="keyword">var</span> infoWindow = <span class="keyword">new</span> BMap.InfoWindow(<span class="string">"I am here"</span>);</div><div class="line">map.openInfoWindow(infoWindow,point);</div><div class="line"></div><div class="line"><span class="comment">//在地图中添加折线</span></div><div class="line"><span class="keyword">var</span> polyline = <span class="keyword">new</span> BMap.Polyline([</div><div class="line">        <span class="keyword">new</span> BMap.Point(x,y),</div><div class="line">        <span class="keyword">new</span> BMap.Point(x+<span class="number">0.01</span>,y+<span class="number">0.01</span>)</div><div class="line">    ],&#123;<span class="attr">strokeColor</span>:<span class="string">"blue"</span>, <span class="attr">strokeWeight</span>:<span class="number">6</span>, <span class="attr">strokeOpacity</span>:<span class="number">0.5</span>&#125;</div><div class="line">);</div><div class="line">map.addOverlay(polyline);   </div><div class="line"></div><div class="line"><span class="comment">//在地图中添加搜索功能</span></div><div class="line"><span class="keyword">var</span> local = <span class="keyword">new</span> BMap.LocalSearch(map, &#123;</div><div class="line">    renderOptions:&#123;</div><div class="line">        map: map</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">local.search(<span class="string">"天安门"</span>);</div><div class="line"></div><div class="line"><span class="comment">//给出地图的路线</span></div><div class="line"><span class="keyword">var</span> driving = <span class="keyword">new</span> BMap.DrivingRoute(map, &#123;</div><div class="line">    renderOptions: &#123;</div><div class="line">        map: map,</div><div class="line">        autoViewport: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">driving.search(<span class="string">"中关村"</span>, <span class="string">"天安门"</span>);</div></pre></td></tr></table></figure>
<p>感兴趣的话可以尝试一下，时间有限，回家睡觉，就不一一列举了。</p>
<hr>
<blockquote>
<p>2017-09-16 增</p>
</blockquote>
<ul>
<li>需要注意的的是，如在本地起服务器，地址是localhost的话，有时候会定位失败。这时候可以尝试把localhost换成本机的IP地址再试一下。</li>
</ul>
<blockquote>
<p>参考文献<br><a href="http://lbsyun.baidu.com/cms/jsapi/class/jsapi_reference.html#a0b0" target="_blank" rel="external">百度地图API文档</a><br><a href="http://www.cnblogs.com/zhoug2020/p/3950933.html" target="_blank" rel="external">许鸿飞的博客</a><br><a href="http://www.cnblogs.com/zhoug2020/p/3950933.html" target="_blank" rel="external">“莫水千留”的博客</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 百度地图API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat服务器配置虚拟目录]]></title>
      <url>/2017/08/09/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>前两天配置Tomcat服务器老是起不起来，后来在孙老板的帮助下配置成功，这里做一个备忘 </p>
</blockquote>
<a id="more"></a>
<h4 id="1、如何配置虚拟目录？"><a href="#1、如何配置虚拟目录？" class="headerlink" title="1、如何配置虚拟目录？"></a>1、如何配置虚拟目录？</h4><blockquote>
<p>找到 <code>Tomcat</code> 所在的文件目录，在其下有一个 <code>bin\server.xml</code> 文件,在 <code>&lt;Host&gt;&lt;/Host&gt;</code> 里的最后一行，加入如下代码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">docBase</span>=<span class="string">"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\app"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>写完整了就像这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></div><div class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line"><span class="tag">            <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></div><div class="line"><span class="tag">            <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">docBase</span>=<span class="string">"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\app"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>其中的 <code>docBase</code> 的值就是要配的虚拟目录，注意要写成绝对路径,另外要注意的就是字符串要做转义处理 <code>\</code> 转义成 <code>\\</code></strong></p>
</blockquote>
<h4 id="2、如果起不起来怎么办？"><a href="#2、如果起不起来怎么办？" class="headerlink" title="2、如果起不起来怎么办？"></a>2、如果起不起来怎么办？</h4><p>这时候 <code>log</code> 文件夹下的日志或许能帮助我们了解到底报了什么错。很多情况下报错的原因是端口被暂用，这时候只要在 <code>server.xml</code> 下改一下相应的端口号就好啦！</p>
<blockquote>
<p>需要注意的是，<code>server.xml</code> 下配置不止一个端口号，有时候改了只改了一个端口号，可能仍然会报错，这时候就要修改其他被占用的端口号。</p>
</blockquote>
<hr>
<blockquote>
<p>想要了解tomcat各个端口的实际意义，可以参考以下链接</p>
</blockquote>
<p><a href="http://blog.csdn.net/fengspg/article/details/41895011" target="_blank" rel="external">“风的脚步”的CSDN博客</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 后台备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过JS获得浏览器的各种高度与宽度]]></title>
      <url>/2017/08/07/%E9%80%9A%E8%BF%87JS%E8%8E%B7%E5%BE%97%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%84%E7%A7%8D%E9%AB%98%E5%BA%A6%E4%B8%8E%E5%AE%BD%E5%BA%A6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>浏览器的窗口的大小可以通过 <code>document</code> 和 <code>window</code> 提供的一系列属性来获得 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/*</span></div><div class="line"><span class="comment">    网页可见区域宽：document.body.clientWidth</span></div><div class="line"><span class="comment">    网页可见区域高：document.body.clientHeight</span></div><div class="line"><span class="comment">    网页可见区域宽：document.body.offsetWidth  (包括边线的宽)</span></div><div class="line"><span class="comment">    网页可见区域高：document.body.offsetHeight (包括边线的宽)(注意不是浏览器窗口的高度)</span></div><div class="line"><span class="comment">    dom元素相对于其父定位元素顶部的距离：dom.offsetTop  (dom为dom对象的引用)(包括边线的宽)</span></div><div class="line"><span class="comment">    dom元素相对于其父定位元素左边的距离：dom.offsetLeft (dom为dom对象的引用)(包括边线的宽)</span></div><div class="line"><span class="comment">    网页正文全文宽：document.body.scrollWidth</span></div><div class="line"><span class="comment">    网页正文全文高：document.body.scrollHeight (注意不是浏览器窗口的高度)</span></div><div class="line"><span class="comment">    网页被卷去的高：document.body.scrollTop    (is_writeable)</span></div><div class="line"><span class="comment">    网页被卷去的左：document.body.scrollLeft   (is_writeable)</span></div><div class="line"><span class="comment">    网页正文部分上：window.screenTop(相对于桌面的高)</span></div><div class="line"><span class="comment">    网页正文部分左：window.screenLeft(相对于桌面的左)</span></div><div class="line"><span class="comment">    屏幕分辨率的高：window.screen.height</span></div><div class="line"><span class="comment">    屏幕分辨率的宽：window.screen.width</span></div><div class="line"><span class="comment">    屏幕可用工作区高度：window.screen.availHeight (相对于 屏幕分辨率的高 会把浏览器输入栏的高度去掉)</span></div><div class="line"><span class="comment">    屏幕可用工作区宽度：window.screen.availWidth  (似乎和 window.screen.width 的值一样)</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Query</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页可见区域宽：document.body.clientWidth -&gt;"</span>+<span class="built_in">document</span>.body.clientWidth) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页可见区域高：document.body.clientHeight -&gt;"</span>+<span class="built_in">document</span>.body.clientHeight) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页可见区域宽：document.body.offsetWidth (包括边线的宽) -&gt;"</span>+<span class="built_in">document</span>.body.offsetWidth) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页可见区域高：document.body.offsetHeight (包括边线的宽) -&gt;"</span>+<span class="built_in">document</span>.body.offsetHeight) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页正文全文宽：document.body.scrollWidth -&gt;"</span>+<span class="built_in">document</span>.body.scrollWidth) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页正文全文高：document.body.scrollHeight -&gt;"</span>+<span class="built_in">document</span>.body.scrollHeight) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页被卷去的高：document.body.scrollTop -&gt;"</span>+<span class="built_in">document</span>.body.scrollTop ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页被卷去的左：document.body.scrollLeft -&gt;"</span>+<span class="built_in">document</span>.body.scrollLeft ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页正文部分上：window.screenTop -&gt;"</span>+<span class="built_in">window</span>.screenTop ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页正文部分左：window.screenLeft -&gt;"</span>+<span class="built_in">window</span>.screenLeft) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"屏幕分辨率的高：window.screen.height -&gt;"</span>+<span class="built_in">window</span>.screen.height ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"屏幕分辨率的宽：window.screen.width -&gt;"</span>+<span class="built_in">window</span>.screen.width ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"屏幕可用工作区高度：window.screen.availHeight -&gt;"</span>+<span class="built_in">window</span>.screen.availHeight ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"屏幕可用工作区宽度：window.screen.availWidth -&gt;"</span>+<span class="built_in">window</span>.screen.availWidth ) ;</div><div class="line">&#125;</div><div class="line">Query() ;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过css样式禁止事件&禁止图标]]></title>
      <url>/2017/08/07/%E9%80%9A%E8%BF%87csss%E6%A0%B7%E5%BC%8F%E7%A6%81%E6%AD%A2%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候，我们只想显示页面给用户看，而不想让用户有任何操作，这时候，在css中写入样式 <code>pointer-events:none</code> 就能达到想要的效果 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">            <span class="selector-class">.test1</span>&#123;</span></div><div class="line"><span class="undefined">                cursor: not-allowed;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.test2</span>&#123;</span></div><div class="line"><span class="css">                <span class="selector-tag">pointer-events</span><span class="selector-pseudo">:none</span>;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.test3</span>&#123;</span></div><div class="line"><span class="undefined">                cursor: not-allowed;</span></div><div class="line"><span class="css">                <span class="selector-tag">pointer-events</span><span class="selector-pseudo">:none</span>;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"test1"</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>&gt;</span>按钮一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"test2"</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>&gt;</span>按钮二<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"test3"</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>&gt;</span>按钮二<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">'test1'</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">'test2'</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">'test3'</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">con</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">            alert(<span class="string">"show here!"</span>) ;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>不过需要注意的是，由于设置了 <code>pointer-events:none</code> 把所有点击事件全部禁掉了，所有的 <code>cursor</code> 也没有了,所以原本可以通过 <code>cursor: not-allowed</code> 显示的禁止图标也不会再显示了</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端备忘 </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用闭包或者setInterval实现一个计时器]]></title>
      <url>/2017/08/07/%E7%94%A8%E9%97%AD%E5%8C%85%E6%88%96%E8%80%85setInterval%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E6%97%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在开发业务中，有时候需要手机获取验证码，一般情况下，在点击 <code>获取验证码</code> 后，会有一个60秒倒计时的需求，这时候可以用以下两个方法来实现 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>通过JS中的 <code>闭包</code> 的来实现，代码如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> time = time||<span class="number">60</span> ;  <span class="comment">//默认60s倒计时</span></div><div class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</div><div class="line">            setTimeout(fn,<span class="number">1000</span>) ;</div><div class="line">            <span class="built_in">console</span>.log(time--+<span class="string">'s'</span>) ;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'end'</span>) ;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> fn ;</div><div class="line">&#125;</div><div class="line">countDown()() ; <span class="comment">//运行方法</span></div></pre></td></tr></table></figure>
<blockquote>
<p>也可以通过JS中的 <code>setInterval</code> 方法来实现，代码如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> time = time||<span class="number">10</span> ; </div><div class="line">    <span class="keyword">var</span> fn = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">console</span>.log(time--+<span class="string">'s'</span>) ;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'end'</span>) ;</div><div class="line">            clearInterval(fn);</div><div class="line">        &#125;</div><div class="line">    &#125;,<span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line">countDown() ; <span class="comment">//运行方法</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中查询URL字符串中的参数]]></title>
      <url>/2017/08/03/JS%E4%B8%AD%E6%9F%A5%E8%AF%A2URL%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>原生JS中的 <code>location.search</code> 可以返回从问号到 URL 末尾的所有内容，但是访问其中的每个字符串参数却很麻烦。这时候，可以创建一个函数，用以解析查询字符串 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryStringArgs</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//取得查询字符串并去掉开头的问号</span></div><div class="line">    <span class="keyword">var</span> qs = (location.search.length &gt; <span class="number">0</span> ? location.search.substring(<span class="number">1</span>) : <span class="string">""</span>),</div><div class="line"></div><div class="line">    <span class="comment">//保存数据的对象</span></div><div class="line">    args = &#123;&#125;,</div><div class="line"></div><div class="line">    <span class="comment">//取得每一项</span></div><div class="line">    items = qs.length ? qs.split(<span class="string">"&amp;"</span>) : [],</div><div class="line">    item = <span class="literal">null</span>,</div><div class="line">    name = <span class="literal">null</span>, </div><div class="line">    value = <span class="literal">null</span>,</div><div class="line">    <span class="comment">//在 for 循环中使用</span></div><div class="line">    i = <span class="number">0</span>,</div><div class="line">    len = items.length;</div><div class="line">    <span class="comment">//逐个将每一项添加到 args 对象中</span></div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">        item = items[i].split(<span class="string">"="</span>);</div><div class="line">        name = <span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>]);</div><div class="line">        value = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">if</span> (name.length) &#123;</div><div class="line">            args[name] = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> args;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样<code>getQueryStringArgs()</code>方法就会返回包含所有URL参数的一个对象。</p>
<blockquote>
<p>参考文献<br>JavaScript高级程序设计（第3版）P207</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo设置博文置顶]]></title>
      <url>/2017/07/31/hexo%E8%AE%BE%E7%BD%AE%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候我们需要置顶自己的某篇博文，这时候我们可以手动修改<code>node_moudles</code>文件夹下的相关代码 </p>
</blockquote>
<a id="more"></a>
<div style="text-align: -webkit-auto;">修改 <code>hero-generator-index</code> 插件，把文件：<code>node_modules/hexo-generator-index/lib/generator.js</code> 内的代码替换为如下所示：</div>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</div><div class="line">  <span class="keyword">var</span> posts = locals.posts;</div><div class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></div><div class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></div><div class="line">    &#125;);</div><div class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</div><div class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</div><div class="line">    perPage: config.index_generator.per_page,</div><div class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</div><div class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</div><div class="line">    data: &#123;</div><div class="line">      __index: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在文章中添加相应的 <code>top</code> 值，数值越大文章就会越靠前，如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 解决Charles乱码问题</div><div class="line">date: <span class="number">2017</span><span class="number">-05</span><span class="number">-22</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">48</span></div><div class="line">tags: 技巧</div><div class="line">categories: 技巧</div><div class="line">copyright: <span class="literal">true</span></div><div class="line">top: <span class="number">100</span></div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p>参考文献<br><a href="http://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="external">Moorez的简书</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
