<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[CSS样式踩坑小结]]></title>
      <url>/2017/10/12/CSS%E6%A0%B7%E5%BC%8F%E8%B8%A9%E5%9D%91%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近做了一些项目，在CSS方面遇到了不少坑，在这里做一个小结 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、iOS上的Safari没有滑动惯性"><a href="#一、iOS上的Safari没有滑动惯性" class="headerlink" title="一、iOS上的Safari没有滑动惯性"></a>一、iOS上的Safari没有滑动惯性</h3><p>在开发iphone微信端的时候，如果给一个<code>div</code>设置样式为滑动,样式如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">overflow-y</span>:scroll ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>会发现Safari的滑动很僵硬，这时候可以用以下样式来解决：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">-webkit-overflow-scrolling</span>: touch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="二、去除iphone中点击按钮会出现一个半透明的灰色背景的问题"><a href="#二、去除iphone中点击按钮会出现一个半透明的灰色背景的问题" class="headerlink" title="二、去除iphone中点击按钮会出现一个半透明的灰色背景的问题"></a>二、去除iphone中点击按钮会出现一个半透明的灰色背景的问题</h3><p>在开发iphone微信端的时候，同样发现，如果点击一个按钮，按钮会出现一个半透明的灰色背景，这时候可以用以下样式来解决：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>,<span class="selector-tag">img</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">div</span>&#123;                       </div><div class="line">  <span class="attribute">-webkit-tap-highlight-color</span>:<span class="built_in">rgba</span>(255,255,255,0); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、div中保留保留文本的空格、换行以及tab字符的处理"><a href="#三、div中保留保留文本的空格、换行以及tab字符的处理" class="headerlink" title="三、div中保留保留文本的空格、换行以及tab字符的处理"></a>三、div中保留保留文本的空格、换行以及tab字符的处理</h3><p>在后台用<code>textarea</code>标签写入文本放入前端显示的时候，发现之前在<code>textarea</code>中的文本都被格式化了（浏览器默认把文本中的空格、换行以及tab字符都处理掉了），如果想保留文本的格式，可以用以下样式来解决：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">white-space</span>: pre-wrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要特别注意的是，<code>white-space</code>有五种值可以选择，<code>normal</code>、<code>pre</code> 、<code>nowrap</code> 、<code>pre-wrap</code>、<code>pre-wrap</code>,每一种值都有不同的表现形式，其中：</p>
<blockquote>
<ul>
<li><code>normal</code> 是 <code>white-space</code> 的默认值；</li>
<li><code>pre</code> 会保留文本中额外的空格, 而且会保留文本中的换行；</li>
<li><code>nowrap</code> 不会保留文本中额外的空格，而且会禁止文本中的换行；</li>
<li><code>pre-wrap</code> 会保留文本中额外的空格, 而且会让文本正常的换行；</li>
<li><code>pre-line</code> 不会保留文本中额外的空格，但是会让文本正常的换行；</li>
</ul>
</blockquote>
<p>这样解释读者会有一些迷惑，接下来用代码进一步说明，参考如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></div><div class="line"><span class="undefined">        white-space: pre</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.b</span>&#123;</span></div><div class="line"><span class="undefined">        white-space: nowrap</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.c</span>&#123;</span></div><div class="line"><span class="undefined">        white-space: pre-wrap</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.d</span>&#123;</span></div><div class="line"><span class="undefined">        white-space: pre-line</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.e</span>&#123;</span></div><div class="line"><span class="undefined">        white-space: normal</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d"</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"e"</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    hdfkf    sjnfjsdkfn    sdjf  d d dfklsf  sdfhjs sdfbsjdh df</div><div class="line">    djfsf dsfsdf</div><div class="line"></div><div class="line">    sdfbsjdh</div><div class="line"></div><div class="line">    hfh         hfjsgjf</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里我们要特地留意一下 <code>pre</code> 与 <code>pre-wrap</code> 的区别，正常情况下，两者的现实没有差异，如下图：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/1.jpeg?raw=true" alt="Alt text"></p>
<p>但是如果将窗口拉窄,我们会发现，<code>pre-wrap</code>会让文本根据窗口宽窄自动换行，而<code>pre</code>的换行不会受窗口宽窄影响：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/2.jpeg?raw=true" alt="Alt text"></p>
<h3 id="四、让盒子里的字超出长度后，可以缩略显示变成点点点"><a href="#四、让盒子里的字超出长度后，可以缩略显示变成点点点" class="headerlink" title="四、让盒子里的字超出长度后，可以缩略显示变成点点点"></a>四、让盒子里的字超出长度后，可以缩略显示变成点点点</h3><p>1、在 <code>div</code> 框里的内容超出长度后，我们可以让超出部分的内容变成点点点，样式如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">    <span class="attribute">white-space</span>:nowrap; </div><div class="line">    <span class="attribute">text-overflow</span>:ellipsis;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们就能获得我们想要的样式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></div><div class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>; </span></div><div class="line"><span class="undefined">        border: 1px solid gray;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.ellipsis</span>&#123;</span></div><div class="line"><span class="css">        <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span></div><div class="line"><span class="css">        <span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>; </span></div><div class="line"><span class="css">        <span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>Wow,CSS is very very very very very cool !<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a ellipsis"</span>&gt;</span>Wow,CSS is very very very very very cool !<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/3.jpeg?raw=true" alt="Alt text"></p>
<p>2、但是<strong>如果我们想让div里的内容两行或者三行之后再显示点点点</strong>，我们应该怎么办呢？如果你也有疑惑，可以参考如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></div><div class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>; </span></div><div class="line"><span class="undefined">        border: 1px solid gray;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.ellipsis</span>&#123;</span></div><div class="line"><span class="undefined">        display: -webkit-box;</span></div><div class="line"><span class="undefined">        -webkit-box-orient: vertical;</span></div><div class="line"><span class="undefined">        -webkit-line-clamp: 2;</span></div><div class="line"><span class="undefined">        overflow: hidden;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>Wow,CSS is very very very very very cool !<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a ellipsis"</span>&gt;</span>Wow,CSS is very very very very very cool !<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/4.jpeg?raw=true" alt="Alt text"></p>
<blockquote>
<p>这时候变成三行后再省略也相当简单，直接将 <code>-webkit-line-clamp</code> 变成 3 就行了。</p>
</blockquote>
<p>3、特别特别需要注意的是，如果遇到丧心病狂的测试，他会给出一长串连续的英文字符，那么以上代码有可能会失效，这时候就需要<code>word-break: break-all;</code> 来帮助我们，参考如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.a</span>&#123;</span></div><div class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>; </span></div><div class="line"><span class="undefined">        border: 1px solid gray;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.break</span>&#123;</span></div><div class="line"><span class="undefined">        word-break: break-all ;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-class">.ellipsis</span>&#123;</span></div><div class="line"><span class="undefined">        display: -webkit-box;</span></div><div class="line"><span class="undefined">        -webkit-box-orient: vertical;</span></div><div class="line"><span class="undefined">        -webkit-line-clamp: 2;</span></div><div class="line"><span class="undefined">        overflow: hidden;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>ssssssasjdjdfjsdfksdfgksdfgskdfgskjdfksdf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a ellipsis"</span>&gt;</span>ssssssasjdjdfjsdfksdfgksdfgskdfgskjdfksdf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a break ellipsis"</span>&gt;</span>ssssssasjdjdfjsdfksdfgksdfgskdfgskjdfksdf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a break"</span>&gt;</span>ssssssasjdjdfjsdfksdfgksdfgskdfgskjdfksdf<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/5.jpeg?raw=true" alt="Alt text"></p>
<h3 id="五、word-wrap和word-break的区别"><a href="#五、word-wrap和word-break的区别" class="headerlink" title="五、word-wrap和word-break的区别"></a>五、word-wrap和word-break的区别</h3><p>1、word-wrap和word-break都能使过长的字符串断开，防止其溢出，那他们两的区别又是什么呢？</p>
<p>2、我们先从<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-break" target="_blank" rel="external">MDN</a>文档里了解它们的概要：</p>
<p>CSS 属性 <code>word-break</code> 指定了怎样在单词内断行。<br>他的属性有：</p>
<blockquote>
<ul>
<li><code>normal</code>   使用默认的断行规则。</li>
<li><code>break-all</code>   对于non-CJK (CJK 指中文/日文/韩文) 文本，可在任意字符间断行。</li>
<li><code>keep-all</code>   CJK 文本不断行。 Non-CJK 文本表现同 normal。</li>
</ul>
</blockquote>
<p>CSS 属性 <code>word-wrap</code> 是用来说明当一个不能被分开的字符串太长而不能填充其包裹盒时，为防止其溢出，浏览器是否允许这样的单词中断换行。<br>他的属性有：</p>
<blockquote>
<ul>
<li><code>normal</code>   表示在正常的单词结束处换行。</li>
<li><code>break-word</code>   表示如果行内没有多余的地方容纳该单词到结尾，则那些正常的不能被被分割的单词会被强制分割换行。</li>
</ul>
</blockquote>
<p>3、仅仅看解释并不能看出什么头绪，接下来用代码来演示他们的差异，代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.a</span>&#123;</span></div><div class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>; </span></div><div class="line"><span class="undefined">    border: 1px solid gray;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.break</span>&#123;</span></div><div class="line"><span class="undefined">    word-break: break-all ;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.wrap</span>&#123;</span></div><div class="line"><span class="undefined">    word-wrap: break-word ;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>you are vvvvvvvvvvvvvvvvvvvvvvvery beautiful!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a break"</span>&gt;</span>you are vvvvvvvvvvvvvvvvvvvvvvvery beautiful!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a wrap"</span>&gt;</span>you are vvvvvvvvvvvvvvvvvvvvvvvery beautiful!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1710/6.jpeg?raw=true" alt="Alt text"></p>
<p>我们发现，当使用<code>word-wrap: break-word;</code>时，如果这个时候文本溢出，它会首先尝试挪到下一行，看看下一行的宽度够不够，不够的话才会进行单词内的断句。而使用<code>word-break:break-all</code>时，他会直接进行单词内的断句。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中Object.keys、Object.values、Object.entries的使用方法]]></title>
      <url>/2017/10/11/JS%E4%B8%ADObject-keys%E3%80%81Object-values%E3%80%81Object-entries%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>一直好奇JS中Object上静态方法的使用方式，上网找了不少教程，今天在这里和大家分享一下 <code>Object.keys</code>、<code>Object.values</code>、<code>Object.entries</code>的使用方法 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、大致了解"><a href="#一、大致了解" class="headerlink" title="一、大致了解"></a>一、大致了解</h3><p>首先我们需要了解的是<code>Object.keys</code>是<code>ES5</code>中引入的的方法，在<code>ES2017</code>中，引入了跟<code>Object.keys</code>配套的<code>Object.values</code>和<code>Object.entries</code>，作为遍历一个对象的补充手段。</p>
<blockquote>
<p>需要注意的是，<code>Object.keys()</code>,<code>Object.values()</code>,<code>Object.entries()</code>都会返回一个由一个给定对象的<strong>自身可枚举属性</strong>组成的数组，数组中属性名的排列顺序和使用 <code>for...in</code> 循环遍历该对象时返回的顺序一致( 区别在于 <code>for...in</code> 还会循环枚举原型链中的属性 )。</p>
</blockquote>
<p>参考一些代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.keys(obj); <span class="comment">// ['a','b','c']</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.values(obj); <span class="comment">// [1,2,3]</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.entries(obj); <span class="comment">// [['a',1],['b',2],['c',3]]</span></div></pre></td></tr></table></figure></p>
<p>我们会发现，<code>Object.keys</code>会<strong>返回参数对象自身的所有可遍历属性的键名形成的数组</strong>，<code>Object.values</code>会<strong>返回参数对象自身的所有可遍历属性的键值形成的数组</strong>，<code>Object.entries</code>会<strong>返回参数对象自身的所有可遍历属性的键值对数组形成的数组</strong></p>
<h3 id="二、其他一些例子"><a href="#二、其他一些例子" class="headerlink" title="二、其他一些例子"></a>二、其他一些例子</h3><p>再来看一些<code>Object.keys</code>、<code>Object.values</code>、<code>Object.entries</code>的其他使用方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Array 对象 */</span> </div><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(arr)); <span class="comment">// ["0", "1", "2"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(arr)); <span class="comment">// ["a", "b", "c"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(arr)); <span class="comment">// [["0", "a"], ["1", "b"], ["2", "c"]]</span></div><div class="line"></div><div class="line"><span class="comment">/* 类数组 对象 */</span> </div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span> : <span class="string">"a"</span>, <span class="number">1</span> : <span class="string">"b"</span>, <span class="number">2</span> : <span class="string">"c"</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// ["0", "1", "2"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// ["a", "b", "c"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj)); <span class="comment">// [["0", "a"], ["1", "b"], ["2", "c"]]</span></div><div class="line"></div><div class="line"><span class="comment">/* 类数组 对象, 随机排序 */</span></div><div class="line"><span class="keyword">var</span> obj1 = &#123; <span class="number">100</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">7</span>: <span class="string">'c'</span> &#125;; </div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj1)); <span class="comment">// ["2", "7", "100"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj1)); <span class="comment">// ["b", "c", "a"]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj1)); <span class="comment">// [["2", "b"],["7", "c"],["100", "a"]]</span></div><div class="line"></div><div class="line"><span class="comment">/* a 是个不可枚举的属性 */</span> </div><div class="line"><span class="keyword">var</span> obj2 = &#123;&#125;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj2,<span class="string">'a'</span>, &#123;</div><div class="line">    value : <span class="string">"hala"</span></div><div class="line">&#125;);</div><div class="line">obj2.b = <span class="string">"heihei"</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj2)); <span class="comment">// ['b']</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj2)); <span class="comment">// ['heihei']</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj2)); <span class="comment">// [["b", "heihei"]]</span></div></pre></td></tr></table></figure></p>
<h3 id="三、注意点"><a href="#三、注意点" class="headerlink" title="三、注意点"></a>三、注意点</h3><p>在<code>ES5</code>里，如果传入的参数不是对象（而是一个原始值），那么它会抛出 <code>TypeError</code>。但是在<code>ES2015</code>中，非对象的参数将被强制转换为一个对象，参考如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.keys(<span class="string">"foo"</span>); <span class="comment">// TypeError: "foo" is not an object (ES5 code)</span></div><div class="line"><span class="built_in">Object</span>.keys(<span class="string">"foo"</span>);<span class="comment">// ["0", "1", "2"]                           (ES2015 code)</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.values(<span class="string">"foo"</span>); <span class="comment">// TypeError: "foo" is not an object (ES5 code)</span></div><div class="line"><span class="built_in">Object</span>.values(<span class="string">"foo"</span>);<span class="comment">// ["f", "o", "0"]                         (ES2015 code)</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.entries(<span class="string">"foo"</span>); <span class="comment">// TypeError: "foo" is not an object (ES5 code)</span></div><div class="line"><span class="built_in">Object</span>.entries(<span class="string">"foo"</span>);<span class="comment">// [["0", "f"],["1", "o"],["2", "o"]]     (ES2015 code)</span></div></pre></td></tr></table></figure></p>
<h3 id="四、Object-entries的另外用法"><a href="#四、Object-entries的另外用法" class="headerlink" title="四、Object.entries的另外用法"></a>四、Object.entries的另外用法</h3><p><code>new Map()</code> 构造函数接受一个可迭代的<code>entries</code>。借助<code>Object.entries</code>方法你可以很容易的将<code>Object</code>转换为<code>Map</code>,参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;; </div><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));</div><div class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map &#123; foo: "bar", baz: 42 &#125;</span></div></pre></td></tr></table></figure>
<p>参考文档<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">MDN web docs</a><br><a href="http://es6.ruanyifeng.com/#docs/object#Object-keys，Object-values，Object-entries" target="_blank" rel="external">阮一峰ES6语法</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中Object.create的使用方法]]></title>
      <url>/2017/10/10/JS%E4%B8%ADObject-defineProperty%E4%B8%8EObject-create%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%952/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>一直好奇JS中Object上静态方法的使用方式，上网找了不少教程，今天在这里和大家分享一下 <code>Object.create</code>的使用方法 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、Object-create"><a href="#一、Object-create" class="headerlink" title="一、Object.create"></a>一、Object.create</h3><p>1、<code>Object.create()</code> 方法会使用指定的原型对象及其属性去创建一个新的对象，语法如下：</p>
<blockquote>
<p>Object.create(proto, [ propertiesObject ])</p>
</blockquote>
<p>其中：</p>
<blockquote>
<ul>
<li><code>proto</code>一个对象，新创建对象的原型</li>
<li><code>propertiesObject</code>可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与<code>Object.defineProperties()</code>的第二个参数一样）。</li>
<li>函数将返回一个定原型对象上添加新属性后的新对象</li>
<li>如果 <code>propertiesObject</code> 参数不是 <code>null</code> 也不是对象，则抛出一个 <code>TypeError</code> 异常。</li>
</ul>
</blockquote>
<p>2、一些例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">v</span>:<span class="number">41</span>&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.create(a)</div><div class="line">b.__proto__ === a <span class="comment">//true </span></div><div class="line"><span class="comment">//Object.create返回的对象的原型是其第一个参数。</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">o = &#123;&#125;;</div><div class="line"><span class="comment">// 以字面量方式创建的空对象就相当于:</span></div><div class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">o = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</div><div class="line">  <span class="comment">// foo会成为所创建对象的数据属性</span></div><div class="line">  foo: &#123; </div><div class="line">    writable:<span class="literal">true</span>,</div><div class="line">    configurable:<span class="literal">true</span>,</div><div class="line">    value: <span class="string">"hello"</span> </div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// bar会成为所创建对象的访问器属性</span></div><div class="line">  bar: &#123;</div><div class="line">    configurable: <span class="literal">false</span>,</div><div class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">10</span> &#125;,</div><div class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Setting `o.bar` to"</span>, value);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个以另一个空对象为原型,且拥有一个属性p的对象</span></div><div class="line">o = <span class="built_in">Object</span>.create(&#123;&#125;, &#123; <span class="attr">p</span>: &#123; <span class="attr">value</span>: <span class="number">42</span> &#125; &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:</span></div><div class="line">o.p = <span class="number">24</span></div><div class="line">o.p <span class="comment">//42</span></div><div class="line"></div><div class="line">o.q = <span class="number">12</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o) &#123;  <span class="comment">//for..in..不可枚举</span></div><div class="line">   <span class="built_in">console</span>.log(prop)</div><div class="line">&#125;</div><div class="line"><span class="comment">//"q"</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> o.p <span class="comment">// Nothing happens</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个可写的,可枚举的,可配置的属性p</span></div><div class="line">o2 = <span class="built_in">Object</span>.create(&#123;&#125;, &#123;</div><div class="line">  p: &#123;</div><div class="line">    value: <span class="number">42</span>, </div><div class="line">    writable: <span class="literal">true</span>,</div><div class="line">    enumerable: <span class="literal">true</span>,</div><div class="line">    configurable: <span class="literal">true</span> </div><div class="line">  &#125; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>3、使用 <code>Object.create</code> 实现类式继承,参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Shape - superclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">0</span>;</div><div class="line">  <span class="keyword">this</span>.y = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x += x;</div><div class="line">    <span class="keyword">this</span>.y += y;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">"Shape moved."</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Rectangle - subclass</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">//call super constructor.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// subclass extends superclass</span></div><div class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</div><div class="line">Rectangle.prototype.constructor = Rectangle;</div><div class="line"></div><div class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Is rect an instance of Rectangle?'</span>,</div><div class="line">  rect <span class="keyword">instanceof</span> Rectangle); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Is rect an instance of Shape?'</span>,</div><div class="line">  rect <span class="keyword">instanceof</span> Shape); <span class="comment">// true</span></div><div class="line"></div><div class="line">rect.move(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">//Outputs, "Shape moved."</span></div></pre></td></tr></table></figure>
<p>如果有兴趣了解用其他方式实现类继承，可以参考我的这篇博客<a href="http://www.wangyulue.com/2017/09/18/%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B%E9%93%BE/#more" target="_blank" rel="external">理解原型链</a>;</p>
<p>参考文档<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="external">MDN web docs</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中Object.defineProperty的使用方法]]></title>
      <url>/2017/10/10/JS%E4%B8%ADObject-defineProperty%E4%B8%8EObject-create%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>一直好奇JS中Object上静态方法的使用方式，上网找了不少教程，今天在这里和大家分享一下 <code>Object.defineProperty</code>的使用方法 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、Object-defineProperty"><a href="#一、Object-defineProperty" class="headerlink" title="一、Object.defineProperty"></a>一、Object.defineProperty</h3><p>1、<code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象，语法如下：</p>
<blockquote>
<p>Object.defineProperty(obj, prop, descriptor)</p>
</blockquote>
<p>其中：</p>
<blockquote>
<ul>
<li><code>obj</code>是需要被操作的目标对象</li>
<li><code>prop</code>是目标对象需要定义或修改的属性的名称</li>
<li><code>descriptor</code>是将被定义或修改的属性的描述符</li>
<li>函数将返回被传递给函数的对象</li>
</ul>
</blockquote>
<p>2、一个简单的实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">value</span> : <span class="number">37</span>&#125;);  <span class="comment">//&#123;a: 37&#125;</span></div></pre></td></tr></table></figure>
<p>上述代码中，我们用<code>Object.defineProperty</code>为对象o创建的了一个新属性a,它的值为37，但是我们也发现了一些问题，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">value</span> : <span class="number">37</span>&#125;);  <span class="comment">//&#123;a: 37&#125;</span></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 打印 37</span></div><div class="line">o.a = <span class="number">25</span>; <span class="comment">// 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）</span></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 打印 37， 赋值不起作用。</span></div></pre></td></tr></table></figure>
<p>我们发现，对o.a赋值似乎不起作用，原来<code>Object.defineProperty</code>的第三个参数<code>descriptor</code>有很多属性描述符，其中就有<strong>是否能被赋值运算符改变value</strong>的属性描述符。</p>
<p>3、具体的属性描述符如下：</p>
<blockquote>
<ul>
<li><code>configurable</code> 当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。<strong>默认为 false</strong>。</li>
<li><code>enumerable</code> 当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中<strong>(可以被for..in..遍历)</strong>。<strong>默认为 false</strong>。</li>
<li><code>value</code> 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。<strong>默认为 undefined</strong>。</li>
<li><code>writable</code> 当且仅当该属性的 writable 为 true 时，该属性才能被赋值运算符改变。<strong>默认为 false</strong>。</li>
<li><code>get</code> 一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。<strong>默认为 undefined</strong>。</li>
<li><code>set</code> 一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。<strong>默认为 undefined</strong>。</li>
</ul>
</blockquote>
<p>4、这时候我们改造一下代码，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;</div><div class="line">    value : <span class="number">37</span>,</div><div class="line">    writable : <span class="literal">true</span>,</div><div class="line">    enumerable : <span class="literal">true</span>,</div><div class="line">    configurable : <span class="literal">true</span></div><div class="line">&#125;);  <span class="comment">//&#123;a: 37&#125;</span></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 打印 37</span></div><div class="line">o.a = <span class="number">25</span>;</div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 打印 25</span></div></pre></td></tr></table></figure>
<p>这样的话我们就可以正确地为属性赋值了。</p>
<p>5、需要注意的是，对象里目前存在的属性描述符有两种主要形式：<strong>数据描述符</strong>和<strong>存取描述符</strong>。数据描述符是一个拥有可写或不可写值的属性。存取描述符是由一对 getter-setter 函数功能来描述的属性。<strong>描述符必须是两种形式之一；不能同时是两者。</strong><br>其中，数据描述符和存取描述符均具有以下可选键值：<code>configurable</code>，<code>enumerable</code>，<code>value</code>，<code>writable</code><br>存取描述符同时具有以下可选键值：<code>get</code>，<code>set</code>。</p>
<p>如果两者同时使用，会报如下错误：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"conflict"</span>, &#123;</div><div class="line">  value: <span class="number">0x9f91102</span>, </div><div class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="number">0xdeadbeef</span>; </div><div class="line">  &#125; </div><div class="line">&#125;);</div><div class="line"><span class="comment">//Uncaught TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute</span></div></pre></td></tr></table></figure>
<p>6、在这里，我们需要特别注意 <code>configurable</code> 这个属性描述符，如果它的值为<code>false</code>，那么除了 <code>writable</code> 外，其他特性都不能被修改(包括其自身)，并且 <code>writable</code> 只能从 <code>true</code> 修改为 <code>false</code>，而且数据和存取描述符也不能相互切换。</p>
<p>如果尝试修改，会报如下错误：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123; </div><div class="line">    get : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;, </div><div class="line">    configurable : <span class="literal">false</span> </div><div class="line">&#125;);</div><div class="line"><span class="comment">// throws a TypeError</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">configurable</span> : <span class="literal">true</span>&#125;); </div><div class="line"><span class="comment">// throws a TypeError</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">enumerable</span> : <span class="literal">true</span>&#125;); </div><div class="line"><span class="comment">// throws a TypeError (set was undefined previously) </span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">set</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;); </div><div class="line"><span class="comment">// throws a TypeError (even though the new get does exactly the same thing) </span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">get</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;&#125;);</div><div class="line"><span class="comment">// throws a TypeError</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"a"</span>, &#123;<span class="attr">value</span> : <span class="number">12</span>&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// logs 1</span></div><div class="line"><span class="keyword">delete</span> o.a; <span class="comment">// Nothing happens</span></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// logs 1</span></div></pre></td></tr></table></figure>
<p>7、最后，我们又要留意一下存取描述符<code>set</code>与<code>get</code>，vuejs的底层就是通过<code>set</code>与<code>get</code>监听数据变动来实现mvvm的双向绑定的，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 取出所有属性遍历</span></div><div class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">        defineReactive(data, key, data[key]);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</div><div class="line">    observe(val); <span class="comment">// 监听子属性</span></div><div class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</div><div class="line">        enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></div><div class="line">        configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></div><div class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> val;</div><div class="line">        &#125;,</div><div class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</div><div class="line">            val = newVal;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="string">'10'</span>,<span class="attr">b</span>:<span class="string">'20'</span>&#125;</div><div class="line">observe(obj)</div><div class="line">obj.a <span class="comment">// '10'</span></div><div class="line">obj.a = <span class="string">'100'</span> </div><div class="line"><span class="comment">// 哈哈哈，监听到值变化了  10  --&gt;  100</span></div><div class="line"><span class="comment">// '100'</span></div></pre></td></tr></table></figure>
<p>参考文档<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">MDN web docs</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让input里面placeholder水平居中]]></title>
      <url>/2017/10/10/%E8%AE%A9input%E9%87%8C%E9%9D%A2placeholder%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候我们想让input里面placeholder水平居中，这个时候我们可以这样做 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        input&#123;</span></div><div class="line"><span class="undefined">            width: 200px;</span></div><div class="line"><span class="undefined">            height: 30px;</span></div><div class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#333</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">::-ms-input-placeholder</span>&#123;<span class="attribute">text-align</span>: center;&#125;</span></div><div class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span>&#123;<span class="attribute">text-align</span>: center;&#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>参考文章：<br><a href="https://www.zhihu.com/question/29414807/answer/44338831" target="_blank" rel="external">知乎问题“如何让input里面placeholder水平居中？”</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端备忘 </tag>
            
            <tag> 转载 </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器原生API实现Base64编码转换]]></title>
      <url>/2017/10/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%94%9FAPI%E5%AE%9E%E7%8E%B0Base64%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近发现浏览器的两个原生API <code>atob()</code>、<code>btoa()</code> 可以实现编码转换 </p>
</blockquote>
<a id="more"></a>
<p>1、代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">btoa(<span class="string">"hello world"</span>); <span class="comment">// "aGVsbG8gd29ybGQ="</span></div><div class="line">atob(<span class="string">"aGVsbG8gd29ybGQ="</span>); <span class="comment">// "hello world"</span></div></pre></td></tr></table></figure></p>
<p>2、再科（bai）普(du) 一下base64的编码原理：</p>
<blockquote>
<p>转码过程例子：<br>3<em>8=4</em>6<br>内存1个字节占8位<br>转前： s 1 3<br>先转成ascii：对应 115 49 51<br>2进制： 01110011 00110001 00110011<br>6个一组（4组） 011100110011000100110011<br>然后才有后面的 011100 110011 000100 110011<br>然后计算机是8位8位的存数 6不够，自动就补两个高位0了<br>所有有了 高位补0<br>科学计算器输入 00011100 00110011 00000100 00110011<br>得到 28 51 4 51<br>查对下照表 c z E z</p>
</blockquote>
<p>3、如果好奇<code>atob()</code>与<code>btoa()</code>的具体实现，可参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *  Licensed under the BSD 3-Clause License.</span></div><div class="line"><span class="comment"> *    http://opensource.org/licenses/BSD-3-Clause</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> *  References:</span></div><div class="line"><span class="comment"> *    http://en.wikipedia.org/wiki/Base64</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line">    <span class="comment">// existing version for noConflict()</span></div><div class="line">    <span class="keyword">var</span> _Base64 = global.Base64;</div><div class="line">    <span class="keyword">var</span> version = <span class="string">"2.3.2"</span>;</div><div class="line">    <span class="comment">// if node.js, we use Buffer</span></div><div class="line">    <span class="keyword">var</span> buffer;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            buffer = <span class="built_in">require</span>(<span class="string">'buffer'</span>).Buffer;</div><div class="line">        &#125; <span class="keyword">catch</span> (err) &#123;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// constants</span></div><div class="line">    <span class="keyword">var</span> b64chars</div><div class="line">        = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>;</div><div class="line">    <span class="keyword">var</span> b64tab = <span class="function"><span class="keyword">function</span>(<span class="params">bin</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> t = &#123;&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = bin.length; i &lt; l; i++) t[bin.charAt(i)] = i;</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;(b64chars);</div><div class="line">    <span class="keyword">var</span> fromCharCode = <span class="built_in">String</span>.fromCharCode;</div><div class="line">    <span class="comment">// encoder stuff</span></div><div class="line">    <span class="keyword">var</span> cb_utob = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (c.length &lt; <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">var</span> cc = c.charCodeAt(<span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> cc &lt; <span class="number">0x80</span> ? c</div><div class="line">                : cc &lt; <span class="number">0x800</span> ? (fromCharCode(<span class="number">0xc0</span> | (cc &gt;&gt;&gt; <span class="number">6</span>))</div><div class="line">                                + fromCharCode(<span class="number">0x80</span> | (cc &amp; <span class="number">0x3f</span>)))</div><div class="line">                : (fromCharCode(<span class="number">0xe0</span> | ((cc &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0f</span>))</div><div class="line">                   + fromCharCode(<span class="number">0x80</span> | ((cc &gt;&gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x3f</span>))</div><div class="line">                   + fromCharCode(<span class="number">0x80</span> | ( cc         &amp; <span class="number">0x3f</span>)));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> cc = <span class="number">0x10000</span></div><div class="line">                + (c.charCodeAt(<span class="number">0</span>) - <span class="number">0xD800</span>) * <span class="number">0x400</span></div><div class="line">                + (c.charCodeAt(<span class="number">1</span>) - <span class="number">0xDC00</span>);</div><div class="line">            <span class="keyword">return</span> (fromCharCode(<span class="number">0xf0</span> | ((cc &gt;&gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x07</span>))</div><div class="line">                    + fromCharCode(<span class="number">0x80</span> | ((cc &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3f</span>))</div><div class="line">                    + fromCharCode(<span class="number">0x80</span> | ((cc &gt;&gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x3f</span>))</div><div class="line">                    + fromCharCode(<span class="number">0x80</span> | ( cc         &amp; <span class="number">0x3f</span>)));</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> re_utob = <span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g</span>;</div><div class="line">    <span class="keyword">var</span> utob = <span class="function"><span class="keyword">function</span>(<span class="params">u</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> u.replace(re_utob, cb_utob);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> cb_encode = <span class="function"><span class="keyword">function</span>(<span class="params">ccc</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> padlen = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>][ccc.length % <span class="number">3</span>],</div><div class="line">        ord = ccc.charCodeAt(<span class="number">0</span>) &lt;&lt; <span class="number">16</span></div><div class="line">            | ((ccc.length &gt; <span class="number">1</span> ? ccc.charCodeAt(<span class="number">1</span>) : <span class="number">0</span>) &lt;&lt; <span class="number">8</span>)</div><div class="line">            | ((ccc.length &gt; <span class="number">2</span> ? ccc.charCodeAt(<span class="number">2</span>) : <span class="number">0</span>)),</div><div class="line">        chars = [</div><div class="line">            b64chars.charAt( ord &gt;&gt;&gt; <span class="number">18</span>),</div><div class="line">            b64chars.charAt((ord &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">63</span>),</div><div class="line">            padlen &gt;= <span class="number">2</span> ? <span class="string">'='</span> : b64chars.charAt((ord &gt;&gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>),</div><div class="line">            padlen &gt;= <span class="number">1</span> ? <span class="string">'='</span> : b64chars.charAt(ord &amp; <span class="number">63</span>)</div><div class="line">        ];</div><div class="line">        <span class="keyword">return</span> chars.join(<span class="string">''</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> btoa = global.btoa ? <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> global.btoa(b);</div><div class="line">    &#125; : <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> b.replace(<span class="regexp">/[\s\S]&#123;1,3&#125;/g</span>, cb_encode);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> _encode = buffer ?</div><div class="line">        buffer.from &amp;&amp; buffer.from !== <span class="built_in">Uint8Array</span>.from ? <span class="function"><span class="keyword">function</span> (<span class="params">u</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (u.constructor === buffer.constructor ? u : buffer.from(u))</div><div class="line">                .toString(<span class="string">'base64'</span>)</div><div class="line">        &#125;</div><div class="line">        :  <span class="function"><span class="keyword">function</span> (<span class="params">u</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (u.constructor === buffer.constructor ? u : <span class="keyword">new</span>  buffer(u))</div><div class="line">                .toString(<span class="string">'base64'</span>)</div><div class="line">        &#125;</div><div class="line">        : <span class="function"><span class="keyword">function</span> (<span class="params">u</span>) </span>&#123; <span class="keyword">return</span> btoa(utob(u)) &#125;</div><div class="line">    ;</div><div class="line">    <span class="keyword">var</span> encode = <span class="function"><span class="keyword">function</span>(<span class="params">u, urisafe</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> !urisafe</div><div class="line">            ? _encode(<span class="built_in">String</span>(u))</div><div class="line">            : _encode(<span class="built_in">String</span>(u)).replace(<span class="regexp">/[+\/]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m0</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> m0 == <span class="string">'+'</span> ? <span class="string">'-'</span> : <span class="string">'_'</span>;</div><div class="line">            &#125;).replace(<span class="regexp">/=/g</span>, <span class="string">''</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">encodeURI</span> = <span class="function"><span class="keyword">function</span>(<span class="params">u</span>) </span>&#123; <span class="keyword">return</span> encode(u, <span class="literal">true</span>) &#125;;</div><div class="line">    <span class="comment">// decoder stuff</span></div><div class="line">    <span class="keyword">var</span> re_btou = <span class="keyword">new</span> <span class="built_in">RegExp</span>([</div><div class="line">        <span class="string">'[\xC0-\xDF][\x80-\xBF]'</span>,</div><div class="line">        <span class="string">'[\xE0-\xEF][\x80-\xBF]&#123;2&#125;'</span>,</div><div class="line">        <span class="string">'[\xF0-\xF7][\x80-\xBF]&#123;3&#125;'</span></div><div class="line">    ].join(<span class="string">'|'</span>), <span class="string">'g'</span>);</div><div class="line">    <span class="keyword">var</span> cb_btou = <span class="function"><span class="keyword">function</span>(<span class="params">cccc</span>) </span>&#123;</div><div class="line">        <span class="keyword">switch</span>(cccc.length) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">            <span class="keyword">var</span> cp = ((<span class="number">0x07</span> &amp; cccc.charCodeAt(<span class="number">0</span>)) &lt;&lt; <span class="number">18</span>)</div><div class="line">                |    ((<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">1</span>)) &lt;&lt; <span class="number">12</span>)</div><div class="line">                |    ((<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">2</span>)) &lt;&lt;  <span class="number">6</span>)</div><div class="line">                |     (<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">3</span>)),</div><div class="line">            offset = cp - <span class="number">0x10000</span>;</div><div class="line">            <span class="keyword">return</span> (fromCharCode((offset  &gt;&gt;&gt; <span class="number">10</span>) + <span class="number">0xD800</span>)</div><div class="line">                    + fromCharCode((offset &amp; <span class="number">0x3FF</span>) + <span class="number">0xDC00</span>));</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            <span class="keyword">return</span> fromCharCode(</div><div class="line">                ((<span class="number">0x0f</span> &amp; cccc.charCodeAt(<span class="number">0</span>)) &lt;&lt; <span class="number">12</span>)</div><div class="line">                    | ((<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">1</span>)) &lt;&lt; <span class="number">6</span>)</div><div class="line">                    |  (<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">2</span>))</div><div class="line">            );</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span>  fromCharCode(</div><div class="line">                ((<span class="number">0x1f</span> &amp; cccc.charCodeAt(<span class="number">0</span>)) &lt;&lt; <span class="number">6</span>)</div><div class="line">                    |  (<span class="number">0x3f</span> &amp; cccc.charCodeAt(<span class="number">1</span>))</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> btou = <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> b.replace(re_btou, cb_btou);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> cb_decode = <span class="function"><span class="keyword">function</span>(<span class="params">cccc</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> len = cccc.length,</div><div class="line">        padlen = len % <span class="number">4</span>,</div><div class="line">        n = (len &gt; <span class="number">0</span> ? b64tab[cccc.charAt(<span class="number">0</span>)] &lt;&lt; <span class="number">18</span> : <span class="number">0</span>)</div><div class="line">            | (len &gt; <span class="number">1</span> ? b64tab[cccc.charAt(<span class="number">1</span>)] &lt;&lt; <span class="number">12</span> : <span class="number">0</span>)</div><div class="line">            | (len &gt; <span class="number">2</span> ? b64tab[cccc.charAt(<span class="number">2</span>)] &lt;&lt;  <span class="number">6</span> : <span class="number">0</span>)</div><div class="line">            | (len &gt; <span class="number">3</span> ? b64tab[cccc.charAt(<span class="number">3</span>)]       : <span class="number">0</span>),</div><div class="line">        chars = [</div><div class="line">            fromCharCode( n &gt;&gt;&gt; <span class="number">16</span>),</div><div class="line">            fromCharCode((n &gt;&gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xff</span>),</div><div class="line">            fromCharCode( n         &amp; <span class="number">0xff</span>)</div><div class="line">        ];</div><div class="line">        chars.length -= [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>][padlen];</div><div class="line">        <span class="keyword">return</span> chars.join(<span class="string">''</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> atob = global.atob ? <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> global.atob(a);</div><div class="line">    &#125; : <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a.replace(<span class="regexp">/[\s\S]&#123;1,4&#125;/g</span>, cb_decode);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> _decode = buffer ?</div><div class="line">        buffer.from &amp;&amp; buffer.from !== <span class="built_in">Uint8Array</span>.from ? <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (a.constructor === buffer.constructor</div><div class="line">                    ? a : buffer.from(a, <span class="string">'base64'</span>)).toString();</div><div class="line">        &#125;</div><div class="line">        : <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (a.constructor === buffer.constructor</div><div class="line">                    ? a : <span class="keyword">new</span> buffer(a, <span class="string">'base64'</span>)).toString();</div><div class="line">        &#125;</div><div class="line">        : <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> btou(atob(a)) &#125;;</div><div class="line">    <span class="keyword">var</span> decode = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> _decode(</div><div class="line">            <span class="built_in">String</span>(a).replace(<span class="regexp">/[-_]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">m0</span>) </span>&#123; <span class="keyword">return</span> m0 == <span class="string">'-'</span> ? <span class="string">'+'</span> : <span class="string">'/'</span> &#125;)</div><div class="line">                .replace(<span class="regexp">/[^A-Za-z0-9\+\/]/g</span>, <span class="string">''</span>)</div><div class="line">        );</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> Base64 = global.Base64;</div><div class="line">        global.Base64 = _Base64;</div><div class="line">        <span class="keyword">return</span> Base64;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// export Base64</span></div><div class="line">    global.Base64 = &#123;</div><div class="line">        VERSION: version,</div><div class="line">        atob: atob,</div><div class="line">        btoa: btoa,</div><div class="line">        fromBase64: decode,</div><div class="line">        toBase64: encode,</div><div class="line">        utob: utob,</div><div class="line">        encode: encode,</div><div class="line">        <span class="built_in">encodeURI</span>: <span class="built_in">encodeURI</span>,</div><div class="line">        btou: btou,</div><div class="line">        decode: decode,</div><div class="line">        noConflict: noConflict</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// if ES5 is available, make Base64.extendString() available</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.defineProperty === <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">var</span> noEnum = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;<span class="attr">value</span>:v,<span class="attr">enumerable</span>:<span class="literal">false</span>,<span class="attr">writable</span>:<span class="literal">true</span>,<span class="attr">configurable</span>:<span class="literal">true</span>&#125;;</div><div class="line">        &#125;;</div><div class="line">        global.Base64.extendString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">Object</span>.defineProperty(</div><div class="line">                <span class="built_in">String</span>.prototype, <span class="string">'fromBase64'</span>, noEnum(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> decode(<span class="keyword">this</span>)</div><div class="line">                &#125;));</div><div class="line">            <span class="built_in">Object</span>.defineProperty(</div><div class="line">                <span class="built_in">String</span>.prototype, <span class="string">'toBase64'</span>, noEnum(<span class="function"><span class="keyword">function</span> (<span class="params">urisafe</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> encode(<span class="keyword">this</span>, urisafe)</div><div class="line">                &#125;));</div><div class="line">            <span class="built_in">Object</span>.defineProperty(</div><div class="line">                <span class="built_in">String</span>.prototype, <span class="string">'toBase64URI'</span>, noEnum(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> encode(<span class="keyword">this</span>, <span class="literal">true</span>)</div><div class="line">                &#125;));</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// export Base64 to the namespace</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="keyword">if</span> (global[<span class="string">'Meteor'</span>]) &#123; <span class="comment">// Meteor.js</span></div><div class="line">        Base64 = global.Base64;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// module.exports and AMD are mutually exclusive.</span></div><div class="line">    <span class="comment">// module.exports has precedence.</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</div><div class="line">        <span class="built_in">module</span>.exports.Base64 = global.Base64;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;		</div><div class="line">        <span class="comment">// AMD. Register as an anonymous module.	</span></div><div class="line">        define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> global.Base64 &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// that's it!</span></div><div class="line">&#125;)(   <span class="keyword">typeof</span> self   !== <span class="string">'undefined'</span> ? self</div><div class="line">    : <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> ? <span class="built_in">window</span></div><div class="line">    : <span class="keyword">typeof</span> global !== <span class="string">'undefined'</span> ? global</div><div class="line">    : <span class="keyword">this</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>以上代码是GitHub上<code>js-base64</code>的开源代码，感兴趣的同学可以<a href="https://github.com/dankogai/js-base64" target="_blank" rel="external">戳这里</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS格式化日期函数]]></title>
      <url>/2017/10/01/JS%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在JAVA中用<code>SimpleDateFormat</code>对象可以格式化日期，<code>JS</code>中没有原生方法，这个时候可以考虑自己写一个 </p>
</blockquote>
<a id="more"></a>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  对Date的扩展，将 Date 转化为指定格式的String</span></div><div class="line"><span class="comment">     月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， </span></div><div class="line"><span class="comment">     年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) </span></div><div class="line"><span class="comment">     例子： </span></div><div class="line"><span class="comment"> *   (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==&gt; 2006-07-02 08:09:04.423 </span></div><div class="line"><span class="comment"> *   (new Date()).Format("yyyy-M-d h:m:s.S")      ==&gt; 2006-7-2 8:9:4.18 </span></div><div class="line"><span class="comment"> *   Date.prototype.Format = function (fmt) &#123; //author: meizz </span></div><div class="line"><span class="comment"> */</span></div><div class="line">    <span class="keyword">var</span> o = &#123;</div><div class="line">        <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//月份 </span></div><div class="line">        <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//日 </span></div><div class="line">        <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//小时 </span></div><div class="line">        <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//分 </span></div><div class="line">        <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒 </span></div><div class="line">        <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度 </span></div><div class="line">        <span class="string">"S"</span>: <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒 </span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o)</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt)) fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</div><div class="line">    <span class="keyword">return</span> fmt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另一种写法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  对Date的扩展，将 Date 转化为指定格式的String * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q)</span></div><div class="line"><span class="comment">     可以用 1-2 个占位符 * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) </span></div><div class="line"><span class="comment">     例子： </span></div><div class="line"><span class="comment"> *   (new Date()).pattern("yyyy-MM-dd hh:mm:ss.S")==&gt; 2006-07-02 08:09:04.423      </span></div><div class="line"><span class="comment"> *   (new Date()).pattern("yyyy-MM-dd E HH:mm:ss") ==&gt; 2009-03-10 二 20:09:04      </span></div><div class="line"><span class="comment"> *   (new Date()).pattern("yyyy-MM-dd EE hh:mm:ss") ==&gt; 2009-03-10 周二 08:09:04      </span></div><div class="line"><span class="comment"> *   (new Date()).pattern("yyyy-MM-dd EEE hh:mm:ss") ==&gt; 2009-03-10 星期二 08:09:04      </span></div><div class="line"><span class="comment"> *   (new Date()).pattern("yyyy-M-d h:m:s.S") ==&gt; 2006-7-2 8:9:4.18      </span></div><div class="line"><span class="comment"> */</span>        </div><div class="line"><span class="built_in">Date</span>.prototype.pattern=<span class="function"><span class="keyword">function</span>(<span class="params">fmt</span>) </span>&#123;         </div><div class="line">    <span class="keyword">var</span> o = &#123;         </div><div class="line">    <span class="string">"M+"</span> : <span class="keyword">this</span>.getMonth()+<span class="number">1</span>, <span class="comment">//月份         </span></div><div class="line">    <span class="string">"d+"</span> : <span class="keyword">this</span>.getDate(), <span class="comment">//日         </span></div><div class="line">    <span class="string">"h+"</span> : <span class="keyword">this</span>.getHours()%<span class="number">12</span> == <span class="number">0</span> ? <span class="number">12</span> : <span class="keyword">this</span>.getHours()%<span class="number">12</span>, <span class="comment">//小时         </span></div><div class="line">    <span class="string">"H+"</span> : <span class="keyword">this</span>.getHours(), <span class="comment">//小时         </span></div><div class="line">    <span class="string">"m+"</span> : <span class="keyword">this</span>.getMinutes(), <span class="comment">//分         </span></div><div class="line">    <span class="string">"s+"</span> : <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒         </span></div><div class="line">    <span class="string">"q+"</span> : <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth()+<span class="number">3</span>)/<span class="number">3</span>), <span class="comment">//季度         </span></div><div class="line">    <span class="string">"S"</span> : <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒         </span></div><div class="line">    &#125;;         </div><div class="line">    <span class="keyword">var</span> week = &#123;         </div><div class="line">    <span class="string">"0"</span> : <span class="string">"/u65e5"</span>,         </div><div class="line">    <span class="string">"1"</span> : <span class="string">"/u4e00"</span>,         </div><div class="line">    <span class="string">"2"</span> : <span class="string">"/u4e8c"</span>,         </div><div class="line">    <span class="string">"3"</span> : <span class="string">"/u4e09"</span>,         </div><div class="line">    <span class="string">"4"</span> : <span class="string">"/u56db"</span>,         </div><div class="line">    <span class="string">"5"</span> : <span class="string">"/u4e94"</span>,         </div><div class="line">    <span class="string">"6"</span> : <span class="string">"/u516d"</span>        </div><div class="line">    &#125;;         </div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/(y+)/</span>.test(fmt))&#123;         </div><div class="line">        fmt=fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear()+<span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));         </div><div class="line">    &#125;         </div><div class="line">    <span class="keyword">if</span>(<span class="regexp">/(E+)/</span>.test(fmt))&#123;         </div><div class="line">        fmt=fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, ((<span class="built_in">RegExp</span>.$<span class="number">1.</span>length&gt;<span class="number">1</span>) ? (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length&gt;<span class="number">2</span> ? <span class="string">"/u661f/u671f"</span> : <span class="string">"/u5468"</span>) : <span class="string">""</span>)+week[<span class="keyword">this</span>.getDay()+<span class="string">""</span>]);         </div><div class="line">    &#125;         </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o)&#123;         </div><div class="line">        <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span>+ k +<span class="string">")"</span>).test(fmt))&#123;         </div><div class="line">            fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length==<span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span>+ o[k]).substr((<span class="string">""</span>+ o[k]).length)));         </div><div class="line">        &#125;         </div><div class="line">    &#125;         </div><div class="line">    <span class="keyword">return</span> fmt;         </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考博客<br><a href="http://www.cnblogs.com/zhangpengshou/archive/2012/07/19/2599053.html" target="_blank" rel="external">‘一路前行’的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
            <tag> 转载 </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAC上如何自由切换python2和python3并正确使用pip]]></title>
      <url>/2017/10/01/MAC%E4%B8%8A%E5%A6%82%E4%BD%95%E8%87%AA%E7%94%B1%E5%88%87%E6%8D%A2python2%E5%92%8Cpython3%E5%B9%B6%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8pip/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>MAC上默认的Python版本是2的版本，这时候怎么才能用上3的语法呢？用pip安装依赖的时候怎么才能根据不同的版本安装不同的依赖库呢？如果你对此也有疑问，或许这篇文章能帮助你 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、下载Python3最新版本"><a href="#一、下载Python3最新版本" class="headerlink" title="一、下载Python3最新版本"></a>一、下载Python3最新版本</h3><p>如果还没有下载<code>python3</code>最新的版本，可以进入<a href="https://www.python.org/" target="_blank" rel="external">python</a>的官网进行下载。</p>
<h3 id="二、正确的使用Python3进行编译"><a href="#二、正确的使用Python3进行编译" class="headerlink" title="二、正确的使用Python3进行编译"></a>二、正确的使用Python3进行编译</h3><p>一开始以为用上Python3需要一些特殊的操作，后来发现自己还是 too young too simple sometimes native，事实上，不需要什么特殊的操作，要用Python2就用<code>Python</code>命令编译，就像下面这样：</p>
<blockquote>
<p>python ./demo.py</p>
</blockquote>
<p>要用Python3就用<code>Python3</code>命令编译，就像下面这样：</p>
<blockquote>
<p>python3 ./demo.py</p>
</blockquote>
<p>就这么简单。</p>
<h3 id="三、安装pip"><a href="#三、安装pip" class="headerlink" title="三、安装pip"></a>三、安装pip</h3><p><code>pip</code>是<code>python</code>的包管理工具，类似<code>node.js</code>中的<code>npm</code>,在MAC中，安装<code>pip</code>很简单，输入如下命令即可安装：</p>
<blockquote>
<p> sudo easy_install pip</p>
</blockquote>
<h3 id="四、在python2和python3上正确的使用pip"><a href="#四、在python2和python3上正确的使用pip" class="headerlink" title="四、在python2和python3上正确的使用pip"></a>四、在python2和python3上正确的使用pip</h3><p>对于 Linux ##</p>
<blockquote>
<p>sudo pip install sth</p>
</blockquote>
<p>或者明确版本</p>
<blockquote>
<p>sudo pip2 install sth<br>sudo pip3 install sth<br>sudo python2 -m pip install sth<br>sudo /path/to/python -m pip install sth</p>
</blockquote>
<p>对于 Windows NT ##<br>如果仅安装 python2</p>
<blockquote>
<p>pip install sth</p>
</blockquote>
<p>如果安装有 python3, 则需要明确 pip 版本</p>
<blockquote>
<p>py -2 -m pip install sth<br>py -3 -m pip install sth</p>
</blockquote>
<p>这一条参考的是知乎上<a href="https://www.zhihu.com/question/21653286" target="_blank" rel="external">同时装了Python3和Python2，怎么用pip？</a>下<code>Johnny Wong</code>的回答,如果还有疑问，可以点进去了解详情。</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IE浏览器跳转报400错误的问题]]></title>
      <url>/2017/09/30/IE%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%B3%E8%BD%AC%E6%8A%A5400%E9%94%99%E8%AF%AF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近开发中，遇到一个问题，在Chrome中可以正常跳转的链接在IE中跳转就会报400错误 </p>
</blockquote>
<p>如果URL的参数中带有中文，那么在IE中，则很有可能会报400错误，这个时候正确的做法是用js自带的encodeURL对URL进行编码，后传到另个一面后再用decodeURL进行解码。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端踩坑 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS转换HTML转义符]]></title>
      <url>/2017/09/30/JS%E8%BD%AC%E6%8D%A2HTML%E8%BD%AC%E4%B9%89%E7%AC%A6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>前两天在公司写代码，在后台请求的数据放到前台时显示错乱，检查后发现如果文本里有<code>&lt;</code>,后面再紧跟字母的话，html就会显示错误，要解决这个问题，可以对文本里的特殊字符进行转义 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、去掉html标签"><a href="#一、去掉html标签" class="headerlink" title="一、去掉html标签"></a>一、去掉html标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHtmlTab</span>(<span class="params">tab</span>) </span>&#123;</div><div class="line"> <span class="keyword">return</span> tab.replace(<span class="regexp">/&lt;[^&lt;&gt;]+?&gt;/g</span>,<span class="string">''</span>);<span class="comment">//删除所有HTML标签</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、普通字符转换成转意符"><a href="#二、普通字符转换成转意符" class="headerlink" title="二、普通字符转换成转意符"></a>二、普通字符转换成转意符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">html2Escape</span>(<span class="params">sHtml</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> sHtml.replace(<span class="regexp">/[&lt;&gt;&amp;"]/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> &#123;<span class="string">'&lt;'</span>:<span class="string">'&amp;lt;'</span>,<span class="string">'&gt;'</span>:<span class="string">'&amp;gt;'</span>,<span class="string">'&amp;'</span>:<span class="string">'&amp;amp;'</span>,<span class="string">'"'</span>:<span class="string">'&amp;quot;'</span>&#125;[c];&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、转意符换成普通字符"><a href="#三、转意符换成普通字符" class="headerlink" title="三、转意符换成普通字符"></a>三、转意符换成普通字符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape2Html</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arrEntities=&#123;<span class="string">'lt'</span>:<span class="string">'&lt;'</span>,<span class="string">'gt'</span>:<span class="string">'&gt;'</span>,<span class="string">'nbsp'</span>:<span class="string">' '</span>,<span class="string">'amp'</span>:<span class="string">'&amp;'</span>,<span class="string">'quot'</span>:<span class="string">'"'</span>&#125;;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;(lt|gt|nbsp|amp|quot);/ig</span>,<span class="function"><span class="keyword">function</span>(<span class="params">all,t</span>)</span>&#123;<span class="keyword">return</span> arrEntities[t];&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、-nbsp-转成空格"><a href="#三、-nbsp-转成空格" class="headerlink" title="三、&nbsp;转成空格"></a>三、&nbsp;转成空格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nbsp2Space</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arrEntities = &#123;<span class="string">'nbsp'</span> : <span class="string">' '</span>&#125;;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;(nbsp);/ig</span>, <span class="function"><span class="keyword">function</span>(<span class="params">all, t</span>)</span>&#123;<span class="keyword">return</span> arrEntities[t]&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、回车转为br标签"><a href="#四、回车转为br标签" class="headerlink" title="四、回车转为br标签"></a>四、回车转为br标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">return2Br</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    eturn str.replace(<span class="regexp">/\r?\n/g</span>,<span class="string">"&lt;br /&gt;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="五、去除开头结尾换行-并将连续3次以上换行转换成2次换行"><a href="#五、去除开头结尾换行-并将连续3次以上换行转换成2次换行" class="headerlink" title="五、去除开头结尾换行,并将连续3次以上换行转换成2次换行"></a>五、去除开头结尾换行,并将连续3次以上换行转换成2次换行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trimBr</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    str=str.replace(<span class="regexp">/((\s|&amp;nbsp;)*\r?\n)&#123;3,&#125;/g</span>,<span class="string">"\r\n\r\n"</span>);<span class="comment">//限制最多2次换行</span></div><div class="line">    str=str.replace(<span class="regexp">/^((\s|&amp;nbsp;)*\r?\n)+/g</span>,<span class="string">''</span>);<span class="comment">//清除开头换行</span></div><div class="line">    str=str.replace(<span class="regexp">/((\s|&amp;nbsp;)*\r?\n)+$/g</span>,<span class="string">''</span>);<span class="comment">//清除结尾换行</span></div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="六、将多个连续空格合并成一个空格"><a href="#六、将多个连续空格合并成一个空格" class="headerlink" title="六、将多个连续空格合并成一个空格"></a>六、将多个连续空格合并成一个空格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSpace</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    str=str.replace(<span class="regexp">/(\s|&amp;nbsp;)+/g</span>,<span class="string">' '</span>);</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考博客：<br><a href="www.sjyhome.com/javascript/js-html-escape.html">SJY之家</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
            <tag> 转载 </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js过滤emoji表情符号]]></title>
      <url>/2017/09/30/js%E8%BF%87%E6%BB%A4emoji%E8%A1%A8%E6%83%85%E7%AC%A6%E5%8F%B7/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候，在手机的输入框输入emoji，插入数据库时会报错，这时候有一个解决方案是用js正则把emoji表情给过滤掉 </p>
</blockquote>
<a id="more"></a>
<p>unicode定义的emoji是四个字符，而Mysql的utf8编码最多3个字节，所以数据插不进去。所以数据库会报错：</p>
<blockquote>
<p>SQLException: Incorrect string value</p>
</blockquote>
<p>这时候有三种解决方案：</p>
<blockquote>
<ul>
<li>把emoji直接过滤掉；</li>
<li>将Mysql的编码从utf8转换成utf8mb4;</li>
<li>unicode emoji转义为softbank的emoji;</li>
</ul>
</blockquote>
<p>这次只讨论第一种方案, 以下是正则代码,很简短，只有一行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name = name.replace(<span class="regexp">/\ud83c[\udf00-\udfff]|\ud83d[\udc00-\ude4f]|\ud83d[\ude80-\udeff]/g</span>, <span class="string">""</span>);</div></pre></td></tr></table></figure></p>
<p>参考博客：<br><a href="http://blog.csdn.net/ugg/article/details/44225723" target="_blank" rel="external">“逸学堂”的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[获取随机字符串]]></title>
      <url>/2017/09/29/%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如何获取一段随机字符串？下面的方法或许能帮到你 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   *  Get the a random string</span></div><div class="line"><span class="comment">   *  @param  &#123;integer&#125;  len   length of the random string</span></div><div class="line"><span class="comment">   *  @return &#123;string&#125;</span></div><div class="line"><span class="comment">   */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStrRandom</span>(<span class="params">len</span>) </span>&#123;       <span class="comment">//len为字符串长度</span></div><div class="line">　　<span class="keyword">var</span> len = len || <span class="number">32</span>;</div><div class="line">　　<span class="keyword">var</span> $chars = <span class="string">'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'</span>;    <span class="comment">/****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/</span></div><div class="line">　　<span class="keyword">var</span> maxPos = $chars.length;</div><div class="line">　　<span class="keyword">var</span> pwd = <span class="string">''</span>;</div><div class="line">　　<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">　　　　pwd += $chars.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * maxPos));</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> pwd;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS字符串截取函数slice(),substring(),substr()的区别]]></title>
      <url>/2017/09/28/JS%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96%E5%87%BD%E6%95%B0slice-substring-substr%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在JS中,slice()、substring()、substr()都有截取字符串的作用，那他们有哪些用法上的区别呢？如果你也有疑惑，这篇文章或许能够帮助到你。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、substring"><a href="#一、substring" class="headerlink" title="一、substring()"></a>一、substring()</h3><p><code>substring()</code>方法返回一个索引和另一个索引之间的字符串，语法如下：</p>
<blockquote>
<p>str.substring(indexStart, [indexEnd])</p>
</blockquote>
<p>下面有六点需要注意：</p>
<blockquote>
<ul>
<li>substring()从提取的字符indexStart可达但不包括 indexEnd</li>
<li>如果为indexStart 等于indexEnd，substring()返回一个空字符串。</li>
<li>如果indexEnd省略，则将substring()字符提取到字符串的末尾。</li>
<li>如果任一参数小于0或是NaN，它被视为为0。</li>
<li>如果任何一个参数都大于stringName.length，则被视为是stringName.length。</li>
<li>如果indexStart大于indexEnd，那么效果substring()就好像这两个论点被交换了一样； 例如，。str.substring(1, 0) == str.substring(0, 1)</li>
</ul>
</blockquote>
<p>以下是一些示例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abcdefghij'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1, 2): '</span>   + str.substring(<span class="number">1</span>, <span class="number">2</span>));   <span class="comment">// '(1, 2): b'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1, 1): '</span>   + str.substring(<span class="number">1</span>, <span class="number">1</span>));   <span class="comment">// '(1, 1): '</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3, 2): '</span>  + str.substring(<span class="number">-3</span>, <span class="number">2</span>));  <span class="comment">// '(-3, 2): ab'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3): '</span>     + str.substring(<span class="number">-3</span>));     <span class="comment">// '(-3): abcdefghij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1): '</span>      + str.substring(<span class="number">1</span>));      <span class="comment">// '(1): bcdefghij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-20, 2): '</span> + str.substring(<span class="number">-20</span>, <span class="number">2</span>)); <span class="comment">// '(-20, 2): ab'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(2, 20): '</span>  + str.substring(<span class="number">2</span>, <span class="number">20</span>));  <span class="comment">// '(2, 20): cdefghij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(20, 2): '</span>  + str.substring(<span class="number">20</span>, <span class="number">2</span>));  <span class="comment">// '(20, 2): cdefghij'</span></div></pre></td></tr></table></figure></p>
<h3 id="二、substr"><a href="#二、substr" class="headerlink" title="二、substr()"></a>二、substr()</h3><p><code>substr()</code>方法返回从指定位置开始的字符串中指定字符数的字符，语法如下：</p>
<blockquote>
<p>str.substr(start, [length])</p>
</blockquote>
<p>下面有四点需要注意：</p>
<blockquote>
<ul>
<li><code>substr()</code>会从<code>start</code>获取长度为<code>length</code>字符（如果截取到字符串的末尾，则会停止截取）。</li>
<li>如果<code>start</code>是正的并且大于或等于字符串的长度，则<code>substr()</code>返回一个空字符串。</li>
<li>若<code>start</code>为负数,则将该值加上字符串长度后再进行计算（如果加上字符串的长度后还是负数，则从0开始截取）。</li>
<li>如果<code>length</code>为0或为负数，<code>substr()</code>返回一个空字符串。如果<code>length</code>省略，则将<code>substr()</code>字符提取到字符串的末尾。</li>
</ul>
</blockquote>
<p>以下是一些示例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abcdefghij'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1, 2): '</span>   + str.substr(<span class="number">1</span>, <span class="number">2</span>));   <span class="comment">// '(1, 2): bc'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3, 2): '</span>  + str.substr(<span class="number">-3</span>, <span class="number">2</span>));  <span class="comment">// '(-3, 2): hi'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3): '</span>     + str.substr(<span class="number">-3</span>));     <span class="comment">// '(-3): hij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1): '</span>      + str.substr(<span class="number">1</span>));      <span class="comment">// '(1): bcdefghij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-20, 2): '</span> + str.substr(<span class="number">-20</span>, <span class="number">2</span>)); <span class="comment">// '(-20, 2): ab'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(20, 2): '</span>  + str.substr(<span class="number">20</span>, <span class="number">2</span>));  <span class="comment">// '(20, 2): '</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>需要注意的是，Microsoft的JScript不支持起始索引的负值。如果要使用此功能，可以使用以下兼容性代码来解决此错误：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// only run when the substr() function is broken</span></div><div class="line"><span class="keyword">if</span> (<span class="string">'ab'</span>.substr(<span class="number">-1</span>) != <span class="string">'b'</span>) &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   *  Get the substring of a string</span></div><div class="line"><span class="comment">   *  @param  &#123;integer&#125;  start   where to start the substring</span></div><div class="line"><span class="comment">   *  @param  &#123;integer&#125;  length  how many characters to return</span></div><div class="line"><span class="comment">   *  @return &#123;string&#125;</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="built_in">String</span>.prototype.substr = <span class="function"><span class="keyword">function</span>(<span class="params">substr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">start, length</span>) </span>&#123;</div><div class="line">      <span class="comment">// call the original method</span></div><div class="line">      <span class="keyword">return</span> substr.call(<span class="keyword">this</span>,</div><div class="line">      	<span class="comment">// did we get a negative start, calculate how much it is from the beginning of the string</span></div><div class="line">        <span class="comment">// adjust the start parameter for negative value</span></div><div class="line">        start &lt; <span class="number">0</span> ? <span class="keyword">this</span>.length + start : start,</div><div class="line">        length)</div><div class="line">    &#125;</div><div class="line">  &#125;(<span class="built_in">String</span>.prototype.substr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、substring-与substr-的主要区别"><a href="#三、substring-与substr-的主要区别" class="headerlink" title="三、substring()与substr()的主要区别"></a>三、substring()与substr()的主要区别</h3><p><code>substring()</code>方法的参数表示起始和结束索引，<code>substr()</code>方法的参数表示起始索引和要包含在生成的字符串中的字符的长度,示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> text = <span class="string">'Mozilla'</span>;</div><div class="line"><span class="built_in">console</span>.log(text.substring(<span class="number">2</span>,<span class="number">5</span>)); <span class="comment">// =&gt; "zil"</span></div><div class="line"><span class="built_in">console</span>.log(text.substr(<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// =&gt; "zil"</span></div></pre></td></tr></table></figure>
<h3 id="四、slice"><a href="#四、slice" class="headerlink" title="四、slice()"></a>四、slice()</h3><p><code>slice()</code>方法返回一个索引和另一个索引之间的字符串，语法如下：</p>
<blockquote>
<p>str.slice(beginIndex[, endIndex])</p>
</blockquote>
<p>下面有三点需要注意：</p>
<blockquote>
<ul>
<li>若<code>beginIndex</code>为负数,则将该值加上字符串长度后再进行计算（如果加上字符串的长度后还是负数，则从0开始截取）。</li>
<li>如果<code>beginIndex</code>大于或等于字符串的长度，则<code>slice()</code>返回一个空字符串。</li>
<li>如果<code>endIndex</code>省略，则将<code>slice()</code>字符提取到字符串的末尾。如果为负，它被视为<code>strLength + endIndex</code>其中<code>strLength</code>是字符串。</li>
</ul>
</blockquote>
<p>以下是一些示例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abcdefghij'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1, 2): '</span>   + str.slice(<span class="number">1</span>, <span class="number">2</span>));   <span class="comment">// '(1, 2): b'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3, 2): '</span>  + str.slice(<span class="number">-3</span>, <span class="number">2</span>));  <span class="comment">// '(-3, 2): '</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3, 9): '</span>  + str.slice(<span class="number">-3</span>, <span class="number">9</span>));  <span class="comment">// '(-3, 9): hi'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3): '</span>     + str.slice(<span class="number">-3</span>));     <span class="comment">// '(-3): hij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-3，-1): '</span> + str.slice(<span class="number">-3</span>，<span class="number">-1</span>));     <span class="comment">// '(-3，-1): hi'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(0，-1): '</span>  + str.slice(<span class="number">0</span>，<span class="number">-1</span>));     <span class="comment">// '(0，-1): abcdefghi'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(1): '</span>      + str.slice(<span class="number">1</span>));      <span class="comment">// '(1): bcdefghij'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(-20, 2): '</span> + str.slice(<span class="number">-20</span>, <span class="number">2</span>)); <span class="comment">// '(-20, 2): ab'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(20): '</span>     + str.slice(<span class="number">20</span>));  <span class="comment">// '(20): '</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'(20, 2): '</span>  + str.slice(<span class="number">20</span>, <span class="number">2</span>));  <span class="comment">// '(20, 2): '</span></div></pre></td></tr></table></figure></p>
<p>参考文档<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="external">MDN web docs</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中如何进行对象的深拷贝]]></title>
      <url>/2017/09/21/JS%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在JS中，一般的=号传递的都是对象/数组的引用，并没有真正地拷贝一个对象，那如何进行对象的深度拷贝呢？如果你对此也有疑问，这篇文章或许能够帮助到你。 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、对象引用、浅层拷贝与深层拷贝的区别"><a href="#一、对象引用、浅层拷贝与深层拷贝的区别" class="headerlink" title="一、对象引用、浅层拷贝与深层拷贝的区别"></a>一、对象引用、浅层拷贝与深层拷贝的区别</h3><p>js的对象引用传递理解起来很简单，参考如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'wanger'</span>&#125;</div><div class="line"><span class="keyword">var</span> b = a ;</div><div class="line">a===b <span class="comment">// true</span></div><div class="line">b.name = <span class="string">'zhangsan'</span></div><div class="line">a.name <span class="comment">//'zhangan'</span></div></pre></td></tr></table></figure></p>
<p>上述代码中，使用了<code>=</code>进行赋值，于是b指向了a所指向的栈的对象，也就是a与b指向了同一个栈对象，所以在对b.name赋值时，a.name也发生了变化。为了避免上面的情况，可以对对象进行拷贝，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'wanger'</span>&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a)</div><div class="line">a===b <span class="comment">// false</span></div><div class="line">b.name = <span class="string">'zhangsan'</span></div><div class="line">a.name <span class="comment">//'wanger'</span></div></pre></td></tr></table></figure>
<p>上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆，这时候a与b指向的是不同的栈对象，所以对b.name重新复制也不会影响到a.name。<strong>但是如果a.name是一个对象的引用，而不是一个字符串，那么上面的代码也会遇到一些问题</strong>，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:&#123;<span class="attr">firstName</span>:<span class="string">'wang'</span>,<span class="attr">lastName</span>:<span class="string">'er'</span>&#125;&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a)</div><div class="line">a===b <span class="comment">// false</span></div><div class="line">b.name.firstName = <span class="string">'zhang'</span></div><div class="line">a.name.firstName <span class="comment">//'zhang'</span></div></pre></td></tr></table></figure>
<p>b.name.firstName又影响到了a.name.firstName，这是因为Object.assign(）方法只是浅层拷贝，a.name是一个栈对象的引用，赋值给b时，b.name也同样是这个栈对象的引用，很多时候，我们不想让这种事情发生，所以我们就需要用到对象的深拷贝。</p>
<h3 id="二、使用JSON-parse（）与JSON-stringify（）对对象进行拷贝"><a href="#二、使用JSON-parse（）与JSON-stringify（）对对象进行拷贝" class="headerlink" title="二、使用JSON.parse（）与JSON.stringify（）对对象进行拷贝"></a>二、使用JSON.parse（）与JSON.stringify（）对对象进行拷贝</h3><p>通常情况下，我们可以使用JSON.parse（）与 JSON.stringify（）实现对象的深克隆，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方法只适用于<strong>纯数据json对象的深度克隆</strong>，因为有些时候，这种方法也有缺陷，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">a</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'hello world'</span>)&#125;,<span class="attr">b</span>:&#123;<span class="attr">c</span>:<span class="number">1</span>&#125;,<span class="attr">c</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="attr">d</span>:<span class="string">"wanger"</span>,<span class="attr">e</span>:<span class="keyword">new</span> <span class="built_in">Date</span>(),<span class="attr">f</span>:<span class="literal">null</span>,<span class="attr">g</span>:<span class="literal">undefined</span>&#125;</div><div class="line"><span class="keyword">var</span> b = clone(a)</div></pre></td></tr></table></figure>
<p>打印如下：<br><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/8.png?raw=true" alt="Alt text"><br>我们发现，上述的方法会忽略值为function以及undefied的字段，而且对date类型的支持也不太友好。</p>
<p>更要紧的是，上述方法只能克隆原始对象自身的值，不能克隆它继承的值，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> wanger = <span class="keyword">new</span> Person(<span class="string">'王二'</span>)</div><div class="line"><span class="keyword">var</span> newwanger = clone(wanger)</div><div class="line">wanger.constructor === Person <span class="comment">// true</span></div><div class="line">newwanger.constructor === <span class="built_in">Object</span> <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>打印如下：<br><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/9.png?raw=true" alt="Alt text"></p>
<p>我们发现，克隆的对象的构造函数已经变成了Object,而原来的对象的构造是Personß。</p>
<h3 id="三、目前没有发现bug的对象深拷贝方法"><a href="#三、目前没有发现bug的对象深拷贝方法" class="headerlink" title="三、目前没有发现bug的对象深拷贝方法"></a>三、目前没有发现bug的对象深拷贝方法</h3><p>王二在网上参考了不少文章，方法都不尽完美，于是在前人基础上改造了一下，方法如下，目前没有发现有什么bug：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; </div><div class="line">    <span class="keyword">if</span>(obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span> </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj;</div><div class="line">    <span class="keyword">if</span>(obj.constructor===<span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj); </div><div class="line">    <span class="keyword">var</span> newObj = <span class="keyword">new</span> obj.constructor ();  <span class="comment">//保持继承链</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;   <span class="comment">//不遍历其原型链上的属性</span></div><div class="line">            <span class="keyword">var</span> val = obj[key];</div><div class="line">            newObj[key] = <span class="keyword">typeof</span> val === <span class="string">'object'</span> ? <span class="built_in">arguments</span>.callee(val) : val; <span class="comment">// 使用arguments.callee解除与函数名的耦合</span></div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> newObj;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里有三点需要注意：<br>1、用<code>new obj.constructor ()</code>构造函数新建一个空的对象，而不是使用<code>{}</code>或者<code>[]</code>,这样可以保持原形链的继承；<br>2、用<code>obj.hasOwnProperty(key)</code>来判断属性是否来自原型链上，因为<code>for..in..</code>也会遍历其原型链上的可枚举属性。<br>3、上面的函数用到递归算法，在函数有名字，而且名字以后也不会变的情况下，这样定义没有问题。但问题是这个函数的执行与函数名 factorial 紧紧耦合在了一起。为了消除这种紧密耦合的现象，需要使用 <code>arguments.callee</code>。</p>
<hr>
<p>2017-10-03添加，之前没有考虑正则对象的问题，这里做一下修改：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clone = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; </div><div class="line">    <span class="keyword">if</span>(obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span> </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj;</div><div class="line">    <span class="keyword">if</span>(obj.constructor===<span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj); </div><div class="line">    <span class="keyword">if</span>(obj.constructor === <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj);</div><div class="line">    <span class="keyword">var</span> newObj = <span class="keyword">new</span> obj.constructor ();  <span class="comment">//保持继承链</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;   <span class="comment">//不遍历其原型链上的属性</span></div><div class="line">            <span class="keyword">var</span> val = obj[key];</div><div class="line">            newObj[key] = <span class="keyword">typeof</span> val === <span class="string">'object'</span> ? <span class="built_in">arguments</span>.callee(val) : val; <span class="comment">// 使用arguments.callee解除与函数名的耦合</span></div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> newObj;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中apply、call、bind的用法]]></title>
      <url>/2017/09/20/JS%E4%B8%ADapply%E3%80%81call%E3%80%81bind%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>apply()和call()都是为了改变某个函数运行时的上下文而存在的（就是为了改变函数内部this的指向）,bind()会创建一个新的函数, 当被调用时，将其this关键字设置为提供的值 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、了解apply-的作用"><a href="#一、了解apply-的作用" class="headerlink" title="一、了解apply()的作用"></a>一、了解apply()的作用</h3><p>1、先来一个实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wanger = &#123;</div><div class="line">    name: <span class="string">'王二'</span>,</div><div class="line">    birth: <span class="number">1995</span>,</div><div class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">        <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">wanger.age(); <span class="comment">// 17年调用是22,18年调用就变成23了</span></div></pre></td></tr></table></figure></p>
<p>上面的对象定义了一个wanger对象，里面有个age方法，当调用age方法时，就可以得到王二的年龄；<br>这时候，下面又来了一个张三:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> zhangsan = &#123;</div><div class="line">    name: <span class="string">'张三'</span>,</div><div class="line">    birth: <span class="number">1992</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>他没有age方法，但他也想知道自己的年龄，那该怎么办呢？<br>或许我们可以借用王二的age方法来帮助张三知道自己的年龄，这时候，apply()就能帮到我们：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wanger.age.apply(zhangsan); <span class="comment">//17年调用是25,18年调用就变成26了</span></div></pre></td></tr></table></figure></p>
<p>上面apply()中的zhangsan成功地调用到了wanger的age方法。</p>
<p>在MDN中，是这么解释apply方法的：</p>
<blockquote>
<p>在调用一个存在的函数时，你可以为其指定一个 <code>this</code> 对象。 <code>this</code> 指当前对象，也就是正在调用这个函数的对象。 使用 <code>apply</code>， 你可以只写一次这个方法然后在另一个对象中继承它，而不用在新对象中重复写该方法。</p>
</blockquote>
<h3 id="二、apply-与call-的区别"><a href="#二、apply-与call-的区别" class="headerlink" title="二、apply()与call()的区别"></a>二、apply()与call()的区别</h3><blockquote>
<p>call()方法的作用和apply()方法类似，只有一个区别，就是call()方法接受的是若干个<strong>参数的列表</strong>，而apply()方法接受的是一个包含多个<strong>参数的数组</strong></p>
</blockquote>
<p>王二和张三要获得期末考试语文和数学加起来的成绩，如下代码所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wanger = &#123;</div><div class="line">    name: <span class="string">'王二'</span>,</div><div class="line">    score: <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> x+y ;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> zhangsan = &#123;</div><div class="line">    name: <span class="string">'张三'</span>,</div><div class="line">&#125;;</div><div class="line">wanger.score.apply(zhangsan,[<span class="number">100</span>,<span class="number">98</span>]);  <span class="comment">//198</span></div><div class="line">wanger.score.call(zhangsan,<span class="number">100</span>,<span class="number">98</span>);  <span class="comment">//198</span></div></pre></td></tr></table></figure></p>
<p>以上两种方法都能获得张三的成绩；</p>
<p>两个方法用途差不多，为什么还要分成两个方法呢？还有那个谁，对，apply,还要放个数组进去，累不累啊？</p>
<p>但是设计者这样设计是有用途的，参考如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wanger = &#123;</div><div class="line">    name: <span class="string">'王二'</span>,</div><div class="line">    score: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> [...arguments].reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y) ; <span class="comment">//获得传入成绩的总和</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> zhangsan = &#123;</div><div class="line">    name: <span class="string">'张三'</span>,</div><div class="line">&#125;;</div><div class="line">wanger.score.apply(zhangsan,[<span class="number">100</span>,<span class="number">98</span>,<span class="number">95</span>]);  <span class="comment">//293</span></div><div class="line">wanger.score.call(zhangsan,<span class="number">100</span>,<span class="number">98</span>,<span class="number">95</span>);  <span class="comment">//293</span></div><div class="line"></div><div class="line">wanger.score.apply(zhangsan,[<span class="number">100</span>,<span class="number">98</span>,<span class="number">95</span>,<span class="number">96</span>]);  <span class="comment">//389</span></div><div class="line">wanger.score.call(zhangsan,<span class="number">100</span>,<span class="number">98</span>,<span class="number">95</span>,<span class="number">96</span>);  <span class="comment">//389</span></div></pre></td></tr></table></figure>
<blockquote>
<p>当传入的的参数的值不固定时，call()的灵活性就明显不如apply()了，apply()只要传一个数组就搞定了。</p>
</blockquote>
<h3 id="三、bind-是干什么用的"><a href="#三、bind-是干什么用的" class="headerlink" title="三、bind()是干什么用的"></a>三、bind()是干什么用的</h3><p>在MDN中，是这么解释bind方法的：</p>
<blockquote>
<p>bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值</p>
</blockquote>
<p>可以参考如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wanger = &#123;</div><div class="line">    name: <span class="string">'王二'</span>,</div><div class="line">    birth: <span class="number">1995</span>,</div><div class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">        <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> zhangsan = &#123;</div><div class="line">    name: <span class="string">'张三'</span>,</div><div class="line">    birth: <span class="number">1992</span>,</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> getAge = wanger.age.bind(zhangsan); </div><div class="line">getAge() ;</div></pre></td></tr></table></figure></p>
<p>这里bind()与call(),apply()有一个重要的区别：<strong>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</strong></p>
<h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><blockquote>
<ul>
<li>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；</li>
<li>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；</li>
<li>apply 、 call 、bind 三者都可以利用后续参数传参；</li>
<li>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</li>
</ul>
</blockquote>
<p>参考文献：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">MDN web docs</a><br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345005399057070809cfaa347dfb7207900cfd116fb000" target="_blank" rel="external">廖雪峰的官方网站</a><br><a href="http://web.jobbole.com/83642/" target="_blank" rel="external">“chokcoco”的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解原型链]]></title>
      <url>/2017/09/18/%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在JS中，原型链有时候让人觉得很胡里花哨，又是<code>prototype</code>、<code>__proto__</code>又是各种指向什么的，让人觉得很头疼。如果你也有这种感觉，或许这篇文章可以帮助到你 </p>
</blockquote>
<a id="more"></a>
<h3 id="一、认识原型"><a href="#一、认识原型" class="headerlink" title="一、认识原型"></a>一、认识原型</h3><p>1、先来一串代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.msg = msg;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"wanger"</span>)</div><div class="line"></div><div class="line">person1.constructor===Person;    <span class="comment">//true</span></div><div class="line">Person === Person.prototype.constructor; <span class="comment">//true</span></div><div class="line">person1.__proto__ === Person.prototype; <span class="comment">//true</span></div><div class="line">person1.__proto__.constructor === person1.constructor <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>看晕了吧？是不是很胡里花哨？不用担心，其实一张图就能了明白这其中的关系：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/1.png?raw=true" alt="Alt text"></p>
<blockquote>
<ul>
<li>蓝色的是构造函数</li>
<li>绿色的是构造函数实例出来的对象</li>
<li><strong>橙色的是构造函数的prototype,也是构造函数实例出来的对象的原型（它其实也是一个对象）</strong></li>
</ul>
</blockquote>
<p>2、这里特别要注意的是<code>prototype</code>与<code>__proto__</code>的区别，<code>prototype</code>是函数才有的属性，而<code>__proto__</code>是每个对象都有的属性。(<code>__proto__</code>不是一个规范属性，只是部分浏览器实现了此属性，对应的标准属性是<code>[[Prototype]]</code>)。</p>
<h3 id="二、认识原型链"><a href="#二、认识原型链" class="headerlink" title="二、认识原型链"></a>二、认识原型链</h3><p>1、我们刚刚了解了原型，那原型链在哪儿呢？不要着急，再上一张图：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/3.png?raw=true" alt="Alt text"></p>
<p>通过这张图我们可以了解到,person1的原型链是：</p>
<blockquote>
<p>person1 —-&gt; Person.prototype —-&gt; Object.prototype —-&gt; null</p>
</blockquote>
<p>2、事实上，函数也是一个对象，所以，Person的原型链是：</p>
<blockquote>
<p>Person —-&gt; Function.prototype —-&gt; Object.prototype —-&gt; null</p>
</blockquote>
<p>由于Function.prototype定义了apply()等方法，因此，Person就可以调用apply()方法。</p>
<p>3、如果把原型链的关系都显示清楚，那会复杂一些，如下图：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/2.png?raw=true" alt="Alt text"></p>
<blockquote>
<p>这里需要特别注意的是：<strong>所有函数的原型都是Function.prototype</strong>,包括<code>Function</code>构造函数和<code>Object</code>构造函数（如图中的标红部分）</p>
</blockquote>
<h3 id="三、原型链的继承"><a href="#三、原型链的继承" class="headerlink" title="三、原型链的继承"></a>三、原型链的继承</h3><p>1、假设我们要基于Person扩展出Student，Student的构造如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用Person构造函数，绑定this变量:</span></div><div class="line">    Person.call(<span class="keyword">this</span>, props);</div><div class="line">    <span class="keyword">this</span>.grade = props.grade || <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是，调用了<code>Person</code>构造函数不等于继承了<code>Person</code>，<code>Student</code>创建的对象的原型是：</p>
<blockquote>
<p>new Student() —-&gt; Student.prototype —-&gt; Object.prototype —-&gt; null</p>
</blockquote>
<p>示意图如下所示：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/5.png?raw=true" alt="Alt text"></p>
<p>必须想办法把原型链修改为：</p>
<blockquote>
<p>new Student() —-&gt; Student.prototype —-&gt; Person.prototype —-&gt; Object.prototype —-&gt; null</p>
</blockquote>
<p>示意图如下所示：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/6.png?raw=true" alt="Alt text"></p>
<p>那我们应该怎么修改呢？仔细观察两张图的差异，我们会发现，如果我们将<code>Student</code>的<code>prototype</code>改成<code>person1</code>对象不就大功告成了？于是有了下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Student.prototype = person1 ;</div></pre></td></tr></table></figure>
<p>但是这时候有个问题:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Student.prototype.constructor === Student; <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>原来<code>Student.prototype</code>(即<code>person1</code>)的<code>constructor</code>指向的还是<code>Person</code>，这时候还需要我们再改一下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Student.prototype.constructor = Student;</div></pre></td></tr></table></figure></p>
<p>这样就能把Student的原型链顺利的修改为： new Student() —-&gt; Student.prototype —-&gt; Person.prototype —-&gt; Object.prototype —-&gt; null 了；</p>
<p>完整的代码显示如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.msg = msg;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用Person构造函数，绑定this变量:</span></div><div class="line">    Person.call(<span class="keyword">this</span>, props);</div><div class="line">    <span class="keyword">this</span>.grade = props.grade || <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"wanger"</span>)</div><div class="line">Student.prototype = person1 ;</div><div class="line">Student.prototype.constructor = Student;</div></pre></td></tr></table></figure></p>
<h3 id="三、用以上原型链继承带来的问题"><a href="#三、用以上原型链继承带来的问题" class="headerlink" title="三、用以上原型链继承带来的问题"></a>三、用以上原型链继承带来的问题</h3><p>1、如果在控制台执行一遍上述的代码，我们会发现一些问题，如图所示：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1709/7.png?raw=true" alt="Alt text"></p>
<blockquote>
<p><code>Student.prototype</code>上含有之前person1带有的属性，那么，这样的继承的方法就显得不那么完美了</p>
</blockquote>
<p>2、这个时候，我们可以借助一个中间对象来实现正确的原型链，这个中间对象的原型要指向Person.prototype。为了实现这一点，参考道爷（就是发明JSON的那个道格拉斯）的代码，中间对象可以用一个空函数F来实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.msg = msg;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用Person构造函数，绑定this变量:</span></div><div class="line">    Person.call(<span class="keyword">this</span>, props);</div><div class="line">    <span class="keyword">this</span>.grade = props.grade || <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 空函数F:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 把F的原型指向Person.prototype:</span></div><div class="line">F.prototype = Person.prototype;</div><div class="line"></div><div class="line"><span class="comment">// 把Student的原型指向一个新的F对象，F对象的原型正好指向Person.prototype:</span></div><div class="line">Student.prototype = <span class="keyword">new</span> F();</div><div class="line"></div><div class="line"><span class="comment">// 把Student原型的构造函数修复为Student:</span></div><div class="line">Student.prototype.constructor = Student;</div><div class="line"></div><div class="line"><span class="comment">// 继续在Student原型（就是new F()对象）上定义方法：</span></div><div class="line">Student.prototype.getGrade = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.grade;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 创建wanger:</span></div><div class="line"><span class="keyword">var</span> wanger = <span class="keyword">new</span> Student(&#123;</div><div class="line">    name: <span class="string">'王二'</span>,</div><div class="line">    grade: <span class="number">9</span></div><div class="line">&#125;);</div><div class="line">wanger.msg; <span class="comment">// '王二'</span></div><div class="line">wanger.grade; <span class="comment">// 9</span></div><div class="line"></div><div class="line"><span class="comment">// 验证原型:</span></div><div class="line">wanger.__proto__ === Student.prototype; <span class="comment">// true</span></div><div class="line">wanger.__proto__.__proto__ === Person.prototype; <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 验证继承关系:</span></div><div class="line">wanger <span class="keyword">instanceof</span> Student; <span class="comment">// true</span></div><div class="line">wanger <span class="keyword">instanceof</span> Person; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这其中主要用到了一个空函数F作为过桥函数。为什么道爷会用过桥函数？用过桥函数F(){}主要是为了清空构造的属性。如果有些原Person的构造用不到，那么过桥函数将是一个好的解决方案</p>
</blockquote>
<p>这样写的话，<code>Student.prototype</code>上就没有任何自带的私有属性，这是理想的继承的方法</p>
<p>3、如果把继承这个动作用一个inherits()函数封装起来，还可以隐藏F的定义，并简化代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">Child, Parent</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    F.prototype = Parent.prototype;</div><div class="line">    Child.prototype = <span class="keyword">new</span> F();</div><div class="line">    Child.prototype.constructor = Child;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>封装后，写起来就像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.msg = msg;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="comment">// 调用Person构造函数，绑定this变量:</span></div><div class="line">    Person.call(<span class="keyword">this</span>, props);</div><div class="line">    <span class="keyword">this</span>.grade = props.grade || <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">inherits(Student,Person) ;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这样再一封装的话，代码就很完美了。</p>
</blockquote>
<p>事实上，我们也可以在<code>inherits</code>中使用<code>Object.create()</code>来进行操作，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">Child, Parent</span>) </span>&#123;</div><div class="line">    Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype);</div><div class="line">    Child.prototype.constructor = Child;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果有兴趣了解<code>Object.create()</code>的其他用法，可以参考我的这篇博客<a href="http://www.wangyulue.com/2017/10/10/JS%E4%B8%ADObject-defineProperty%E4%B8%8EObject-create%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%952/#more" target="_blank" rel="external">JS中Object.create的使用方法</a>;</p>
<h3 id="四、ES6的新关键字class"><a href="#四、ES6的新关键字class" class="headerlink" title="四、ES6的新关键字class"></a>四、ES6的新关键字class</h3><p>在ES6中，新的关键字class，extends被正式被引入，它采用的类似java的继承写法，写起来就像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, grade) &#123;</div><div class="line">        <span class="keyword">super</span>(msg); <span class="comment">// 记得用super调用父类的构造方法!</span></div><div class="line">        <span class="keyword">this</span>.grade = grade || <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    myGrade() &#123;</div><div class="line">        alert(<span class="string">'I am at grade '</span> + <span class="keyword">this</span>.grade);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样写的话会更通俗易懂，继承也相当方便。读者可以进入<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001458267339633fd3a83c597d04b5fb59f7d1f6792efb3000" target="_blank" rel="external">廖雪峰的官方网站</a>详细了解class的用法</p>
<p>参考文献：<br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000" target="_blank" rel="external">廖雪峰的官方网站</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在 vue-cli 中用 proxyTable 解决开发环境的跨域问题]]></title>
      <url>/2017/09/12/%E5%9C%A8-vue-cli-%E4%B8%AD%E7%94%A8-proxyTable-%E8%A7%A3%E5%86%B3%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>前端开发工程中难免会遇到跨域问题，如果你用的是vue，不要担心，官方手脚架早已帮你准备好了解决方案 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>如果读者还不太了解 <code>vue-cil</code> , 或许<a href="https://vuejs-templates.github.io/webpack/" target="_blank" rel="external">vue-cil文档</a>可以帮助到你 , 事实上,文档中就有用 <a href="https://vuejs-templates.github.io/webpack/proxy.html" target="_blank" rel="external">proxyTable</a> 进行代理请求的相关介绍</p>
</blockquote>
<h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><p>在 <code>config/index.js</code> 写下以下关键代码 ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// config/index.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    dev: &#123;</div><div class="line">        proxyTable: &#123;</div><div class="line">            <span class="comment">// proxy all requests starting with /api to jsonplaceholder</span></div><div class="line">            <span class="string">'/api'</span>: &#123;</div><div class="line">                target: <span class="string">'http://jsonplaceholder.typicode.com'</span>,</div><div class="line">                changeOrigin: <span class="literal">true</span>,</div><div class="line">                pathRewrite: &#123;</div><div class="line">                    <span class="string">'^/api'</span>: <span class="string">''</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的示例将代理请求 <code>/api/posts/test</code> 到 <code>http://jsonplaceholder.typicode.com/posts/test</code></p>
<h4 id="实际开发中的配置"><a href="#实际开发中的配置" class="headerlink" title="实际开发中的配置"></a>实际开发中的配置</h4><p>王二在开发中进行的如下的配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">proxyTable: &#123;</div><div class="line">    <span class="string">"/middleware"</span>: &#123;</div><div class="line">    target: <span class="string">"http://192.168.2.57:80"</span>,</div><div class="line">    pathRewrite: &#123;</div><div class="line">        <span class="string">'^/middleware'</span>: <span class="string">'/patient/1070/middleware'</span></div><div class="line">    &#125;,</div><div class="line">    changeOrigin: <span class="literal">true</span>,</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>这样就会将代理请求 <code>/middleware/balabala</code> 到 <code>http://192.168.2.57:80/patient/1070/middleware/balabala</code></p>
<blockquote>
<p>需要注意的是，这这种代理请求只适用于开发环境，其背后的设置来自于其使用的插件<a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="external">http-proxy-middleware</a>，有兴趣可以了解了解</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS验证身份证的合法性]]></title>
      <url>/2017/09/12/js%E9%AA%8C%E8%AF%81%E8%BA%AB%E4%BB%BD%E8%AF%81%E7%9A%84%E5%90%88%E6%B3%95%E6%80%A7/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近公司业务需求需要验证身份证的合法性，以下分享一个可以判断身份合法性的方法 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">IdentityCodeValid</span>(<span class="params">code</span>) </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cap</span> (<span class="params">str</span>)</span>&#123;    <span class="comment">//如果身份证验证中有x,则变为X再做判断；</span></div><div class="line">        <span class="keyword">var</span> temp = str.split(<span class="string">""</span>);</div><div class="line">        temp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">i,index</span>)</span>&#123;<span class="keyword">if</span>(i===<span class="string">'x'</span>)&#123;temp[index]=<span class="string">"X"</span>&#125;&#125;);<span class="keyword">return</span> temp.join(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> code = cap(code);</div><div class="line">    <span class="keyword">var</span> copycode = code ;</div><div class="line">    <span class="keyword">var</span> city=&#123;<span class="number">11</span>:<span class="string">"北京"</span>,<span class="number">12</span>:<span class="string">"天津"</span>,<span class="number">13</span>:<span class="string">"河北"</span>,<span class="number">14</span>:<span class="string">"山西"</span>,<span class="number">15</span>:<span class="string">"内蒙古"</span>,<span class="number">21</span>:<span class="string">"辽宁"</span>,<span class="number">22</span>:<span class="string">"吉林"</span>,<span class="number">23</span>:<span class="string">"黑龙江 "</span>,<span class="number">31</span>:<span class="string">"上海"</span>,<span class="number">32</span>:<span class="string">"江苏"</span>,<span class="number">33</span>:<span class="string">"浙江"</span>,<span class="number">34</span>:<span class="string">"安徽"</span>,<span class="number">35</span>:<span class="string">"福建"</span>,<span class="number">36</span>:<span class="string">"江西"</span>,<span class="number">37</span>:<span class="string">"山东"</span>,<span class="number">41</span>:<span class="string">"河南"</span>,<span class="number">42</span>:<span class="string">"湖北 "</span>,<span class="number">43</span>:<span class="string">"湖南"</span>,<span class="number">44</span>:<span class="string">"广东"</span>,<span class="number">45</span>:<span class="string">"广西"</span>,<span class="number">46</span>:<span class="string">"海南"</span>,<span class="number">50</span>:<span class="string">"重庆"</span>,<span class="number">51</span>:<span class="string">"四川"</span>,<span class="number">52</span>:<span class="string">"贵州"</span>,<span class="number">53</span>:<span class="string">"云南"</span>,<span class="number">54</span>:<span class="string">"西藏 "</span>,<span class="number">61</span>:<span class="string">"陕西"</span>,<span class="number">62</span>:<span class="string">"甘肃"</span>,<span class="number">63</span>:<span class="string">"青海"</span>,<span class="number">64</span>:<span class="string">"宁夏"</span>,<span class="number">65</span>:<span class="string">"新疆"</span>,<span class="number">71</span>:<span class="string">"台湾"</span>,<span class="number">81</span>:<span class="string">"香港"</span>,<span class="number">82</span>:<span class="string">"澳门"</span>,<span class="number">91</span>:<span class="string">"国外 "</span>&#125;;</div><div class="line">    <span class="keyword">var</span> tip = <span class="string">""</span>;</div><div class="line">    <span class="keyword">var</span> pass= <span class="literal">true</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!code || !<span class="regexp">/^\d&#123;6&#125;(18|19|20)?\d&#123;2&#125;(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;(\d|X)$/i</span>.test(code))&#123;</div><div class="line">        tip = <span class="string">"身份证号格式错误"</span>;</div><div class="line">        pass = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!city[code.substr(<span class="number">0</span>,<span class="number">2</span>)])&#123;</div><div class="line">        tip = <span class="string">"地址编码错误"</span>;</div><div class="line">        pass = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//18位身份证需要验证最后一位校验位</span></div><div class="line">        <span class="keyword">if</span>(code.length == <span class="number">18</span>)&#123;</div><div class="line">            code = code.split(<span class="string">''</span>);</div><div class="line">            <span class="comment">//∑(ai×Wi)(mod 11)</span></div><div class="line">            <span class="comment">//加权因子</span></div><div class="line">            <span class="keyword">var</span> factor = [ <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span> ];</div><div class="line">            <span class="comment">//校验位</span></div><div class="line">            <span class="keyword">var</span> parity = [ <span class="number">1</span>, <span class="number">0</span>, <span class="string">'X'</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span> ];</div><div class="line">            <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">var</span> ai = <span class="number">0</span>;</div><div class="line">            <span class="keyword">var</span> wi = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++)</div><div class="line">            &#123;</div><div class="line">                ai = code[i];</div><div class="line">                wi = factor[i];</div><div class="line">                sum += ai * wi;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> last = parity[sum % <span class="number">11</span>];</div><div class="line">            <span class="keyword">if</span>(parity[sum % <span class="number">11</span>] != code[<span class="number">17</span>])&#123;</div><div class="line">                tip = <span class="string">"校验位错误"</span>;</div><div class="line">                pass =<span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断出生日期是否合法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">date</span>)</span>&#123;    <span class="comment">//date 传 例如：2013-01-01、2013/01/01、2013/01/32、2013/02/29</span></div><div class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">Date</span>(date).getDate()==date.substring(date.length<span class="number">-2</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params">code</span>)</span>&#123;    <span class="comment">//得到类似2013-01-01、2013/01/01、2013/01/32、2013/02/29的日期格式</span></div><div class="line">        <span class="keyword">var</span> date = <span class="string">''</span> ;</div><div class="line">        <span class="keyword">if</span>(code.length===<span class="number">18</span>)&#123;</div><div class="line">             date = code.substring(<span class="number">6</span>,<span class="number">14</span>)</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(code.length===<span class="number">15</span>)&#123;</div><div class="line">             date = <span class="string">'19'</span>+code.substring(<span class="number">6</span>,<span class="number">12</span>)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">        &#125;</div><div class="line">        date = date.substr(<span class="number">0</span>,<span class="number">4</span>)+<span class="string">'-'</span>+date.substr(<span class="number">4</span>,<span class="number">2</span>)+<span class="string">'-'</span>+date.substr(<span class="number">6</span>,<span class="number">2</span>);</div><div class="line">        <span class="keyword">return</span> date;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!check(getDate(copycode)))&#123;</div><div class="line">        pass = <span class="literal">false</span> ;</div><div class="line">        tip = <span class="string">"日期格式不正确"</span></div><div class="line">    &#125;</div><div class="line"><span class="comment">//   if(!pass) alert(tip);</span></div><div class="line">    <span class="keyword">return</span> pass;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考文献<br><a href="http://www.cnblogs.com/lzrabbit/archive/2011/10/23/2221643.html" target="_blank" rel="external">“懒惰的肥兔”的博客</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jsonp的一般原理]]></title>
      <url>/2017/08/14/jsonp%E7%9A%84%E4%B8%80%E8%88%AC%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>浏览器中，由于有 <code>同源策略</code> 的存在，ajax跨域请求数据往往失败，这时候JSONP或许会帮到我们</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>由于<a href="https://baike.baidu.com/item/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/3927875?fr=aladdin" target="_blank" rel="external">同源策略</a>，一般来说位于server1.example.com的网页无法与不是 server1.example.com的服务器沟通,这时候Jsonp可以帮助我们进行跨域的数据交互,另一个解决这个问题的新方法是<a href="https://baike.baidu.com/item/CORS/16411212#viewPageContent" target="_blank" rel="external">CORS</a>，咱们今天主要聊聊Jsonp。</p>
</blockquote>
<h4 id="一、JSONP是怎么产生的"><a href="#一、JSONP是怎么产生的" class="headerlink" title="一、JSONP是怎么产生的"></a>一、JSONP是怎么产生的</h4><p>1、由于同源策略的存在，Ajax直接请求数据存在跨域无权限访问的问题。<br>2、但我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>）；<br>3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；<br>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；<br>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。<br>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。<br>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p>
<h4 id="二、JSONP的客户端具体实现"><a href="#二、JSONP的客户端具体实现" class="headerlink" title="二、JSONP的客户端具体实现"></a>二、JSONP的客户端具体实现</h4><p>不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：</p>
<p>1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。<br>远程服务器remoteserver.com根目录下有个remote.js文件代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">'我是远程文件'</span>);</div></pre></td></tr></table></figure></p>
<p>本地服务器localserver.com下有个jsonp.html页面代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://remoteserver.com/remote.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。</p>
<p>2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。<br>远程服务器remoteserver.com根目录下remote.js文件代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localHandler(&#123;<span class="string">"result"</span>:<span class="string">"我是远程js带来的数据"</span>&#125;);</div></pre></td></tr></table></figure></p>
<p>本地服务器localserver.com下jsonp.html页面代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> localHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        alert(<span class="string">'我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：'</span> + data.result);</span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://remoteserver.com/remote.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。</p>
<p>3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。<br>看jsonp.html页面的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="comment">// 得到航班信息查询结果后的回调函数</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></div><div class="line"><span class="javascript">        alert(<span class="string">'你查询的航班结果是：票价 '</span> + data.price + <span class="string">' 元，'</span> + <span class="string">'余票 '</span> + data.tickets + <span class="string">' 张。'</span>);</span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="javascript">    <span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> url = <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler"</span>;</span></div><div class="line"><span class="javascript">    <span class="comment">// 创建script标签，设置其属性</span></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></div><div class="line"><span class="javascript">    script.setAttribute(<span class="string">'src'</span>, url);</span></div><div class="line"><span class="javascript">    <span class="comment">// 把script标签加入head，此时调用开始</span></span></div><div class="line"><span class="javascript">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script); </span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。<br>我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做<strong>flightHandler</strong>，所以请把查询结果传入这个函数中进行调用。<br>OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flightHandler(&#123;</div><div class="line">    <span class="string">"code"</span>: <span class="string">"CA1998"</span>,</div><div class="line">    <span class="string">"price"</span>: <span class="number">1780</span>,</div><div class="line">    <span class="string">"tickets"</span>: <span class="number">5</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</p>
<p>4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。</p>
<p>什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></div><div class="line"><span class="javascript">            $.ajax(&#123;</span></div><div class="line"><span class="javascript">                type: <span class="string">"get"</span>,</span></div><div class="line"><span class="javascript">                <span class="keyword">async</span>: <span class="literal">false</span>,</span></div><div class="line"><span class="javascript">                url: <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998"</span>,</span></div><div class="line"><span class="javascript">                dataType: <span class="string">"jsonp"</span>,</span></div><div class="line"><span class="javascript">                jsonp: <span class="string">"callback"</span>,<span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></span></div><div class="line"><span class="javascript">                jsonpCallback:<span class="string">"flightHandler"</span>,<span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</span></span></div><div class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                    alert(<span class="string">'您查询到航班信息：票价： '</span> + json.price + <span class="string">' 元，余票： '</span> + json.tickets + <span class="string">' 张。'</span>);</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="javascript">                error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">                    alert(<span class="string">'fail'</span>);</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里没有写flightHandler这个函数，但是也运行成功了，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时自动帮你生成回调函数并把数据取出来供success属性方法来调用。</p>
<h4 id="三、其他注意点"><a href="#三、其他注意点" class="headerlink" title="三、其他注意点"></a>三、其他注意点</h4><p>1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；</p>
<p>2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本。</p>
<p>3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。</p>
<p>4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</p>
<blockquote>
<p>文章转载自<a href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html" target="_blank" rel="external">“随它去吧”的博客</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将特殊英文字符转为中文字符]]></title>
      <url>/2017/08/14/%E5%B0%86%E7%89%B9%E6%AE%8A%E8%8B%B1%E6%96%87%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B8%BA%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候将前台的数据传到后台，再从后台读取时，由于有特殊英文字符，会出现json转为对象出错的情况，这时候，一种解决方案就是<strong>在传到后台之前，将特殊的英文字符转为中文字符</strong> </p>
</blockquote>
<blockquote>
<p>以下是一个英文字符转为中文字符的简单方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpecialJson</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> res = str.replace(<span class="regexp">/\"/g</span>,<span class="string">"“"</span>).replace(<span class="regexp">/\[/g</span>,<span class="string">"【"</span>).replace(<span class="regexp">/\]/g</span>,<span class="string">"】"</span>).replace(<span class="regexp">/\&#123;/g</span>,<span class="string">"｛"</span>).replace(<span class="regexp">/\&#125;/g</span>,<span class="string">"｝"</span>)  ;</div><div class="line">	<span class="keyword">return</span> res ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[了解事件冒泡]]></title>
      <url>/2017/08/14/%E4%BA%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>事件冒泡是前端er经常会遇到的问题，那在这里我们来用简短的代码来了解一下到底什么是事件冒泡 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>在这里我们主要讨论 <code>event.stopPropagation()</code> 与 <code>event.preventDefault()</code> 的区别，先来一段可执行的代码：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最外层-1');"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是中间层-1');"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最里层-1');"</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span>点击我-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最外层-2');"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是中间层-2');"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最里层-2');"</span> <span class="attr">id</span>=<span class="string">"test2"</span>&gt;</span>点击我-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最外层-3');"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"alert('我是中间层-3');"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">onclick</span>=<span class="string">"alert('我是最里层-3');"</span> <span class="attr">id</span>=<span class="string">"test3"</span>&gt;</span>点击我-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">            $(<span class="string">"#test1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></div><div class="line"><span class="undefined">                event.stopPropagation();</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="javascript">            $(<span class="string">"#test2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></div><div class="line"><span class="undefined">                event.preventDefault();</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="javascript">            $(<span class="string">"#test3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span> ;</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>event.stopPropagation();</code><br>事件处理过程中，阻止了事件冒泡，但不会阻击默认行为（它就执行了超链接的跳转） </li>
<li><code>event.preventDefault();</code><br>如果把它放在头部A标签的click事件中，点击“点击我”。<br>会发现它依次弹出：我是最里层—-我是中间层—-我是最外层，但最后却没有跳转到百度<br>它的作用是：事件处理过程中，不阻击事件冒泡，但阻击默认行为（它只执行所有弹框，却没有执行超链接跳转）</li>
<li><code>return false;</code><br>事件处理过程中，阻止了事件冒泡，也阻止了默认行为（比如刚才它就没有执行超链接的跳转） </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过FileReader将图片转为Base64编码]]></title>
      <url>/2017/08/14/%E9%80%9A%E8%BF%87FileReader%E5%B0%86%E5%9B%BE%E7%89%87%E8%BD%AC%E4%B8%BABase64%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如果我们想将图片转为base64编码，可以通过H5的FileReader接口来达成目标 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>封装好的方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param &#123;string&#125;   dom		input[name='file']的dom对象</span></div><div class="line"><span class="comment">* @param &#123;function&#125; fn		回调函数</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_base64</span>(<span class="params">dom,fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> file = dom.files[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span>(!file) <span class="keyword">return</span> ;           </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">window</span>.FileReader)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"当前浏览器不支持FileReader！"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125; </div><div class="line">    r = <span class="keyword">new</span> FileReader();</div><div class="line">    r.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(fn) fn(r) ;   </div><div class="line">    &#125;;</div><div class="line">    r.readAsDataURL(file);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>再来一段可执行的html代码，大家可以动手试试哈</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">id</span>=<span class="string">"upload_file"</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"base64_output"</span> <span class="attr">style</span>=<span class="string">"min-width:800px;min-height: 500px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">$_</span>(<span class="params">id</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="javascript">            $_(<span class="string">"upload_file"</span>).onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">var</span> dom = $_(<span class="string">'upload_file'</span>);</span></div><div class="line"><span class="javascript">                get_base64(dom,<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                    $_(<span class="string">'base64_output'</span>).value = r.result;</span></div><div class="line"><span class="undefined">                &#125;);</span></div><div class="line"><span class="undefined">            &#125;;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">get_base64</span>(<span class="params">dom,fn</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">var</span> file = dom.files[<span class="number">0</span>];</span></div><div class="line"><span class="javascript">                <span class="keyword">if</span>(!file) <span class="keyword">return</span> ;</span></div><div class="line"><span class="javascript">                <span class="keyword">if</span>(!<span class="built_in">window</span>.FileReader)&#123;</span></div><div class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"当前浏览器不支持FileReader！"</span>);</span></div><div class="line"><span class="javascript">                    <span class="keyword">return</span>;</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="javascript">                r = <span class="keyword">new</span> FileReader();</span></div><div class="line"><span class="javascript">                r.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">                    <span class="keyword">if</span>(fn) fn(r) ;</span></div><div class="line"><span class="undefined">                &#125;;</span></div><div class="line"><span class="undefined">                r.readAsDataURL(file);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高亮文本里的关键字]]></title>
      <url>/2017/08/14/%E9%AB%98%E4%BA%AE%E6%96%87%E6%9C%AC%E9%87%8C%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>如何高亮html代码里的关键字？下面的方法或许能帮到你 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>封装好的方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* @param &#123;string&#125; data		要搜索的文本</span></div><div class="line"><span class="comment">* @param &#123;string&#125; key		要高亮的关键词</span></div><div class="line"><span class="comment">* @param &#123;string&#125; bgColor	背景颜色，默认orange</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyLight</span>(<span class="params">data, key, bgColor</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> sText = data ;</div><div class="line">    bgColor = bgColor || <span class="string">"orange"</span>,</div><div class="line">    sKey = <span class="string">"&lt;span style='background-color: "</span>+bgColor+<span class="string">";'&gt;"</span>+key+<span class="string">"&lt;/span&gt;"</span>,</div><div class="line">    num = <span class="number">-1</span>,</div><div class="line">    rStr = <span class="keyword">new</span> <span class="built_in">RegExp</span>(key, <span class="string">"g"</span>),</div><div class="line">    rHtml = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\&lt;.*?\&gt;"</span>,<span class="string">"ig"</span>), <span class="comment">//匹配html元素</span></div><div class="line">    aHtml = sText.match(rHtml); <span class="comment">//存放html元素的数组</span></div><div class="line">    sText = sText.replace(rHtml, <span class="string">'&#123;~&#125;'</span>);  <span class="comment">//替换html标签</span></div><div class="line">    sText = sText.replace(rStr,sKey); <span class="comment">//替换key</span></div><div class="line">    sText = sText.replace(<span class="regexp">/&#123;~&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//恢复html标签</span></div><div class="line">        num++;</div><div class="line">        <span class="keyword">return</span> aHtml[num];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> sText;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>再来一段可执行的html代码，大家可以动手试试哈</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">keyLight</span>(<span class="params">data, key, bgColor</span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> sText = data ;</span></div><div class="line"><span class="javascript">            bgColor = bgColor || <span class="string">"orange"</span>,</span></div><div class="line"><span class="javascript">            sKey = <span class="string">"&lt;span style='background-color: "</span>+bgColor+<span class="string">";'&gt;"</span>+key+<span class="string">"&lt;/span&gt;"</span>,</span></div><div class="line"><span class="undefined">            num = -1,</span></div><div class="line"><span class="javascript">            rStr = <span class="keyword">new</span> <span class="built_in">RegExp</span>(key, <span class="string">"g"</span>),</span></div><div class="line"><span class="javascript">            rHtml = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\&lt;.*?\&gt;"</span>,<span class="string">"ig"</span>), <span class="comment">//匹配html元素</span></span></div><div class="line"><span class="javascript">            aHtml = sText.match(rHtml); <span class="comment">//存放html元素的数组</span></span></div><div class="line"><span class="javascript">            sText = sText.replace(rHtml, <span class="string">'&#123;~&#125;'</span>);  <span class="comment">//替换html标签</span></span></div><div class="line"><span class="javascript">            sText = sText.replace(rStr,sKey); <span class="comment">//替换key</span></span></div><div class="line"><span class="javascript">            sText = sText.replace(<span class="regexp">/&#123;~&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//恢复html标签</span></span></div><div class="line"><span class="undefined">                num++;</span></div><div class="line"><span class="javascript">                <span class="keyword">return</span> aHtml[num];</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="javascript">            <span class="keyword">return</span> sText;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        <span class="keyword">var</span> html = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).innerHTML ;</span></div><div class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).innerHTML = keyLight(html,<span class="string">'试'</span>) ;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解ES6中的Promise]]></title>
      <url>/2017/08/10/%E7%90%86%E8%A7%A3ES6%E4%B8%AD%E7%9A%84Promise/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在ES6中，Promise被列为正式规范，Promise可以规范化回调，避免回调地狱 </p>
</blockquote>
<a id="more"></a>
<h4 id="一、Promise的作用"><a href="#一、Promise的作用" class="headerlink" title="一、Promise的作用"></a>一、Promise的作用</h4><p>在ajax请求数据的过程中，我们可以异步拿到我们想要的数据，然后在回调中做相应的数据处理。<br>这样做看上去并没有什么麻烦，但是如果这个时候，我们还需要做另外一个ajax请求，这个新的ajax请求的其中一个参数，得从上一个ajax请求中获取，这个时候我们就需要在回调函数中再写一个异步请求，然后在这个异步函数的回调函数里在写相应的数据处理。要是连续嵌套个三四层，往往就很恶心了。<br>写起来就像下面这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    type:<span class="string">'get'</span>,</div><div class="line">    url:<span class="string">'url_1'</span>, </div><div class="line">    data: <span class="string">'data'</span></div><div class="line">    success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">        <span class="comment">//相应的数据处理</span></div><div class="line">        <span class="keyword">var</span> data = res.data</div><div class="line">        $.ajax(&#123;</div><div class="line">            type:<span class="string">'get'</span>,</div><div class="line">            url:<span class="string">'url_2'</span>, </div><div class="line">            data: data</div><div class="line">            success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">                <span class="comment">//相应的数据处理</span></div><div class="line">                $.ajax(&#123;</div><div class="line">                    type:<span class="string">'get'</span>,</div><div class="line">                    url:<span class="string">'url_3'</span>, </div><div class="line">                    data: data</div><div class="line">                    success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">                        <span class="comment">//相应的数据处理</span></div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>在这种情况下Promise就能发挥它的威力了；</p>
<h4 id="二、来一个实例"><a href="#二、来一个实例" class="headerlink" title="二、来一个实例"></a>二、来一个实例</h4><p>先不谈语法，下面先来一个实例，建立感性的认识</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.0.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">data</span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"我是从上一个回调函数里传过来的数据"</span>,data) ;</span></div><div class="line"><span class="javascript">                $.ajax(&#123;</span></div><div class="line"><span class="javascript">                    type:<span class="string">'post'</span>,</span></div><div class="line"><span class="javascript">                    dataType: <span class="string">'jsonp'</span>,</span></div><div class="line"><span class="javascript">                    url:<span class="string">'http://api.money.126.net/data/feed/0000001,1399001'</span>,   <span class="comment">//jsonp跨域调用上证与深证的股票指数</span></span></div><div class="line"><span class="undefined">                    data:&#123;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="javascript">                    success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res) ;</span></div><div class="line"><span class="undefined">                        resolve(res) ;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="javascript">                    error:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"Error:"</span>) ;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res) ;</span></div><div class="line"><span class="undefined">                        reject(res) ;</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;)</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">data</span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"我是从上一个回调函数里传过来的数据"</span>,data) ;</span></div><div class="line"><span class="javascript">                $.ajax(&#123;</span></div><div class="line"><span class="javascript">                    type:<span class="string">'post'</span>,</span></div><div class="line"><span class="javascript">                    dataType: <span class="string">'jsonp'</span>,</span></div><div class="line"><span class="javascript">                    url:<span class="string">'https://api.douban.com/v2/movie/top250'</span>,  <span class="comment">//跨域调用豆top250的电影</span></span></div><div class="line"><span class="javascript">                    success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res) ;</span></div><div class="line"><span class="undefined">                        resolve(res) ;</span></div><div class="line"><span class="undefined">                    &#125;,</span></div><div class="line"><span class="javascript">                    error:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"Error:"</span>) ;</span></div><div class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res) ;</span></div><div class="line"><span class="undefined">                        reject(res)</span></div><div class="line"><span class="undefined">                    &#125;</span></div><div class="line"><span class="undefined">                &#125;)</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        a().then(b).then(a).then(b).catch(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"final Error:"</span>,a)&#125;) ;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>打印结果如下所示：<br><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1708/3.png?raw=true" alt="Alt text"></p>
<blockquote>
<p>可以发现，<code>Promise</code> 通过简单的链式调用就能得到之前多层回调才能达成的效果;而且从代码的结构来看，有效地减小了各个请求之间的耦合;</p>
</blockquote>
<h4 id="三、深入Promise"><a href="#三、深入Promise" class="headerlink" title="三、深入Promise"></a>三、深入Promise</h4><p>别的不谈，先打印一下 <code>Promise</code> , <code>console.dir(Promise)</code> , 看看它究竟是哪号人物：</p>
<p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1708/4.png?raw=true" alt="Alt text"></p>
<blockquote>
<p>原来 <code>Promise</code> 本身是一个构造函数，自己身上有 <code>all</code>、 <code>reject</code>、 <code>resolve</code> 这几个的方法，在其 <code>prototype</code> 上有 <code>then</code> 、 <code>catch</code> 这两个方法。那么用Promise new出来的对象也会有 <code>then</code> 、 <code>catch</code> 这两个方法。</p>
</blockquote>
<h4 id="四、注意上面实例中的resolve与reject"><a href="#四、注意上面实例中的resolve与reject" class="headerlink" title="四、注意上面实例中的resolve与reject"></a>四、注意上面实例中的resolve与reject</h4><p>1、我们发现，在 <code>new Promise(function(resolve,reject){})</code> 里传了两个方法 <code>resolve</code> 、 <code>reject</code> 作为参数，这两个方法通常会在函数的回调里被用到。一旦执行到<code>resolve()</code> 或者 <code>reject()</code> ，那么这个函数会停止执行，然后触发后面的 <code>then()</code> 或者 <code>catch()</code> 方法。准确一点来说，执行到<code>resolve()</code> 会触发 <code>then()</code> 方法，执行到 <code>reject()</code> 会触发 <code>catch()</code> 方法。</p>
<p>2、<code>resolve</code> 和 <code>reject</code> 方法里可以传入参数 ，就像 <code>resolve(data)</code> 和 <code>reject(data)</code> 。 如果这样做 ，那么在后面的 <code>then()</code> 或者 <code>catch()</code> 里传入一个带参数的函数 ， 就像 <code>then(function(data){})</code> 或者 <code>catch(function(data){})</code> ， 就能得到 <code>data</code> 的数据 。</p>
<p>3、说的再专业一些，<code>Promise</code> 对象有三种状态，他们分别是：</p>
<ul>
<li>pending: 等待中，或者进行中，表示还没有得到结果</li>
<li>resolved(Fulfilled): 已经完成，表示得到了我们想要的结果，可以继续往下执行</li>
<li>rejected: 也表示得到结果，但是由于结果并非我们所愿，因此拒绝执行</li>
</ul>
<p>这三种状态不受外界影响，而且状态只能从 <code>pending</code> 改变为 <code>resolved</code> 或者<code>rejected</code> ，并且不可逆。在 <code>Promise</code> 对象的构造函数中，<code>resolve</code> 和 <code>reject</code> 就是用来处理Promise的状态变化。<br>一般来说，调用 <code>resolve</code> 或 <code>reject</code> 以后，Promise 的使命就完成了，后继操作应该放到 <code>then</code> 或者 <code>catch</code> 方法里面，而不应该直接写在 <code>resolve()</code> 或 <code>reject()</code> 的后面 <strong>(事实的情况是，<code>resolve()</code> 或 <code>reject()</code> 的后面的代码也不会执行)</strong>。</p>
<h4 id="五、new-Promise-里的函数是立刻执行的"><a href="#五、new-Promise-里的函数是立刻执行的" class="headerlink" title="五、new Promise() 里的函数是立刻执行的"></a>五、<code>new Promise()</code> 里的函数是立刻执行的</h4><p>需要注意的的是，<code>new Promise()</code> 里的函数是立刻执行的 ，也就是说 ，当你执行下面这段代码时，就已经开始执行异步请求了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span></div><div class="line"><span class="javascript">    $.ajax(&#123;</span></div><div class="line"><span class="javascript">        type:<span class="string">'post'</span>,</span></div><div class="line"><span class="javascript">        dataType: <span class="string">'jsonp'</span>,</span></div><div class="line"><span class="javascript">        url:<span class="string">'http://api.money.126.net/data/feed/0000001,1399001'</span>,</span></div><div class="line"><span class="undefined">        data:&#123;</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        success : <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="built_in">console</span>.log(res) ;</span></div><div class="line"><span class="undefined">            resolve(res) ;</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        error:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></div><div class="line"><span class="undefined">            reject(res) ;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这也是为什么，在上面第二段的实例中，需要用 <code>a()</code> 和 <code>b()</code> 函数把 <code>new Promise()</code> 给包起来</p>
<h4 id="六、then-函数的返回值一定是-Promise-对象"><a href="#六、then-函数的返回值一定是-Promise-对象" class="headerlink" title="六、then() 函数的返回值一定是 Promise 对象"></a>六、<code>then()</code> 函数的返回值一定是 <code>Promise</code> 对象</h4><p>还需要注意的的是，<code>then()</code> 函数的返回值一定是 <code>Promise</code> 对象，哪怕手动 <code>return</code> 一个值也无济于事，如下面的代码，照样能运行成功：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"hello"</span>);<span class="keyword">return</span> <span class="number">1</span>&#125;).then(b) ;</div></pre></td></tr></table></figure></p>
<p>这也解释了为什么我们可以链式调用 <code>then()</code> 函数。</p>
<h4 id="七、Promise-all-与Promise-race-的用法"><a href="#七、Promise-all-与Promise-race-的用法" class="headerlink" title="七、Promise.all()与Promise.race()的用法"></a>七、<code>Promise.all()</code>与<code>Promise.race()</code>的用法</h4><p>想要从两个不同的 <code>ajax</code> 请求里分别获得信息，这两个任务是可以并行执行的，就可以用 <code>Promise.all()</code> 实现：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> p1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        setTimeout(resolve, <span class="number">500</span>, <span class="string">'P1'</span>);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125; ;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> p2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        setTimeout(resolve, <span class="number">1000</span>, <span class="string">'P2'</span>);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125; ;</span></div><div class="line"><span class="javascript"><span class="comment">// 同时执行p1和p2，并在它们都完成后执行then</span></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">Promise</span>.all([p1(), p2()]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(results); <span class="comment">// 获得一个Array: ['P1', 'P2']</span></span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>有些时候，多个异步任务是为了容错。比如，分别发两个不同的 <code>ajax</code> 请求读取用户的个人信息，只需要获得先返回的结果即可，这种情况下，就可以用<code>Promise.race()</code> 实现：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> p1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        setTimeout(resolve, <span class="number">500</span>, <span class="string">'P1'</span>);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125; ;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> p2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        setTimeout(resolve, <span class="number">1000</span>, <span class="string">'P2'</span>);</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125; ;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">Promise</span>.all([p1(), p2()]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(results); <span class="comment">// 'P1'</span></span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于 <code>p1</code> 执行较快，<code>Promise</code> 的 <code>then()</code> 将获得结果 <code>&#39;P1&#39;</code> 。 <code>p2</code> 仍在继续执行，但执行结果将被丢弃。</p>
<p><strong>如果我们组合使用Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。</strong></p>
<p>参考文献：<br><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="external">阮一峰ES6入门</a><br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000" target="_blank" rel="external">廖雪峰的官方网站</a><br><a href="https://www.sitepoint.com/overview-javascript-promises/" target="_blank" rel="external">sitepoint</a><br><a href="http://www.cnblogs.com/lvdabao/p/es6-promise-1.html" target="_blank" rel="external">“吕大豹”的博客园</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webApp调用百度地图API获取当前位置以及其他的一些操作]]></title>
      <url>/2017/08/09/webApp%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E4%BD%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>最近公司有业务需求，需要获得当前位置与各个医院的距离，在这里我主要调用百度地图的API接口，以下做一个总结 </p>
</blockquote>
<a id="more"></a>
<h4 id="一、先上一个简单的实例"><a href="#一、先上一个简单的实例" class="headerlink" title="一、先上一个简单的实例"></a>一、先上一个简单的实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5调用百度地图API<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=GG3pK0aFOLuRioYyTFhG75tOD2hBZ0CG"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"margin:50px 10px;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;height:480px;border:1px solid gray;margin:30px auto"</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        /**</span></div><div class="line"><span class="undefined">         * 写了一个map方法用以调出地图</span></div><div class="line"><span class="undefined">         * @param &#123;number&#125; x		经度</span></div><div class="line"><span class="undefined">         * @param &#123;number&#125; y		纬度，这个例子里写的是上海的经纬度</span></div><div class="line"><span class="javascript">         * @param &#123;<span class="built_in">String</span>&#125; dom		要渲染的dom的id</span></div><div class="line"><span class="javascript">         * @param &#123;<span class="built_in">Object</span>&#125; size		地图的放大级别，范围<span class="number">0</span><span class="number">-19</span></span></div><div class="line"><span class="undefined">         */</span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">x,y,dom,size</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(dom);</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(x,y);</span></div><div class="line"><span class="undefined">            map.centerAndZoom(point,size||15);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="javascript">        map(<span class="number">121.48789949</span>,<span class="number">31.24916171</span>,<span class="string">"container"</span>);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>其中需要注意的是引用的 <code>script</code> 标签里的 <code>GG3pK0aFOLuRioYyTFhG75tOD2hBZ0CG</code> 这个秘钥是需要自己注册申请的，这里给一个注册的<strong><a href="http://lbsyun.baidu.com/" target="_blank" rel="external">传送门</a></strong>，当然在测试中使用王二的这个秘钥也没有关系</p>
</blockquote>
<h4 id="二、并不一定需要经纬度，地名也是OK的"><a href="#二、并不一定需要经纬度，地名也是OK的" class="headerlink" title="二、并不一定需要经纬度，地名也是OK的"></a>二、并不一定需要经纬度，地名也是OK的</h4><p>将上面代码的第22行换成如下试试：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.centerAndZoom(<span class="string">"南京"</span>,<span class="number">15</span>);   <span class="comment">//中心点坐标可以是经纬度，也可以是地名</span></div></pre></td></tr></table></figure>
<h4 id="三、有时候我们需要一个标注，如下图所示"><a href="#三、有时候我们需要一个标注，如下图所示" class="headerlink" title="三、有时候我们需要一个标注，如下图所示"></a>三、有时候我们需要一个标注，如下图所示</h4><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1708/1.png?raw=true" alt="Alt text"></p>
<p>这时候可以在插入两行代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(point);        <span class="comment">// 创建标注</span></div><div class="line">map.addOverlay(marker);     <span class="comment">// 将标注添加到地图中</span></div></pre></td></tr></table></figure>
<p>写完整起来就像这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">x,y,dom,size</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(dom);</div><div class="line">    <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(x,y);</div><div class="line">    map.centerAndZoom(point,size||<span class="number">15</span>);</div><div class="line">    <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(point);</div><div class="line">    map.addOverlay(marker);</div><div class="line">&#125;</div><div class="line">map(<span class="number">121.48789949</span>,<span class="number">31.24916171</span>,<span class="string">"container"</span>);</div></pre></td></tr></table></figure></p>
<h4 id="四、有时候我们还需要一个标签，如下图所示"><a href="#四、有时候我们还需要一个标签，如下图所示" class="headerlink" title="四、有时候我们还需要一个标签，如下图所示"></a>四、有时候我们还需要一个标签，如下图所示</h4><p><img src="https://github.com/WangYuLue/pic_of_blog/blob/master/1708/2.png?raw=true" alt="Alt text"></p>
<p>这时候可以插入如下的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> label = <span class="keyword">new</span> BMap.Label(<span class="string">"上海浦西"</span>, &#123;   <span class="comment">//新建一个标签，并设置标签文本</span></div><div class="line">    offset: <span class="keyword">new</span> BMap.Size(<span class="number">15</span>, <span class="number">-25</span>)      <span class="comment">//设置标签的偏移量</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">label.setStyle(&#123;    <span class="comment">//为标签设置样式</span></div><div class="line">    width: <span class="string">"80px"</span>,</div><div class="line">    color: <span class="string">'#fff'</span>,</div><div class="line">    background: <span class="string">'#ff8355'</span>,</div><div class="line">    border: <span class="string">'1px solid "#ff8355"'</span>,</div><div class="line">    borderRadius: <span class="string">"5px"</span>,</div><div class="line">    textAlign: <span class="string">"center"</span>,</div><div class="line">    height: <span class="string">"26px"</span>,</div><div class="line">    lineHeight: <span class="string">"26px"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">marker.setLabel(label);  <span class="comment">// 为标注添加一个标签</span></div></pre></td></tr></table></figure>
<p>写成方法就像下面这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">x,y,dom,text,size</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(dom);</div><div class="line">    <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(x,y);</div><div class="line">    map.centerAndZoom(point,size||<span class="number">15</span>);</div><div class="line">    <span class="keyword">var</span> label = <span class="keyword">new</span> BMap.Label(text, &#123;</div><div class="line">        offset: <span class="keyword">new</span> BMap.Size(<span class="number">15</span>, <span class="number">-25</span>)</div><div class="line">    &#125;);</div><div class="line">    label.setStyle(&#123;</div><div class="line">        width: <span class="string">"80px"</span>,</div><div class="line">        color: <span class="string">'#fff'</span>,</div><div class="line">        background: <span class="string">'#ff8355'</span>,</div><div class="line">        border: <span class="string">'1px solid "#ff8355"'</span>,</div><div class="line">        borderRadius: <span class="string">"5px"</span>,</div><div class="line">        textAlign: <span class="string">"center"</span>,</div><div class="line">        height: <span class="string">"26px"</span>,</div><div class="line">        lineHeight: <span class="string">"26px"</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(point);</div><div class="line">    marker.setLabel(label);</div><div class="line">    map.addOverlay(marker);</div><div class="line">&#125;</div><div class="line">map(<span class="number">121.48789949</span>,<span class="number">31.24916171</span>,<span class="string">"container"</span>,<span class="string">"上海浦西"</span>);</div></pre></td></tr></table></figure></p>
<h4 id="五、获取当前的经纬度"><a href="#五、获取当前的经纬度" class="headerlink" title="五、获取当前的经纬度"></a>五、获取当前的经纬度</h4><p>获取当前的经纬度直接调用下面这个方法就好了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentPosition</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> geolocation = <span class="keyword">new</span> BMap.Geolocation();</div><div class="line">    geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;   <span class="comment">//回调函数里有当前经纬度的信息</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getStatus() == BMAP_STATUS_SUCCESS)&#123;</div><div class="line">            <span class="built_in">console</span>.log(r.point) ; </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            alert(<span class="string">'failed:'</span>+<span class="keyword">this</span>.getStatus());</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">getCurrentPosition() ;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>不过回调的时间会长一些，2s左右</p>
</blockquote>
<h4 id="六、通过两地的经纬度获取两地的距离"><a href="#六、通过两地的经纬度获取两地的距离" class="headerlink" title="六、通过两地的经纬度获取两地的距离"></a>六、通过两地的经纬度获取两地的距离</h4><p>这里用到了一些数学和地理知识：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">distance</span> (<span class="params">start,end</span>) </span>&#123;    <span class="comment">//</span></div><div class="line">    <span class="keyword">var</span> x1 = (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*start.y;</div><div class="line">    <span class="keyword">var</span> x2 = (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*end.y;</div><div class="line">    <span class="keyword">var</span> y1 = (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*start.x;</div><div class="line">    <span class="keyword">var</span> y2 = (<span class="built_in">Math</span>.PI/<span class="number">180</span>)*end.x;</div><div class="line">    <span class="keyword">var</span> R = <span class="number">6371</span> ;  <span class="comment">//地球半径</span></div><div class="line">    <span class="keyword">var</span> dis = <span class="built_in">Math</span>.acos(<span class="built_in">Math</span>.sin(x1)*<span class="built_in">Math</span>.sin(x2)+<span class="built_in">Math</span>.cos(x1)*<span class="built_in">Math</span>.cos(x2)*<span class="built_in">Math</span>.cos(y2-y1))*R;</div><div class="line">    <span class="keyword">return</span> dis.toFixed(<span class="number">2</span>) ;  <span class="comment">//四舍五入保留两位小数，返回string类型</span></div><div class="line">&#125;</div><div class="line">distance(&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>&#125;,&#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">1</span>&#125;) <span class="comment">//算出经度为0，纬度为0 与 经度为0，纬度为1 两点之间的距离</span></div></pre></td></tr></table></figure></p>
<h4 id="七、百度地图API其他的一些功能，例如搜索、给出出行路线"><a href="#七、百度地图API其他的一些功能，例如搜索、给出出行路线" class="headerlink" title="七、百度地图API其他的一些功能，例如搜索、给出出行路线"></a>七、百度地图API其他的一些功能，例如搜索、给出出行路线</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建信息窗口对象</span></div><div class="line"><span class="keyword">var</span> infoWindow = <span class="keyword">new</span> BMap.InfoWindow(<span class="string">"I am here"</span>);</div><div class="line">map.openInfoWindow(infoWindow,point);</div><div class="line"></div><div class="line"><span class="comment">//在地图中添加折线</span></div><div class="line"><span class="keyword">var</span> polyline = <span class="keyword">new</span> BMap.Polyline([</div><div class="line">        <span class="keyword">new</span> BMap.Point(x,y),</div><div class="line">        <span class="keyword">new</span> BMap.Point(x+<span class="number">0.01</span>,y+<span class="number">0.01</span>)</div><div class="line">    ],&#123;<span class="attr">strokeColor</span>:<span class="string">"blue"</span>, <span class="attr">strokeWeight</span>:<span class="number">6</span>, <span class="attr">strokeOpacity</span>:<span class="number">0.5</span>&#125;</div><div class="line">);</div><div class="line">map.addOverlay(polyline);   </div><div class="line"></div><div class="line"><span class="comment">//在地图中添加搜索功能</span></div><div class="line"><span class="keyword">var</span> local = <span class="keyword">new</span> BMap.LocalSearch(map, &#123;</div><div class="line">    renderOptions:&#123;</div><div class="line">        map: map</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">local.search(<span class="string">"天安门"</span>);</div><div class="line"></div><div class="line"><span class="comment">//给出地图的路线</span></div><div class="line"><span class="keyword">var</span> driving = <span class="keyword">new</span> BMap.DrivingRoute(map, &#123;</div><div class="line">    renderOptions: &#123;</div><div class="line">        map: map,</div><div class="line">        autoViewport: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">driving.search(<span class="string">"中关村"</span>, <span class="string">"天安门"</span>);</div></pre></td></tr></table></figure>
<p>感兴趣的话可以尝试一下，时间有限，回家睡觉，就不一一列举了。</p>
<hr>
<blockquote>
<p>2017-09-16 增</p>
</blockquote>
<ul>
<li>需要注意的的是，如在本地起服务器，地址是localhost的话，有时候会定位失败。这时候可以尝试把localhost换成本机的IP地址再试一下。</li>
</ul>
<blockquote>
<p>参考文献<br><a href="http://lbsyun.baidu.com/cms/jsapi/class/jsapi_reference.html#a0b0" target="_blank" rel="external">百度地图API文档</a><br><a href="http://www.cnblogs.com/zhoug2020/p/3950933.html" target="_blank" rel="external">许鸿飞的博客</a><br><a href="http://www.cnblogs.com/zhoug2020/p/3950933.html" target="_blank" rel="external">“莫水千留”的博客</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 百度地图API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat服务器配置虚拟目录]]></title>
      <url>/2017/08/09/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>前两天配置Tomcat服务器老是起不起来，后来在孙老板的帮助下配置成功，这里做一个备忘 </p>
</blockquote>
<a id="more"></a>
<h4 id="1、如何配置虚拟目录？"><a href="#1、如何配置虚拟目录？" class="headerlink" title="1、如何配置虚拟目录？"></a>1、如何配置虚拟目录？</h4><blockquote>
<p>找到 <code>Tomcat</code> 所在的文件目录，在其下有一个 <code>bin\server.xml</code> 文件,在 <code>&lt;Host&gt;&lt;/Host&gt;</code> 里的最后一行，加入如下代码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">docBase</span>=<span class="string">"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\app"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>写完整了就像这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></div><div class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line"><span class="tag">            <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></div><div class="line"><span class="tag">            <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">docBase</span>=<span class="string">"C:\\Program Files\\Apache Software Foundation\\Tomcat 9.0\\webapps\\app"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>其中的 <code>docBase</code> 的值就是要配的虚拟目录，注意要写成绝对路径,另外要注意的就是字符串要做转义处理 <code>\</code> 转义成 <code>\\</code></strong></p>
</blockquote>
<h4 id="2、如果起不起来怎么办？"><a href="#2、如果起不起来怎么办？" class="headerlink" title="2、如果起不起来怎么办？"></a>2、如果起不起来怎么办？</h4><p>这时候 <code>log</code> 文件夹下的日志或许能帮助我们了解到底报了什么错。很多情况下报错的原因是端口被暂用，这时候只要在 <code>server.xml</code> 下改一下相应的端口号就好啦！</p>
<blockquote>
<p>需要注意的是，<code>server.xml</code> 下配置不止一个端口号，有时候改了只改了一个端口号，可能仍然会报错，这时候就要修改其他被占用的端口号。</p>
</blockquote>
<hr>
<blockquote>
<p>想要了解tomcat各个端口的实际意义，可以参考以下链接</p>
</blockquote>
<p><a href="http://blog.csdn.net/fengspg/article/details/41895011" target="_blank" rel="external">“风的脚步”的CSDN博客</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 后台备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过JS获得浏览器的各种高度与宽度]]></title>
      <url>/2017/08/07/%E9%80%9A%E8%BF%87JS%E8%8E%B7%E5%BE%97%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%84%E7%A7%8D%E9%AB%98%E5%BA%A6%E4%B8%8E%E5%AE%BD%E5%BA%A6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>浏览器的窗口的大小可以通过 <code>document</code> 和 <code>window</code> 提供的一系列属性来获得 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/*</span></div><div class="line"><span class="comment">    网页可见区域宽：document.body.clientWidth</span></div><div class="line"><span class="comment">    网页可见区域高：document.body.clientHeight</span></div><div class="line"><span class="comment">    网页可见区域宽：document.body.offsetWidth  (包括边线的宽)</span></div><div class="line"><span class="comment">    网页可见区域高：document.body.offsetHeight (包括边线的宽)(注意不是浏览器窗口的高度)</span></div><div class="line"><span class="comment">    dom元素相对于其父定位元素顶部的距离：dom.offsetTop  (dom为dom对象的引用)(包括边线的宽)</span></div><div class="line"><span class="comment">    dom元素相对于其父定位元素左边的距离：dom.offsetLeft (dom为dom对象的引用)(包括边线的宽)</span></div><div class="line"><span class="comment">    网页正文全文宽：document.body.scrollWidth</span></div><div class="line"><span class="comment">    网页正文全文高：document.body.scrollHeight (注意不是浏览器窗口的高度)</span></div><div class="line"><span class="comment">    网页被卷去的高：document.body.scrollTop    (is_writeable)</span></div><div class="line"><span class="comment">    网页被卷去的左：document.body.scrollLeft   (is_writeable)</span></div><div class="line"><span class="comment">    网页正文部分上：window.screenTop(相对于桌面的高)</span></div><div class="line"><span class="comment">    网页正文部分左：window.screenLeft(相对于桌面的左)</span></div><div class="line"><span class="comment">    屏幕分辨率的高：window.screen.height</span></div><div class="line"><span class="comment">    屏幕分辨率的宽：window.screen.width</span></div><div class="line"><span class="comment">    屏幕可用工作区高度：window.screen.availHeight (相对于 屏幕分辨率的高 会把浏览器输入栏的高度去掉)</span></div><div class="line"><span class="comment">    屏幕可用工作区宽度：window.screen.availWidth  (似乎和 window.screen.width 的值一样)</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Query</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页可见区域宽：document.body.clientWidth -&gt;"</span>+<span class="built_in">document</span>.body.clientWidth) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页可见区域高：document.body.clientHeight -&gt;"</span>+<span class="built_in">document</span>.body.clientHeight) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页可见区域宽：document.body.offsetWidth (包括边线的宽) -&gt;"</span>+<span class="built_in">document</span>.body.offsetWidth) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页可见区域高：document.body.offsetHeight (包括边线的宽) -&gt;"</span>+<span class="built_in">document</span>.body.offsetHeight) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页正文全文宽：document.body.scrollWidth -&gt;"</span>+<span class="built_in">document</span>.body.scrollWidth) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页正文全文高：document.body.scrollHeight -&gt;"</span>+<span class="built_in">document</span>.body.scrollHeight) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页被卷去的高：document.body.scrollTop -&gt;"</span>+<span class="built_in">document</span>.body.scrollTop ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页被卷去的左：document.body.scrollLeft -&gt;"</span>+<span class="built_in">document</span>.body.scrollLeft ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页正文部分上：window.screenTop -&gt;"</span>+<span class="built_in">window</span>.screenTop ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"网页正文部分左：window.screenLeft -&gt;"</span>+<span class="built_in">window</span>.screenLeft) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"屏幕分辨率的高：window.screen.height -&gt;"</span>+<span class="built_in">window</span>.screen.height ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"屏幕分辨率的宽：window.screen.width -&gt;"</span>+<span class="built_in">window</span>.screen.width ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"屏幕可用工作区高度：window.screen.availHeight -&gt;"</span>+<span class="built_in">window</span>.screen.availHeight ) ;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"屏幕可用工作区宽度：window.screen.availWidth -&gt;"</span>+<span class="built_in">window</span>.screen.availWidth ) ;</div><div class="line">&#125;</div><div class="line">Query() ;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过css样式禁止事件&禁止图标]]></title>
      <url>/2017/08/07/%E9%80%9A%E8%BF%87csss%E6%A0%B7%E5%BC%8F%E7%A6%81%E6%AD%A2%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候，我们只想显示页面给用户看，而不想让用户有任何操作，这时候，在css中写入样式 <code>pointer-events:none</code> 就能达到想要的效果 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">            <span class="selector-class">.test1</span>&#123;</span></div><div class="line"><span class="undefined">                cursor: not-allowed;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.test2</span>&#123;</span></div><div class="line"><span class="css">                <span class="selector-tag">pointer-events</span><span class="selector-pseudo">:none</span>;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.test3</span>&#123;</span></div><div class="line"><span class="undefined">                cursor: not-allowed;</span></div><div class="line"><span class="css">                <span class="selector-tag">pointer-events</span><span class="selector-pseudo">:none</span>;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"test1"</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>&gt;</span>按钮一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"test2"</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>&gt;</span>按钮二<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"test3"</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>&gt;</span>按钮二<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">'test1'</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">'test2'</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">'test3'</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">onclick</span>=<span class="string">"con()"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">con</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">            alert(<span class="string">"show here!"</span>) ;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>不过需要注意的是，由于设置了 <code>pointer-events:none</code> 把所有点击事件全部禁掉了，所有的 <code>cursor</code> 也没有了,所以原本可以通过 <code>cursor: not-allowed</code> 显示的禁止图标也不会再显示了</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端备忘 </tag>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用闭包或者setInterval实现一个计时器]]></title>
      <url>/2017/08/07/%E7%94%A8%E9%97%AD%E5%8C%85%E6%88%96%E8%80%85setInterval%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E6%97%B6%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>在开发业务中，有时候需要手机获取验证码，一般情况下，在点击 <code>获取验证码</code> 后，会有一个60秒倒计时的需求，这时候可以用以下两个方法来实现 </p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>通过JS中的 <code>闭包</code> 的来实现，代码如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> time = time||<span class="number">60</span> ;  <span class="comment">//默认60s倒计时</span></div><div class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</div><div class="line">            setTimeout(fn,<span class="number">1000</span>) ;</div><div class="line">            <span class="built_in">console</span>.log(time--+<span class="string">'s'</span>) ;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'end'</span>) ;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> fn ;</div><div class="line">&#125;</div><div class="line">countDown()() ; <span class="comment">//运行方法</span></div></pre></td></tr></table></figure>
<blockquote>
<p>也可以通过JS中的 <code>setInterval</code> 方法来实现，代码如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> time = time||<span class="number">10</span> ; </div><div class="line">    <span class="keyword">var</span> fn = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">console</span>.log(time--+<span class="string">'s'</span>) ;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'end'</span>) ;</div><div class="line">            clearInterval(fn);</div><div class="line">        &#125;</div><div class="line">    &#125;,<span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line">countDown() ; <span class="comment">//运行方法</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中查询URL字符串中的参数]]></title>
      <url>/2017/08/03/JS%E4%B8%AD%E6%9F%A5%E8%AF%A2URL%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>原生JS中的 <code>location.search</code> 可以返回从问号到 URL 末尾的所有内容，但是访问其中的每个字符串参数却很麻烦。这时候，可以创建一个函数，用以解析查询字符串 </p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryStringArgs</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//取得查询字符串并去掉开头的问号</span></div><div class="line">    <span class="keyword">var</span> qs = (location.search.length &gt; <span class="number">0</span> ? location.search.substring(<span class="number">1</span>) : <span class="string">""</span>),</div><div class="line"></div><div class="line">    <span class="comment">//保存数据的对象</span></div><div class="line">    args = &#123;&#125;,</div><div class="line"></div><div class="line">    <span class="comment">//取得每一项</span></div><div class="line">    items = qs.length ? qs.split(<span class="string">"&amp;"</span>) : [],</div><div class="line">    item = <span class="literal">null</span>,</div><div class="line">    name = <span class="literal">null</span>, </div><div class="line">    value = <span class="literal">null</span>,</div><div class="line">    <span class="comment">//在 for 循环中使用</span></div><div class="line">    i = <span class="number">0</span>,</div><div class="line">    len = items.length;</div><div class="line">    <span class="comment">//逐个将每一项添加到 args 对象中</span></div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">        item = items[i].split(<span class="string">"="</span>);</div><div class="line">        name = <span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>]);</div><div class="line">        value = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">if</span> (name.length) &#123;</div><div class="line">            args[name] = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> args;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样<code>getQueryStringArgs()</code>方法就会返回包含所有URL参数的一个对象。</p>
<blockquote>
<p>参考文献<br>JavaScript高级程序设计（第3版）P207</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
            <tag> 前端备忘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo设置博文置顶]]></title>
      <url>/2017/07/31/hexo%E8%AE%BE%E7%BD%AE%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有时候我们需要置顶自己的某篇博文，这时候我们可以手动修改<code>node_moudles</code>文件夹下的相关代码 </p>
</blockquote>
<a id="more"></a>
<div style="text-align: -webkit-auto;">修改 <code>hero-generator-index</code> 插件，把文件：<code>node_modules/hexo-generator-index/lib/generator.js</code> 内的代码替换为如下所示：</div>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</div><div class="line">  <span class="keyword">var</span> posts = locals.posts;</div><div class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></div><div class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></div><div class="line">    &#125;);</div><div class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</div><div class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</div><div class="line">    perPage: config.index_generator.per_page,</div><div class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</div><div class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</div><div class="line">    data: &#123;</div><div class="line">      __index: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在文章中添加相应的 <code>top</code> 值，数值越大文章就会越靠前，如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 解决Charles乱码问题</div><div class="line">date: <span class="number">2017</span><span class="number">-05</span><span class="number">-22</span> <span class="number">22</span>:<span class="number">45</span>:<span class="number">48</span></div><div class="line">tags: 技巧</div><div class="line">categories: 技巧</div><div class="line">copyright: <span class="literal">true</span></div><div class="line">top: <span class="number">100</span></div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p>参考文献<br><a href="http://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="external">Moorez的简书</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
